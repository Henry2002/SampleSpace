{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __read, __spreadArray } from \"tslib\";\nimport { MDCFoundation } from './foundation';\n\nvar MDCComponent =\n/** @class */\nfunction () {\n  function MDCComponent(root, foundation) {\n    var args = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      args[_i - 2] = arguments[_i];\n    }\n\n    this.root = root;\n    this.initialize.apply(this, __spreadArray([], __read(args))); // Note that we initialize foundation here and not within the constructor's\n    // default param so that this.root is defined and can be used within the\n    // foundation class.\n\n    this.foundation = foundation === undefined ? this.getDefaultFoundation() : foundation;\n    this.foundation.init();\n    this.initialSyncWithDOM();\n  }\n\n  MDCComponent.attachTo = function (root) {\n    // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n    // returns an instantiated component with its root set to that element. Also note that in the cases of\n    // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n    // from getDefaultFoundation().\n    return new MDCComponent(root, new MDCFoundation({}));\n  };\n  /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */\n\n\n  MDCComponent.prototype.initialize = function () {\n    var _args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    } // Subclasses can override this to do any additional setup work that would be considered part of a\n    // \"constructor\". Essentially, it is a hook into the parent constructor before the foundation is\n    // initialized. Any additional arguments besides root and foundation will be passed in here.\n\n  };\n\n  MDCComponent.prototype.getDefaultFoundation = function () {\n    // Subclasses must override this method to return a properly configured foundation class for the\n    // component.\n    throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');\n  };\n\n  MDCComponent.prototype.initialSyncWithDOM = function () {// Subclasses should override this method if they need to perform work to synchronize with a host DOM\n    // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n    // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n    // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n  };\n\n  MDCComponent.prototype.destroy = function () {\n    // Subclasses may implement this method to release any resources / deregister any listeners they have\n    // attached. An example of this might be deregistering a resize event from the window object.\n    this.foundation.destroy();\n  };\n\n  MDCComponent.prototype.listen = function (evtType, handler, options) {\n    this.root.addEventListener(evtType, handler, options);\n  };\n\n  MDCComponent.prototype.unlisten = function (evtType, handler, options) {\n    this.root.removeEventListener(evtType, handler, options);\n  };\n  /**\n   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.\n   */\n\n\n  MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {\n    if (shouldBubble === void 0) {\n      shouldBubble = false;\n    }\n\n    var evt;\n\n    if (typeof CustomEvent === 'function') {\n      evt = new CustomEvent(evtType, {\n        bubbles: shouldBubble,\n        detail: evtData\n      });\n    } else {\n      evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n    }\n\n    this.root.dispatchEvent(evt);\n  };\n\n  return MDCComponent;\n}();\n\nexport { MDCComponent }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCComponent;","map":{"version":3,"names":["__read","__spreadArray","MDCFoundation","MDCComponent","root","foundation","args","_i","arguments","length","initialize","apply","undefined","getDefaultFoundation","init","initialSyncWithDOM","attachTo","prototype","_args","Error","destroy","listen","evtType","handler","options","addEventListener","unlisten","removeEventListener","emit","evtData","shouldBubble","evt","CustomEvent","bubbles","detail","document","createEvent","initCustomEvent","dispatchEvent"],"sources":["C:/Users/Henry/Desktop/New folder/Atomas2/node_modules/@material/base/component.js"],"sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __read, __spreadArray } from \"tslib\";\nimport { MDCFoundation } from './foundation';\nvar MDCComponent = /** @class */ (function () {\n    function MDCComponent(root, foundation) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        this.root = root;\n        this.initialize.apply(this, __spreadArray([], __read(args)));\n        // Note that we initialize foundation here and not within the constructor's\n        // default param so that this.root is defined and can be used within the\n        // foundation class.\n        this.foundation =\n            foundation === undefined ? this.getDefaultFoundation() : foundation;\n        this.foundation.init();\n        this.initialSyncWithDOM();\n    }\n    MDCComponent.attachTo = function (root) {\n        // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n        // returns an instantiated component with its root set to that element. Also note that in the cases of\n        // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n        // from getDefaultFoundation().\n        return new MDCComponent(root, new MDCFoundation({}));\n    };\n    /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */\n    MDCComponent.prototype.initialize = function () {\n        var _args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            _args[_i] = arguments[_i];\n        }\n        // Subclasses can override this to do any additional setup work that would be considered part of a\n        // \"constructor\". Essentially, it is a hook into the parent constructor before the foundation is\n        // initialized. Any additional arguments besides root and foundation will be passed in here.\n    };\n    MDCComponent.prototype.getDefaultFoundation = function () {\n        // Subclasses must override this method to return a properly configured foundation class for the\n        // component.\n        throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' +\n            'foundation class');\n    };\n    MDCComponent.prototype.initialSyncWithDOM = function () {\n        // Subclasses should override this method if they need to perform work to synchronize with a host DOM\n        // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n        // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n        // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n    };\n    MDCComponent.prototype.destroy = function () {\n        // Subclasses may implement this method to release any resources / deregister any listeners they have\n        // attached. An example of this might be deregistering a resize event from the window object.\n        this.foundation.destroy();\n    };\n    MDCComponent.prototype.listen = function (evtType, handler, options) {\n        this.root.addEventListener(evtType, handler, options);\n    };\n    MDCComponent.prototype.unlisten = function (evtType, handler, options) {\n        this.root.removeEventListener(evtType, handler, options);\n    };\n    /**\n     * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.\n     */\n    MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {\n        if (shouldBubble === void 0) { shouldBubble = false; }\n        var evt;\n        if (typeof CustomEvent === 'function') {\n            evt = new CustomEvent(evtType, {\n                bubbles: shouldBubble,\n                detail: evtData,\n            });\n        }\n        else {\n            evt = document.createEvent('CustomEvent');\n            evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n        }\n        this.root.dispatchEvent(evt);\n    };\n    return MDCComponent;\n}());\nexport { MDCComponent };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}