{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/table';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy, DataSource } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { map } from 'rxjs/operators';\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\n\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\n\nfunction MatTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\n\nfunction MatTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n  }\n}\n\nclass MatRecycleRows {}\n\nMatRecycleRows.ɵfac = function MatRecycleRows_Factory(t) {\n  return new (t || MatRecycleRows)();\n};\n\nMatRecycleRows.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatRecycleRows,\n  selectors: [[\"mat-table\", \"recycleRows\", \"\"], [\"table\", \"mat-table\", \"\", \"recycleRows\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _RecycleViewRepeaterStrategy\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRecycleRows, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n      providers: [{\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _RecycleViewRepeaterStrategy\n      }]\n    }]\n  }], null, null);\n})();\n\nclass MatTable extends CdkTable {\n  constructor() {\n    super(...arguments);\n    /** Overrides the sticky CSS class set by the `CdkTable`. */\n\n    this.stickyCssClass = 'mat-mdc-table-sticky';\n    /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n\n    this.needsPositionStickyOnElement = false;\n  }\n\n  ngOnInit() {\n    super.ngOnInit(); // After ngOnInit, the `CdkTable` has created and inserted the table sections (thead, tbody,\n    // tfoot). MDC requires the `mdc-data-table__content` class to be added to the body. Note that\n    // this only applies to native tables, because we don't wrap the content of flexbox-based ones.\n\n    if (this._isNativeHtmlTable) {\n      const tbody = this._elementRef.nativeElement.querySelector('tbody');\n\n      tbody.classList.add('mdc-data-table__content');\n    }\n  }\n\n}\n\nMatTable.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTable_BaseFactory;\n  return function MatTable_Factory(t) {\n    return (ɵMatTable_BaseFactory || (ɵMatTable_BaseFactory = i0.ɵɵgetInheritedFactory(MatTable)))(t || MatTable);\n  };\n}();\n\nMatTable.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatTable,\n  selectors: [[\"mat-table\"], [\"table\", \"mat-table\", \"\"]],\n  hostAttrs: [\"ngSkipHydration\", \"\", 1, \"mat-mdc-table\", \"mdc-data-table__table\"],\n  hostVars: 2,\n  hostBindings: function MatTable_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mdc-table-fixed-layout\", ctx.fixedLayout);\n    }\n  },\n  exportAs: [\"matTable\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTable,\n    useExisting: MatTable\n  }, {\n    provide: CDK_TABLE,\n    useExisting: MatTable\n  }, {\n    provide: _COALESCED_STYLE_SCHEDULER,\n    useClass: _CoalescedStyleScheduler\n  }, // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n  //  is only included in the build if used.\n  {\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _DisposeViewRepeaterStrategy\n  }, // Prevent nested tables from seeing this table's StickyPositioningListener.\n  {\n    provide: STICKY_POSITIONING_LISTENER,\n    useValue: null\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 0,\n  consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n  template: function MatTable_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c0);\n      i0.ɵɵprojection(0);\n      i0.ɵɵprojection(1, 1);\n      i0.ɵɵelementContainer(2, 0)(3, 1)(4, 2)(5, 3);\n    }\n  },\n  dependencies: [i1.DataRowOutlet, i1.HeaderRowOutlet, i1.FooterRowOutlet, i1.NoDataRowOutlet],\n  styles: [\".mat-mdc-table-sticky{position:sticky !important}.mdc-data-table{-webkit-overflow-scrolling:touch;display:inline-flex;flex-direction:column;box-sizing:border-box;position:relative}.mdc-data-table__table-container{-webkit-overflow-scrolling:touch;overflow-x:auto;width:100%}.mdc-data-table__table{min-width:100%;border:0;white-space:nowrap;border-spacing:0;table-layout:fixed}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell,.mdc-data-table__cell[dir=rtl]{text-align:right}.mdc-data-table__cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__cell--numeric,.mdc-data-table__cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell{box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mdc-data-table__header-cell,.mdc-data-table__header-cell[dir=rtl]{text-align:right}.mdc-data-table__header-cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__header-cell--numeric,.mdc-data-table__header-cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell-wrapper{align-items:center;display:inline-flex;vertical-align:middle}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px 0 16px}.mdc-data-table__header-cell--checkbox,.mdc-data-table__cell--checkbox{padding-left:4px;padding-right:0}[dir=rtl] .mdc-data-table__header-cell--checkbox,[dir=rtl] .mdc-data-table__cell--checkbox,.mdc-data-table__header-cell--checkbox[dir=rtl],.mdc-data-table__cell--checkbox[dir=rtl]{padding-left:0;padding-right:4px}mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{--mat-table-row-item-outline-width:1px;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color)}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, rgba(0, 0, 0, 0.87));font-family:var(--mat-table-header-headline-font, Roboto, sans-serif);line-height:var(--mat-table-header-headline-line-height);font-size:var(--mat-table-header-headline-size, 14px);font-weight:var(--mat-table-header-headline-weight, 500)}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, rgba(0, 0, 0, 0.87))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, Roboto, sans-serif);line-height:var(--mat-table-row-item-label-text-line-height);font-size:var(--mat-table-row-item-label-text-size, 14px);font-weight:var(--mat-table-row-item-label-text-weight)}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, rgba(0, 0, 0, 0.87));font-family:var(--mat-table-footer-supporting-text-font, Roboto, sans-serif);line-height:var(--mat-table-footer-supporting-text-line-height);font-size:var(--mat-table-footer-supporting-text-size, 14px);font-weight:var(--mat-table-footer-supporting-text-weight);letter-spacing:var(--mat-table-footer-supporting-text-tracking)}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, rgba(0, 0, 0, 0.12));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking);font-weight:inherit;line-height:inherit}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, rgba(0, 0, 0, 0.12));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking);line-height:inherit}.mdc-data-table__row:last-child .mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking)}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTable, [{\n    type: Component,\n    args: [{\n      selector: 'mat-table, table[mat-table]',\n      exportAs: 'matTable',\n      template: `\n    <ng-content select=\"caption\"></ng-content>\n    <ng-content select=\"colgroup, col\"></ng-content>\n    <ng-container headerRowOutlet></ng-container>\n    <ng-container rowOutlet></ng-container>\n    <ng-container noDataRowOutlet></ng-container>\n    <ng-container footerRowOutlet></ng-container>\n  `,\n      host: {\n        'class': 'mat-mdc-table mdc-data-table__table',\n        '[class.mdc-table-fixed-layout]': 'fixedLayout',\n        'ngSkipHydration': ''\n      },\n      providers: [{\n        provide: CdkTable,\n        useExisting: MatTable\n      }, {\n        provide: CDK_TABLE,\n        useExisting: MatTable\n      }, {\n        provide: _COALESCED_STYLE_SCHEDULER,\n        useClass: _CoalescedStyleScheduler\n      }, // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n      //  is only included in the build if used.\n      {\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _DisposeViewRepeaterStrategy\n      }, // Prevent nested tables from seeing this table's StickyPositioningListener.\n      {\n        provide: STICKY_POSITIONING_LISTENER,\n        useValue: null\n      }],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      styles: [\".mat-mdc-table-sticky{position:sticky !important}.mdc-data-table{-webkit-overflow-scrolling:touch;display:inline-flex;flex-direction:column;box-sizing:border-box;position:relative}.mdc-data-table__table-container{-webkit-overflow-scrolling:touch;overflow-x:auto;width:100%}.mdc-data-table__table{min-width:100%;border:0;white-space:nowrap;border-spacing:0;table-layout:fixed}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell,.mdc-data-table__cell[dir=rtl]{text-align:right}.mdc-data-table__cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__cell--numeric,.mdc-data-table__cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell{box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mdc-data-table__header-cell,.mdc-data-table__header-cell[dir=rtl]{text-align:right}.mdc-data-table__header-cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__header-cell--numeric,.mdc-data-table__header-cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell-wrapper{align-items:center;display:inline-flex;vertical-align:middle}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px 0 16px}.mdc-data-table__header-cell--checkbox,.mdc-data-table__cell--checkbox{padding-left:4px;padding-right:0}[dir=rtl] .mdc-data-table__header-cell--checkbox,[dir=rtl] .mdc-data-table__cell--checkbox,.mdc-data-table__header-cell--checkbox[dir=rtl],.mdc-data-table__cell--checkbox[dir=rtl]{padding-left:0;padding-right:4px}mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{--mat-table-row-item-outline-width:1px;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color)}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, rgba(0, 0, 0, 0.87));font-family:var(--mat-table-header-headline-font, Roboto, sans-serif);line-height:var(--mat-table-header-headline-line-height);font-size:var(--mat-table-header-headline-size, 14px);font-weight:var(--mat-table-header-headline-weight, 500)}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, rgba(0, 0, 0, 0.87))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, Roboto, sans-serif);line-height:var(--mat-table-row-item-label-text-line-height);font-size:var(--mat-table-row-item-label-text-size, 14px);font-weight:var(--mat-table-row-item-label-text-weight)}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, rgba(0, 0, 0, 0.87));font-family:var(--mat-table-footer-supporting-text-font, Roboto, sans-serif);line-height:var(--mat-table-footer-supporting-text-line-height);font-size:var(--mat-table-footer-supporting-text-size, 14px);font-weight:var(--mat-table-footer-supporting-text-weight);letter-spacing:var(--mat-table-footer-supporting-text-tracking)}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, rgba(0, 0, 0, 0.12));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking);font-weight:inherit;line-height:inherit}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, rgba(0, 0, 0, 0.12));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking);line-height:inherit}.mdc-data-table__row:last-child .mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking)}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\"]\n    }]\n  }], null, null);\n})();\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n\n\nclass MatCellDef extends CdkCellDef {}\n\nMatCellDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatCellDef_BaseFactory;\n  return function MatCellDef_Factory(t) {\n    return (ɵMatCellDef_BaseFactory || (ɵMatCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatCellDef)))(t || MatCellDef);\n  };\n}();\n\nMatCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatCellDef,\n  selectors: [[\"\", \"matCellDef\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkCellDef,\n    useExisting: MatCellDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matCellDef]',\n      providers: [{\n        provide: CdkCellDef,\n        useExisting: MatCellDef\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n\n\nclass MatHeaderCellDef extends CdkHeaderCellDef {}\n\nMatHeaderCellDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatHeaderCellDef_BaseFactory;\n  return function MatHeaderCellDef_Factory(t) {\n    return (ɵMatHeaderCellDef_BaseFactory || (ɵMatHeaderCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderCellDef)))(t || MatHeaderCellDef);\n  };\n}();\n\nMatHeaderCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatHeaderCellDef,\n  selectors: [[\"\", \"matHeaderCellDef\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkHeaderCellDef,\n    useExisting: MatHeaderCellDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatHeaderCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matHeaderCellDef]',\n      providers: [{\n        provide: CdkHeaderCellDef,\n        useExisting: MatHeaderCellDef\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n\n\nclass MatFooterCellDef extends CdkFooterCellDef {}\n\nMatFooterCellDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatFooterCellDef_BaseFactory;\n  return function MatFooterCellDef_Factory(t) {\n    return (ɵMatFooterCellDef_BaseFactory || (ɵMatFooterCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterCellDef)))(t || MatFooterCellDef);\n  };\n}();\n\nMatFooterCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatFooterCellDef,\n  selectors: [[\"\", \"matFooterCellDef\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkFooterCellDef,\n    useExisting: MatFooterCellDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatFooterCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matFooterCellDef]',\n      providers: [{\n        provide: CdkFooterCellDef,\n        useExisting: MatFooterCellDef\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n\n\nclass MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  get name() {\n    return this._name;\n  }\n\n  set name(name) {\n    this._setNameInput(name);\n  }\n  /**\n   * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n   * In the future, this will only add \"mat-column-\" and columnCssClassName\n   * will change from type string[] to string.\n   * @docs-private\n   */\n\n\n  _updateColumnCssClassName() {\n    super._updateColumnCssClassName();\n\n    this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n  }\n\n}\n\nMatColumnDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatColumnDef_BaseFactory;\n  return function MatColumnDef_Factory(t) {\n    return (ɵMatColumnDef_BaseFactory || (ɵMatColumnDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatColumnDef)))(t || MatColumnDef);\n  };\n}();\n\nMatColumnDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatColumnDef,\n  selectors: [[\"\", \"matColumnDef\", \"\"]],\n  inputs: {\n    sticky: \"sticky\",\n    name: [\"matColumnDef\", \"name\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkColumnDef,\n    useExisting: MatColumnDef\n  }, {\n    provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n    useExisting: MatColumnDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatColumnDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matColumnDef]',\n      inputs: ['sticky'],\n      providers: [{\n        provide: CdkColumnDef,\n        useExisting: MatColumnDef\n      }, {\n        provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n        useExisting: MatColumnDef\n      }]\n    }]\n  }], null, {\n    name: [{\n      type: Input,\n      args: ['matColumnDef']\n    }]\n  });\n})();\n/** Header cell template container that adds the right classes and role. */\n\n\nclass MatHeaderCell extends CdkHeaderCell {}\n\nMatHeaderCell.ɵfac = /* @__PURE__ */function () {\n  let ɵMatHeaderCell_BaseFactory;\n  return function MatHeaderCell_Factory(t) {\n    return (ɵMatHeaderCell_BaseFactory || (ɵMatHeaderCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderCell)))(t || MatHeaderCell);\n  };\n}();\n\nMatHeaderCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatHeaderCell,\n  selectors: [[\"mat-header-cell\"], [\"th\", \"mat-header-cell\", \"\"]],\n  hostAttrs: [\"role\", \"columnheader\", 1, \"mat-mdc-header-cell\", \"mdc-data-table__header-cell\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatHeaderCell, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-header-cell, th[mat-header-cell]',\n      host: {\n        'class': 'mat-mdc-header-cell mdc-data-table__header-cell',\n        'role': 'columnheader'\n      }\n    }]\n  }], null, null);\n})();\n/** Footer cell template container that adds the right classes and role. */\n\n\nclass MatFooterCell extends CdkFooterCell {}\n\nMatFooterCell.ɵfac = /* @__PURE__ */function () {\n  let ɵMatFooterCell_BaseFactory;\n  return function MatFooterCell_Factory(t) {\n    return (ɵMatFooterCell_BaseFactory || (ɵMatFooterCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterCell)))(t || MatFooterCell);\n  };\n}();\n\nMatFooterCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatFooterCell,\n  selectors: [[\"mat-footer-cell\"], [\"td\", \"mat-footer-cell\", \"\"]],\n  hostAttrs: [1, \"mat-mdc-footer-cell\", \"mdc-data-table__cell\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatFooterCell, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-footer-cell, td[mat-footer-cell]',\n      host: {\n        'class': 'mat-mdc-footer-cell mdc-data-table__cell'\n      }\n    }]\n  }], null, null);\n})();\n/** Cell template container that adds the right classes and role. */\n\n\nclass MatCell extends CdkCell {}\n\nMatCell.ɵfac = /* @__PURE__ */function () {\n  let ɵMatCell_BaseFactory;\n  return function MatCell_Factory(t) {\n    return (ɵMatCell_BaseFactory || (ɵMatCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatCell)))(t || MatCell);\n  };\n}();\n\nMatCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatCell,\n  selectors: [[\"mat-cell\"], [\"td\", \"mat-cell\", \"\"]],\n  hostAttrs: [1, \"mat-mdc-cell\", \"mdc-data-table__cell\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCell, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-cell, td[mat-cell]',\n      host: {\n        'class': 'mat-mdc-cell mdc-data-table__cell'\n      }\n    }]\n  }], null, null);\n})(); // We can't reuse `CDK_ROW_TEMPLATE` because it's incompatible with local compilation mode.\n\n\nconst ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n\nclass MatHeaderRowDef extends CdkHeaderRowDef {}\n\nMatHeaderRowDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatHeaderRowDef_BaseFactory;\n  return function MatHeaderRowDef_Factory(t) {\n    return (ɵMatHeaderRowDef_BaseFactory || (ɵMatHeaderRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderRowDef)))(t || MatHeaderRowDef);\n  };\n}();\n\nMatHeaderRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatHeaderRowDef,\n  selectors: [[\"\", \"matHeaderRowDef\", \"\"]],\n  inputs: {\n    columns: [\"matHeaderRowDef\", \"columns\"],\n    sticky: [\"matHeaderRowDefSticky\", \"sticky\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkHeaderRowDef,\n    useExisting: MatHeaderRowDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatHeaderRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matHeaderRowDef]',\n      providers: [{\n        provide: CdkHeaderRowDef,\n        useExisting: MatHeaderRowDef\n      }],\n      inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky']\n    }]\n  }], null, null);\n})();\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n\n\nclass MatFooterRowDef extends CdkFooterRowDef {}\n\nMatFooterRowDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatFooterRowDef_BaseFactory;\n  return function MatFooterRowDef_Factory(t) {\n    return (ɵMatFooterRowDef_BaseFactory || (ɵMatFooterRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterRowDef)))(t || MatFooterRowDef);\n  };\n}();\n\nMatFooterRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatFooterRowDef,\n  selectors: [[\"\", \"matFooterRowDef\", \"\"]],\n  inputs: {\n    columns: [\"matFooterRowDef\", \"columns\"],\n    sticky: [\"matFooterRowDefSticky\", \"sticky\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkFooterRowDef,\n    useExisting: MatFooterRowDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatFooterRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matFooterRowDef]',\n      providers: [{\n        provide: CdkFooterRowDef,\n        useExisting: MatFooterRowDef\n      }],\n      inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky']\n    }]\n  }], null, null);\n})();\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n\n\nclass MatRowDef extends CdkRowDef {}\n\nMatRowDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatRowDef_BaseFactory;\n  return function MatRowDef_Factory(t) {\n    return (ɵMatRowDef_BaseFactory || (ɵMatRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatRowDef)))(t || MatRowDef);\n  };\n}();\n\nMatRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatRowDef,\n  selectors: [[\"\", \"matRowDef\", \"\"]],\n  inputs: {\n    columns: [\"matRowDefColumns\", \"columns\"],\n    when: [\"matRowDefWhen\", \"when\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkRowDef,\n    useExisting: MatRowDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matRowDef]',\n      providers: [{\n        provide: CdkRowDef,\n        useExisting: MatRowDef\n      }],\n      inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen']\n    }]\n  }], null, null);\n})();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n\n\nclass MatHeaderRow extends CdkHeaderRow {}\n\nMatHeaderRow.ɵfac = /* @__PURE__ */function () {\n  let ɵMatHeaderRow_BaseFactory;\n  return function MatHeaderRow_Factory(t) {\n    return (ɵMatHeaderRow_BaseFactory || (ɵMatHeaderRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatHeaderRow)))(t || MatHeaderRow);\n  };\n}();\n\nMatHeaderRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatHeaderRow,\n  selectors: [[\"mat-header-row\"], [\"tr\", \"mat-header-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"mat-mdc-header-row\", \"mdc-data-table__header-row\"],\n  exportAs: [\"matHeaderRow\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkHeaderRow,\n    useExisting: MatHeaderRow\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function MatHeaderRow_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [i1.CdkCellOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatHeaderRow, [{\n    type: Component,\n    args: [{\n      selector: 'mat-header-row, tr[mat-header-row]',\n      template: ROW_TEMPLATE,\n      host: {\n        'class': 'mat-mdc-header-row mdc-data-table__header-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matHeaderRow',\n      providers: [{\n        provide: CdkHeaderRow,\n        useExisting: MatHeaderRow\n      }]\n    }]\n  }], null, null);\n})();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n\n\nclass MatFooterRow extends CdkFooterRow {}\n\nMatFooterRow.ɵfac = /* @__PURE__ */function () {\n  let ɵMatFooterRow_BaseFactory;\n  return function MatFooterRow_Factory(t) {\n    return (ɵMatFooterRow_BaseFactory || (ɵMatFooterRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatFooterRow)))(t || MatFooterRow);\n  };\n}();\n\nMatFooterRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatFooterRow,\n  selectors: [[\"mat-footer-row\"], [\"tr\", \"mat-footer-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"mat-mdc-footer-row\", \"mdc-data-table__row\"],\n  exportAs: [\"matFooterRow\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkFooterRow,\n    useExisting: MatFooterRow\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function MatFooterRow_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [i1.CdkCellOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatFooterRow, [{\n    type: Component,\n    args: [{\n      selector: 'mat-footer-row, tr[mat-footer-row]',\n      template: ROW_TEMPLATE,\n      host: {\n        'class': 'mat-mdc-footer-row mdc-data-table__row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matFooterRow',\n      providers: [{\n        provide: CdkFooterRow,\n        useExisting: MatFooterRow\n      }]\n    }]\n  }], null, null);\n})();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n\n\nclass MatRow extends CdkRow {}\n\nMatRow.ɵfac = /* @__PURE__ */function () {\n  let ɵMatRow_BaseFactory;\n  return function MatRow_Factory(t) {\n    return (ɵMatRow_BaseFactory || (ɵMatRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatRow)))(t || MatRow);\n  };\n}();\n\nMatRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatRow,\n  selectors: [[\"mat-row\"], [\"tr\", \"mat-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"mat-mdc-row\", \"mdc-data-table__row\"],\n  exportAs: [\"matRow\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkRow,\n    useExisting: MatRow\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function MatRow_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [i1.CdkCellOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatRow, [{\n    type: Component,\n    args: [{\n      selector: 'mat-row, tr[mat-row]',\n      template: ROW_TEMPLATE,\n      host: {\n        'class': 'mat-mdc-row mdc-data-table__row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matRow',\n      providers: [{\n        provide: CdkRow,\n        useExisting: MatRow\n      }]\n    }]\n  }], null, null);\n})();\n/** Row that can be used to display a message when no data is shown in the table. */\n\n\nclass MatNoDataRow extends CdkNoDataRow {\n  constructor() {\n    super(...arguments);\n    this._contentClassName = 'mat-mdc-no-data-row';\n  }\n\n}\n\nMatNoDataRow.ɵfac = /* @__PURE__ */function () {\n  let ɵMatNoDataRow_BaseFactory;\n  return function MatNoDataRow_Factory(t) {\n    return (ɵMatNoDataRow_BaseFactory || (ɵMatNoDataRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatNoDataRow)))(t || MatNoDataRow);\n  };\n}();\n\nMatNoDataRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatNoDataRow,\n  selectors: [[\"ng-template\", \"matNoDataRow\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkNoDataRow,\n    useExisting: MatNoDataRow\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatNoDataRow, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matNoDataRow]',\n      providers: [{\n        provide: CdkNoDataRow,\n        useExisting: MatNoDataRow\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\n\n\nclass MatTextColumn extends CdkTextColumn {}\n\nMatTextColumn.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTextColumn_BaseFactory;\n  return function MatTextColumn_Factory(t) {\n    return (ɵMatTextColumn_BaseFactory || (ɵMatTextColumn_BaseFactory = i0.ɵɵgetInheritedFactory(MatTextColumn)))(t || MatTextColumn);\n  };\n}();\n\nMatTextColumn.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatTextColumn,\n  selectors: [[\"mat-text-column\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 0,\n  consts: [[\"matColumnDef\", \"\"], [\"mat-header-cell\", \"\", 3, \"text-align\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"text-align\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"]],\n  template: function MatTextColumn_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainerStart(0, 0);\n      i0.ɵɵtemplate(1, MatTextColumn_th_1_Template, 2, 3, \"th\", 1);\n      i0.ɵɵtemplate(2, MatTextColumn_td_2_Template, 2, 3, \"td\", 2);\n      i0.ɵɵelementContainerEnd();\n    }\n  },\n  dependencies: [MatHeaderCellDef, MatColumnDef, MatCellDef, MatHeaderCell, MatCell],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTextColumn, [{\n    type: Component,\n    args: [{\n      selector: 'mat-text-column',\n      template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      // Change detection is intentionally not set to OnPush. This component's template will be provided\n      // to the table to be inserted into its view. This is problematic when change detection runs since\n      // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n      // mean's the template in the table's view will not have the updated value (and in fact will cause\n      // an ExpressionChangedAfterItHasBeenCheckedError).\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default\n    }]\n  }], null, null);\n})();\n\nconst EXPORTED_DECLARATIONS = [// Table\nMatTable, MatRecycleRows, // Template defs\nMatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, // Cell directives\nMatHeaderCell, MatCell, MatFooterCell, // Row directives\nMatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn];\n\nclass MatTableModule {}\n\nMatTableModule.ɵfac = function MatTableModule_Factory(t) {\n  return new (t || MatTableModule)();\n};\n\nMatTableModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatTableModule\n});\nMatTableModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [MatCommonModule, CdkTableModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, CdkTableModule],\n      exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n      declarations: EXPORTED_DECLARATIONS\n    }]\n  }], null, null);\n})();\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\n\n\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/** Shared base class with MDC-based implementation. */\n\nclass _MatTableDataSource extends DataSource {\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() {\n    return this._data.value;\n  }\n\n  set data(data) {\n    data = Array.isArray(data) ? data : [];\n\n    this._data.next(data); // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n\n\n    if (!this._renderChangesSubscription) {\n      this._filterData(data);\n    }\n  }\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n\n\n  get filter() {\n    return this._filter.value;\n  }\n\n  set filter(filter) {\n    this._filter.next(filter); // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n\n\n    if (!this._renderChangesSubscription) {\n      this._filterData(this.data);\n    }\n  }\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n\n\n  get sort() {\n    return this._sort;\n  }\n\n  set sort(sort) {\n    this._sort = sort;\n\n    this._updateChangeSubscription();\n  }\n  /**\n   * Instance of the paginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the paginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n\n\n  get paginator() {\n    return this._paginator;\n  }\n\n  set paginator(paginator) {\n    this._paginator = paginator;\n\n    this._updateChangeSubscription();\n  }\n\n  constructor(initialData = []) {\n    super();\n    /** Stream emitting render data to the table (depends on ordered data changes). */\n\n    this._renderData = new BehaviorSubject([]);\n    /** Stream that emits when a new filter string is set on the data source. */\n\n    this._filter = new BehaviorSubject('');\n    /** Used to react to internal changes of the paginator that are made by the data source itself. */\n\n    this._internalPageChanges = new Subject();\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     */\n\n    this._renderChangesSubscription = null;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting through\n     * the default sortData function.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * @param data Data object that is being accessed.\n     * @param sortHeaderId The name of the column that represents the data.\n     */\n\n    this.sortingDataAccessor = (data, sortHeaderId) => {\n      const value = data[sortHeaderId];\n\n      if (_isNumberValue(value)) {\n        const numberValue = Number(value); // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n        // leave them as strings. For more info: https://goo.gl/y5vbSg\n\n        return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n      }\n\n      return value;\n    };\n    /**\n     * Gets a sorted copy of the data array based on the state of the MatSort. Called\n     * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n     * By default, the function retrieves the active sort and its direction and compares data\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n     * of data ordering.\n     * @param data The array of data that should be sorted.\n     * @param sort The connected MatSort that holds the current sort state.\n     */\n\n\n    this.sortData = (data, sort) => {\n      const active = sort.active;\n      const direction = sort.direction;\n\n      if (!active || direction == '') {\n        return data;\n      }\n\n      return data.sort((a, b) => {\n        let valueA = this.sortingDataAccessor(a, active);\n        let valueB = this.sortingDataAccessor(b, active); // If there are data in the column that can be converted to a number,\n        // it must be ensured that the rest of the data\n        // is of the same type so as not to order incorrectly.\n\n        const valueAType = typeof valueA;\n        const valueBType = typeof valueB;\n\n        if (valueAType !== valueBType) {\n          if (valueAType === 'number') {\n            valueA += '';\n          }\n\n          if (valueBType === 'number') {\n            valueB += '';\n          }\n        } // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n        // one value exists while the other doesn't. In this case, existing value should come last.\n        // This avoids inconsistent results when comparing values to undefined/null.\n        // If neither value exists, return 0 (equal).\n\n\n        let comparatorResult = 0;\n\n        if (valueA != null && valueB != null) {\n          // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n          if (valueA > valueB) {\n            comparatorResult = 1;\n          } else if (valueA < valueB) {\n            comparatorResult = -1;\n          }\n        } else if (valueA != null) {\n          comparatorResult = 1;\n        } else if (valueB != null) {\n          comparatorResult = -1;\n        }\n\n        return comparatorResult * (direction == 'asc' ? 1 : -1);\n      });\n    };\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n     * filter matching.\n     * @param data Data object used to check against the filter.\n     * @param filter Filter string that has been set on the data source.\n     * @returns Whether the filter matches against the data\n     */\n\n\n    this.filterPredicate = (data, filter) => {\n      // Transform the data into a lowercase string of all property values.\n      const dataStr = Object.keys(data).reduce((currentTerm, key) => {\n        // Use an obscure Unicode character to delimit the words in the concatenated string.\n        // This avoids matches where the values of two columns combined will match the user's query\n        // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n        // that has a very low chance of being typed in by somebody in a text field. This one in\n        // particular is \"White up-pointing triangle with dot\" from\n        // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n        return currentTerm + data[key] + '◬';\n      }, '').toLowerCase(); // Transform the filter by converting it to lowercase and removing whitespace.\n\n      const transformedFilter = filter.trim().toLowerCase();\n      return dataStr.indexOf(transformedFilter) != -1;\n    };\n\n    this._data = new BehaviorSubject(initialData);\n\n    this._updateChangeSubscription();\n  }\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n\n\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if sort and/or paginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange = this._sort ? merge(this._sort.sortChange, this._sort.initialized) : of(null);\n    const pageChange = this._paginator ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized) : of(null);\n    const dataStream = this._data; // Watch for base data or filter changes to provide a filtered set of data.\n\n    const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data))); // Watch for filtered data or sort changes to provide an ordered set of data.\n\n    const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data))); // Watch for ordered data or page changes to provide a paged set of data.\n\n    const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data))); // Watched for paged data changes and send the result to the table to render.\n\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterPredicate function. If no filter is set, returns the data array\n   * as provided.\n   */\n\n\n  _filterData(data) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterPredicate.\n    // May be overridden for customization.\n    this.filteredData = this.filter == null || this.filter === '' ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) {\n      this._updatePaginator(this.filteredData.length);\n    }\n\n    return this.filteredData;\n  }\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n\n\n  _orderData(data) {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) {\n      return data;\n    }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n  /**\n   * Returns a paged slice of the provided data array according to the provided paginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n\n\n  _pageData(data) {\n    if (!this.paginator) {\n      return data;\n    }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n\n\n  _updatePaginator(filteredDataLength) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n\n      if (!paginator) {\n        return;\n      }\n\n      paginator.length = filteredDataLength; // If the page index is set beyond the page, reduce it to the last page.\n\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex; // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n\n\n  connect() {\n    if (!this._renderChangesSubscription) {\n      this._updateChangeSubscription();\n    }\n\n    return this._renderData;\n  }\n  /**\n   * Used by the MatTable. Called when it disconnects from the data source.\n   * @docs-private\n   */\n\n\n  disconnect() {\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = null;\n  }\n\n}\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\n\n\nclass MatTableDataSource extends _MatTableDataSource {}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn, _MatTableDataSource };","map":{"version":3,"names":["i0","Directive","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","NgModule","i1","CdkTable","CDK_TABLE","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","STICKY_POSITIONING_LISTENER","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","CdkHeaderCell","CdkFooterCell","CdkCell","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","CdkHeaderRow","CdkFooterRow","CdkRow","CdkNoDataRow","CdkTextColumn","CdkTableModule","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","_DisposeViewRepeaterStrategy","DataSource","MatCommonModule","BehaviorSubject","Subject","merge","of","combineLatest","_isNumberValue","map","MatRecycleRows","ɵfac","ɵdir","provide","useClass","type","args","selector","providers","MatTable","constructor","arguments","stickyCssClass","needsPositionStickyOnElement","ngOnInit","_isNativeHtmlTable","tbody","_elementRef","nativeElement","querySelector","classList","add","ɵcmp","useExisting","useValue","DataRowOutlet","HeaderRowOutlet","FooterRowOutlet","NoDataRowOutlet","exportAs","template","host","encapsulation","None","changeDetection","Default","styles","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","name","_name","_setNameInput","_updateColumnCssClassName","_columnCssClassName","push","cssClassFriendlyName","inputs","MatHeaderCell","MatFooterCell","MatCell","ROW_TEMPLATE","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","CdkCellOutlet","MatFooterRow","MatRow","MatNoDataRow","_contentClassName","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","ɵmod","ɵinj","imports","exports","declarations","MAX_SAFE_INTEGER","_MatTableDataSource","data","_data","value","Array","isArray","next","_renderChangesSubscription","_filterData","filter","_filter","sort","_sort","_updateChangeSubscription","paginator","_paginator","initialData","_renderData","_internalPageChanges","sortingDataAccessor","sortHeaderId","numberValue","Number","sortData","active","direction","a","b","valueA","valueB","valueAType","valueBType","comparatorResult","filterPredicate","dataStr","Object","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","trim","indexOf","sortChange","initialized","pageChange","page","dataStream","filteredData","pipe","orderedData","_orderData","paginatedData","_pageData","unsubscribe","subscribe","obj","_updatePaginator","length","slice","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","connect","disconnect","MatTableDataSource"],"sources":["C:/Users/Henry/Desktop/New folder/Atomas2/node_modules/@angular/material/fesm2022/table.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/table';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy, DataSource } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { map } from 'rxjs/operators';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass MatRecycleRows {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatRecycleRows, selector: \"mat-table[recycleRows], table[mat-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\nclass MatTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /** Overrides the sticky CSS class set by the `CdkTable`. */\n        this.stickyCssClass = 'mat-mdc-table-sticky';\n        /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n        this.needsPositionStickyOnElement = false;\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        // After ngOnInit, the `CdkTable` has created and inserted the table sections (thead, tbody,\n        // tfoot). MDC requires the `mdc-data-table__content` class to be added to the body. Note that\n        // this only applies to native tables, because we don't wrap the content of flexbox-based ones.\n        if (this._isNativeHtmlTable) {\n            const tbody = this._elementRef.nativeElement.querySelector('tbody');\n            tbody.classList.add('mdc-data-table__content');\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTable, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatTable, selector: \"mat-table, table[mat-table]\", host: { attributes: { \"ngSkipHydration\": \"\" }, properties: { \"class.mdc-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"mat-mdc-table mdc-data-table__table\" }, providers: [\n            { provide: CdkTable, useExisting: MatTable },\n            { provide: CDK_TABLE, useExisting: MatTable },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n            //  is only included in the build if used.\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], exportAs: [\"matTable\"], usesInheritance: true, ngImport: i0, template: `\n    <ng-content select=\"caption\"></ng-content>\n    <ng-content select=\"colgroup, col\"></ng-content>\n    <ng-container headerRowOutlet></ng-container>\n    <ng-container rowOutlet></ng-container>\n    <ng-container noDataRowOutlet></ng-container>\n    <ng-container footerRowOutlet></ng-container>\n  `, isInline: true, styles: [\".mat-mdc-table-sticky{position:sticky !important}.mdc-data-table{-webkit-overflow-scrolling:touch;display:inline-flex;flex-direction:column;box-sizing:border-box;position:relative}.mdc-data-table__table-container{-webkit-overflow-scrolling:touch;overflow-x:auto;width:100%}.mdc-data-table__table{min-width:100%;border:0;white-space:nowrap;border-spacing:0;table-layout:fixed}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell,.mdc-data-table__cell[dir=rtl]{text-align:right}.mdc-data-table__cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__cell--numeric,.mdc-data-table__cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell{box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mdc-data-table__header-cell,.mdc-data-table__header-cell[dir=rtl]{text-align:right}.mdc-data-table__header-cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__header-cell--numeric,.mdc-data-table__header-cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell-wrapper{align-items:center;display:inline-flex;vertical-align:middle}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px 0 16px}.mdc-data-table__header-cell--checkbox,.mdc-data-table__cell--checkbox{padding-left:4px;padding-right:0}[dir=rtl] .mdc-data-table__header-cell--checkbox,[dir=rtl] .mdc-data-table__cell--checkbox,.mdc-data-table__header-cell--checkbox[dir=rtl],.mdc-data-table__cell--checkbox[dir=rtl]{padding-left:0;padding-right:4px}mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{--mat-table-row-item-outline-width:1px;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color)}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, rgba(0, 0, 0, 0.87));font-family:var(--mat-table-header-headline-font, Roboto, sans-serif);line-height:var(--mat-table-header-headline-line-height);font-size:var(--mat-table-header-headline-size, 14px);font-weight:var(--mat-table-header-headline-weight, 500)}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, rgba(0, 0, 0, 0.87))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, Roboto, sans-serif);line-height:var(--mat-table-row-item-label-text-line-height);font-size:var(--mat-table-row-item-label-text-size, 14px);font-weight:var(--mat-table-row-item-label-text-weight)}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, rgba(0, 0, 0, 0.87));font-family:var(--mat-table-footer-supporting-text-font, Roboto, sans-serif);line-height:var(--mat-table-footer-supporting-text-line-height);font-size:var(--mat-table-footer-supporting-text-size, 14px);font-weight:var(--mat-table-footer-supporting-text-weight);letter-spacing:var(--mat-table-footer-supporting-text-tracking)}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, rgba(0, 0, 0, 0.12));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking);font-weight:inherit;line-height:inherit}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, rgba(0, 0, 0, 0.12));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking);line-height:inherit}.mdc-data-table__row:last-child .mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking)}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\"], dependencies: [{ kind: \"directive\", type: i1.DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: i1.HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: i1.FooterRowOutlet, selector: \"[footerRowOutlet]\" }, { kind: \"directive\", type: i1.NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-table, table[mat-table]', exportAs: 'matTable', template: `\n    <ng-content select=\"caption\"></ng-content>\n    <ng-content select=\"colgroup, col\"></ng-content>\n    <ng-container headerRowOutlet></ng-container>\n    <ng-container rowOutlet></ng-container>\n    <ng-container noDataRowOutlet></ng-container>\n    <ng-container footerRowOutlet></ng-container>\n  `, host: {\n                        'class': 'mat-mdc-table mdc-data-table__table',\n                        '[class.mdc-table-fixed-layout]': 'fixedLayout',\n                        'ngSkipHydration': '',\n                    }, providers: [\n                        { provide: CdkTable, useExisting: MatTable },\n                        { provide: CDK_TABLE, useExisting: MatTable },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n                        //  is only included in the build if used.\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, styles: [\".mat-mdc-table-sticky{position:sticky !important}.mdc-data-table{-webkit-overflow-scrolling:touch;display:inline-flex;flex-direction:column;box-sizing:border-box;position:relative}.mdc-data-table__table-container{-webkit-overflow-scrolling:touch;overflow-x:auto;width:100%}.mdc-data-table__table{min-width:100%;border:0;white-space:nowrap;border-spacing:0;table-layout:fixed}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell,.mdc-data-table__cell[dir=rtl]{text-align:right}.mdc-data-table__cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__cell--numeric,.mdc-data-table__cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell{box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mdc-data-table__header-cell,.mdc-data-table__header-cell[dir=rtl]{text-align:right}.mdc-data-table__header-cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__header-cell--numeric,.mdc-data-table__header-cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell-wrapper{align-items:center;display:inline-flex;vertical-align:middle}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px 0 16px}.mdc-data-table__header-cell--checkbox,.mdc-data-table__cell--checkbox{padding-left:4px;padding-right:0}[dir=rtl] .mdc-data-table__header-cell--checkbox,[dir=rtl] .mdc-data-table__cell--checkbox,.mdc-data-table__header-cell--checkbox[dir=rtl],.mdc-data-table__cell--checkbox[dir=rtl]{padding-left:0;padding-right:4px}mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{--mat-table-row-item-outline-width:1px;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color)}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, rgba(0, 0, 0, 0.87));font-family:var(--mat-table-header-headline-font, Roboto, sans-serif);line-height:var(--mat-table-header-headline-line-height);font-size:var(--mat-table-header-headline-size, 14px);font-weight:var(--mat-table-header-headline-weight, 500)}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, rgba(0, 0, 0, 0.87))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, Roboto, sans-serif);line-height:var(--mat-table-row-item-label-text-line-height);font-size:var(--mat-table-row-item-label-text-size, 14px);font-weight:var(--mat-table-row-item-label-text-weight)}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, rgba(0, 0, 0, 0.87));font-family:var(--mat-table-footer-supporting-text-font, Roboto, sans-serif);line-height:var(--mat-table-footer-supporting-text-line-height);font-size:var(--mat-table-footer-supporting-text-size, 14px);font-weight:var(--mat-table-footer-supporting-text-weight);letter-spacing:var(--mat-table-footer-supporting-text-tracking)}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, rgba(0, 0, 0, 0.12));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking);font-weight:inherit;line-height:inherit}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, rgba(0, 0, 0, 0.12));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking);line-height:inherit}.mdc-data-table__row:last-child .mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking)}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\"] }]\n        }] });\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatCellDef, selector: \"[matCellDef]\", providers: [{ provide: CdkCellDef, useExisting: MatCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matCellDef]',\n                    providers: [{ provide: CdkCellDef, useExisting: MatCellDef }],\n                }]\n        }] });\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatHeaderCellDef, selector: \"[matHeaderCellDef]\", providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderCellDef]',\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }],\n                }]\n        }] });\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatFooterCellDef, selector: \"[matFooterCellDef]\", providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterCellDef]',\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }],\n                }]\n        }] });\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        super._updateColumnCssClassName();\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatColumnDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatColumnDef, selector: \"[matColumnDef]\", inputs: { sticky: \"sticky\", name: [\"matColumnDef\", \"name\"] }, providers: [\n            { provide: CdkColumnDef, useExisting: MatColumnDef },\n            { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n        ], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matColumnDef]',\n                    inputs: ['sticky'],\n                    providers: [\n                        { provide: CdkColumnDef, useExisting: MatColumnDef },\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n                    ],\n                }]\n        }], propDecorators: { name: [{\n                type: Input,\n                args: ['matColumnDef']\n            }] } });\n/** Header cell template container that adds the right classes and role. */\nclass MatHeaderCell extends CdkHeaderCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"mat-mdc-header-cell mdc-data-table__header-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-header-cell, th[mat-header-cell]',\n                    host: {\n                        'class': 'mat-mdc-header-cell mdc-data-table__header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }] });\n/** Footer cell template container that adds the right classes and role. */\nclass MatFooterCell extends CdkFooterCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatFooterCell, selector: \"mat-footer-cell, td[mat-footer-cell]\", host: { classAttribute: \"mat-mdc-footer-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\n                    host: {\n                        'class': 'mat-mdc-footer-cell mdc-data-table__cell',\n                    },\n                }]\n        }] });\n/** Cell template container that adds the right classes and role. */\nclass MatCell extends CdkCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatCell, selector: \"mat-cell, td[mat-cell]\", host: { classAttribute: \"mat-mdc-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-cell, td[mat-cell]',\n                    host: {\n                        'class': 'mat-mdc-cell mdc-data-table__cell',\n                    },\n                }]\n        }] });\n\n// We can't reuse `CDK_ROW_TEMPLATE` because it's incompatible with local compilation mode.\nconst ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatHeaderRowDef, selector: \"[matHeaderRowDef]\", inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\"] }, providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderRowDef]',\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                    inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n                }]\n        }] });\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatFooterRowDef, selector: \"[matFooterRowDef]\", inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\"] }, providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterRowDef]',\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                    inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n                }]\n        }] });\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass MatRowDef extends CdkRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatRowDef, selector: \"[matRowDef]\", inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, providers: [{ provide: CdkRowDef, useExisting: MatRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matRowDef]',\n                    providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                    inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n                }]\n        }] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass MatHeaderRow extends CdkHeaderRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatHeaderRow, selector: \"mat-header-row, tr[mat-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-header-row mdc-data-table__header-row\" }, providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }], exportAs: [\"matHeaderRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-header-row, tr[mat-header-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-header-row mdc-data-table__header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matHeaderRow',\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass MatFooterRow extends CdkFooterRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatFooterRow, selector: \"mat-footer-row, tr[mat-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-footer-row mdc-data-table__row\" }, providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }], exportAs: [\"matFooterRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-footer-row, tr[mat-footer-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-footer-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matFooterRow',\n                    providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass MatRow extends CdkRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatRow, selector: \"mat-row, tr[mat-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-row mdc-data-table__row\" }, providers: [{ provide: CdkRow, useExisting: MatRow }], exportAs: [\"matRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-row, tr[mat-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRow',\n                    providers: [{ provide: CdkRow, useExisting: MatRow }],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass MatNoDataRow extends CdkNoDataRow {\n    constructor() {\n        super(...arguments);\n        this._contentClassName = 'mat-mdc-no-data-row';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatNoDataRow, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatNoDataRow, selector: \"ng-template[matNoDataRow]\", providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matNoDataRow]',\n                    providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }],\n                }]\n        }] });\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass MatTextColumn extends CdkTextColumn {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTextColumn, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatTextColumn, selector: \"mat-text-column\", usesInheritance: true, ngImport: i0, template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: MatHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { kind: \"directive\", type: MatColumnDef, selector: \"[matColumnDef]\", inputs: [\"sticky\", \"matColumnDef\"] }, { kind: \"directive\", type: MatCellDef, selector: \"[matCellDef]\" }, { kind: \"directive\", type: MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { kind: \"directive\", type: MatCell, selector: \"mat-cell, td[mat-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-text-column',\n                    template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                }]\n        }] });\n\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    MatRecycleRows,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatNoDataRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTableModule, declarations: [\n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn], imports: [MatCommonModule, CdkTableModule], exports: [MatCommonModule, \n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CdkTableModule],\n                    exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                    declarations: EXPORTED_DECLARATIONS,\n                }]\n        }] });\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/** Shared base class with MDC-based implementation. */\nclass _MatTableDataSource extends DataSource {\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    get data() {\n        return this._data.value;\n    }\n    set data(data) {\n        data = Array.isArray(data) ? data : [];\n        this._data.next(data);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(data);\n        }\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    get filter() {\n        return this._filter.value;\n    }\n    set filter(filter) {\n        this._filter.next(filter);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(this.data);\n        }\n    }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    get sort() {\n        return this._sort;\n    }\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the paginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the paginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    get paginator() {\n        return this._paginator;\n    }\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    constructor(initialData = []) {\n        super();\n        /** Stream emitting render data to the table (depends on ordered data changes). */\n        this._renderData = new BehaviorSubject([]);\n        /** Stream that emits when a new filter string is set on the data source. */\n        this._filter = new BehaviorSubject('');\n        /** Used to react to internal changes of the paginator that are made by the data source itself. */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = null;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (data, sortHeaderId) => {\n            const value = data[sortHeaderId];\n            if (_isNumberValue(value)) {\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        };\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (data, sort) => {\n            const active = sort.active;\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((a, b) => {\n                let valueA = this.sortingDataAccessor(a, active);\n                let valueB = this.sortingDataAccessor(b, active);\n                // If there are data in the column that can be converted to a number,\n                // it must be ensured that the rest of the data\n                // is of the same type so as not to order incorrectly.\n                const valueAType = typeof valueA;\n                const valueBType = typeof valueB;\n                if (valueAType !== valueBType) {\n                    if (valueAType === 'number') {\n                        valueA += '';\n                    }\n                    if (valueBType === 'number') {\n                        valueB += '';\n                    }\n                }\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come last.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            });\n        };\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @returns Whether the filter matches against the data\n         */\n        this.filterPredicate = (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            const dataStr = Object.keys(data)\n                .reduce((currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + data[key] + '◬';\n            }, '')\n                .toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        };\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if sort and/or paginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        const sortChange = this._sort\n            ? merge(this._sort.sortChange, this._sort.initialized)\n            : of(null);\n        const pageChange = this._paginator\n            ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized)\n            : of(null);\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data)));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterPredicate function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterPredicate.\n        // May be overridden for customization.\n        this.filteredData =\n            this.filter == null || this.filter === ''\n                ? data\n                : data.filter(obj => this.filterPredicate(obj, this.filter));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided paginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect() {\n        if (!this._renderChangesSubscription) {\n            this._updateChangeSubscription();\n        }\n        return this._renderData;\n    }\n    /**\n     * Used by the MatTable. Called when it disconnects from the data source.\n     * @docs-private\n     */\n    disconnect() {\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = null;\n    }\n}\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends _MatTableDataSource {\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn, _MatTableDataSource };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}