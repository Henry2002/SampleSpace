{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { inject, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nlet nextId = 0; // Boilerplate for applying mixins to MatBadge.\n\n/** @docs-private */\n\nconst _MatBadgeBase = mixinDisabled(class {});\n\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\n\nclass MatBadge extends _MatBadgeBase {\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  get color() {\n    return this._color;\n  }\n\n  set color(value) {\n    this._setColor(value);\n\n    this._color = value;\n  }\n  /** Whether the badge should overlap its contents or not */\n\n\n  get overlap() {\n    return this._overlap;\n  }\n\n  set overlap(val) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  /** The content for the badge */\n\n\n  get content() {\n    return this._content;\n  }\n\n  set content(newContent) {\n    this._updateRenderedContent(newContent);\n  }\n  /** Message used to describe the decorated element via aria-describedby */\n\n\n  get description() {\n    return this._description;\n  }\n\n  set description(newDescription) {\n    this._updateDescription(newDescription);\n  }\n  /** Whether the badge is hidden. */\n\n\n  get hidden() {\n    return this._hidden;\n  }\n\n  set hidden(val) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n\n  constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n    super();\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._ariaDescriber = _ariaDescriber;\n    this._renderer = _renderer;\n    this._animationMode = _animationMode;\n    this._color = 'primary';\n    this._overlap = true;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n\n    this.position = 'above after';\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n\n    this.size = 'medium';\n    /** Unique id for the badge */\n\n    this._id = nextId++;\n    /** Whether the OnInit lifecycle hook has run yet */\n\n    this._isInitialized = false;\n    /** InteractivityChecker to determine if the badge host is focusable. */\n\n    this._interactivityChecker = inject(InteractivityChecker);\n    this._document = inject(DOCUMENT);\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const nativeElement = _elementRef.nativeElement;\n\n      if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n        throw Error('matBadge must be attached to an element node.');\n      }\n\n      const matIconTagName = 'mat-icon'; // Heads-up for developers to avoid putting matBadge on <mat-icon>\n      // as it is aria-hidden by default docs mention this at:\n      // https://material.angular.io/components/badge/overview#accessibility\n\n      if (nativeElement.tagName.toLowerCase() === matIconTagName && nativeElement.getAttribute('aria-hidden') === 'true') {\n        console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` + `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` + `\\n${nativeElement.outerHTML}`);\n      }\n    }\n  }\n  /** Whether the badge is above the host or not */\n\n\n  isAbove() {\n    return this.position.indexOf('below') === -1;\n  }\n  /** Whether the badge is after the host or not */\n\n\n  isAfter() {\n    return this.position.indexOf('before') === -1;\n  }\n  /**\n   * Gets the element into which the badge's content is being rendered. Undefined if the element\n   * hasn't been created (e.g. if the badge doesn't have content).\n   */\n\n\n  getBadgeElement() {\n    return this._badgeElement;\n  }\n\n  ngOnInit() {\n    // We may have server-side rendered badge that we need to clear.\n    // We need to do this in ngOnInit because the full content of the component\n    // on which the badge is attached won't necessarily be in the DOM until this point.\n    this._clearExistingBadges();\n\n    if (this.content && !this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n\n      this._updateRenderedContent(this.content);\n    }\n\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n    // We have to destroy it ourselves, otherwise it'll be retained in memory.\n    if (this._renderer.destroyNode) {\n      this._renderer.destroyNode(this._badgeElement);\n\n      this._inlineBadgeDescription?.remove();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n  }\n  /** Gets whether the badge's host element is interactive. */\n\n\n  _isHostInteractive() {\n    // Ignore visibility since it requires an expensive style caluclation.\n    return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n      ignoreVisibility: true\n    });\n  }\n  /** Creates the badge element */\n\n\n  _createBadgeElement() {\n    const badgeElement = this._renderer.createElement('span');\n\n    const activeClass = 'mat-badge-active';\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`); // The badge is aria-hidden because we don't want it to appear in the page's navigation\n    // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n\n    badgeElement.setAttribute('aria-hidden', 'true');\n    badgeElement.classList.add(BADGE_CONTENT_CLASS);\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement); // animate in after insertion\n\n\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n  /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n\n\n  _updateRenderedContent(newContent) {\n    const newContentNormalized = `${newContent ?? ''}`.trim(); // Don't create the badge element if the directive isn't initialized because we want to\n    // append the badge element to the *end* of the host element's content for backwards\n    // compatibility.\n\n    if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    }\n\n    if (this._badgeElement) {\n      this._badgeElement.textContent = newContentNormalized;\n    }\n\n    this._content = newContentNormalized;\n  }\n  /** Updates the host element's aria description via AriaDescriber. */\n\n\n  _updateDescription(newDescription) {\n    // Always start by removing the aria-describedby; we will add a new one if necessary.\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description); // NOTE: We only check whether the host is interactive here, which happens during\n    // when then badge content changes. It is possible that the host changes\n    // interactivity status separate from one of these. However, watching the interactivity\n    // status of the host would require a `MutationObserver`, which is likely more code + overhead\n    // than it's worth; from usages inside Google, we see that the vats majority of badges either\n    // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n\n\n    if (!newDescription || this._isHostInteractive()) {\n      this._removeInlineDescription();\n    }\n\n    this._description = newDescription; // We don't add `aria-describedby` for non-interactive hosts elements because we\n    // instead insert the description inline.\n\n    if (this._isHostInteractive()) {\n      this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n    } else {\n      this._updateInlineDescription();\n    }\n  }\n\n  _updateInlineDescription() {\n    // Create the inline description element if it doesn't exist\n    if (!this._inlineBadgeDescription) {\n      this._inlineBadgeDescription = this._document.createElement('span');\n\n      this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n    }\n\n    this._inlineBadgeDescription.textContent = this.description;\n    this._badgeElement?.appendChild(this._inlineBadgeDescription);\n  }\n\n  _removeInlineDescription() {\n    this._inlineBadgeDescription?.remove();\n    this._inlineBadgeDescription = undefined;\n  }\n  /** Adds css theme class given the color to the component host */\n\n\n  _setColor(colorPalette) {\n    const classList = this._elementRef.nativeElement.classList;\n    classList.remove(`mat-badge-${this._color}`);\n\n    if (colorPalette) {\n      classList.add(`mat-badge-${colorPalette}`);\n    }\n  }\n  /** Clears any existing badges that might be left over from server-side rendering. */\n\n\n  _clearExistingBadges() {\n    // Only check direct children of this host element in order to avoid deleting\n    // any badges that might exist in descendant elements.\n    const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n\n    for (const badgeElement of Array.from(badges)) {\n      if (badgeElement !== this._badgeElement) {\n        badgeElement.remove();\n      }\n    }\n  }\n\n}\n\nMatBadge.Éµfac = function MatBadge_Factory(t) {\n  return new (t || MatBadge)(i0.ÉµÉµdirectiveInject(i0.NgZone), i0.ÉµÉµdirectiveInject(i0.ElementRef), i0.ÉµÉµdirectiveInject(i1.AriaDescriber), i0.ÉµÉµdirectiveInject(i0.Renderer2), i0.ÉµÉµdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatBadge.Éµdir = /* @__PURE__ */i0.ÉµÉµdefineDirective({\n  type: MatBadge,\n  selectors: [[\"\", \"matBadge\", \"\"]],\n  hostAttrs: [1, \"mat-badge\"],\n  hostVars: 20,\n  hostBindings: function MatBadge_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ÉµÉµclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx.content)(\"mat-badge-disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    disabled: [\"matBadgeDisabled\", \"disabled\"],\n    color: [\"matBadgeColor\", \"color\"],\n    overlap: [\"matBadgeOverlap\", \"overlap\"],\n    position: [\"matBadgePosition\", \"position\"],\n    content: [\"matBadge\", \"content\"],\n    description: [\"matBadgeDescription\", \"description\"],\n    size: [\"matBadgeSize\", \"size\"],\n    hidden: [\"matBadgeHidden\", \"hidden\"]\n  },\n  features: [i0.ÉµÉµInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(MatBadge, [{\n    type: Directive,\n    args: [{\n      selector: '[matBadge]',\n      inputs: ['disabled: matBadgeDisabled'],\n      host: {\n        'class': 'mat-badge',\n        '[class.mat-badge-overlap]': 'overlap',\n        '[class.mat-badge-above]': 'isAbove()',\n        '[class.mat-badge-below]': '!isAbove()',\n        '[class.mat-badge-before]': '!isAfter()',\n        '[class.mat-badge-after]': 'isAfter()',\n        '[class.mat-badge-small]': 'size === \"small\"',\n        '[class.mat-badge-medium]': 'size === \"medium\"',\n        '[class.mat-badge-large]': 'size === \"large\"',\n        '[class.mat-badge-hidden]': 'hidden || !content',\n        '[class.mat-badge-disabled]': 'disabled'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.AriaDescriber\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    color: [{\n      type: Input,\n      args: ['matBadgeColor']\n    }],\n    overlap: [{\n      type: Input,\n      args: ['matBadgeOverlap']\n    }],\n    position: [{\n      type: Input,\n      args: ['matBadgePosition']\n    }],\n    content: [{\n      type: Input,\n      args: ['matBadge']\n    }],\n    description: [{\n      type: Input,\n      args: ['matBadgeDescription']\n    }],\n    size: [{\n      type: Input,\n      args: ['matBadgeSize']\n    }],\n    hidden: [{\n      type: Input,\n      args: ['matBadgeHidden']\n    }]\n  });\n})();\n\nclass MatBadgeModule {}\n\nMatBadgeModule.Éµfac = function MatBadgeModule_Factory(t) {\n  return new (t || MatBadgeModule)();\n};\n\nMatBadgeModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: MatBadgeModule\n});\nMatBadgeModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n  imports: [A11yModule, MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(MatBadgeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, MatCommonModule],\n      exports: [MatBadge, MatCommonModule],\n      declarations: [MatBadge]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatBadge, MatBadgeModule };","map":{"version":3,"names":["i0","inject","Directive","Optional","Inject","Input","NgModule","mixinDisabled","MatCommonModule","i1","InteractivityChecker","A11yModule","coerceBooleanProperty","DOCUMENT","ANIMATION_MODULE_TYPE","nextId","_MatBadgeBase","BADGE_CONTENT_CLASS","MatBadge","color","_color","value","_setColor","overlap","_overlap","val","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","hidden","_hidden","constructor","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","position","size","_id","_isInitialized","_interactivityChecker","_document","ngDevMode","nativeElement","nodeType","ELEMENT_NODE","Error","matIconTagName","tagName","toLowerCase","getAttribute","console","warn","outerHTML","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","Éµfac","NgZone","ElementRef","AriaDescriber","Renderer2","Éµdir","type","args","selector","inputs","host","decorators","MatBadgeModule","Éµmod","Éµinj","imports","exports","declarations"],"sources":["C:/Users/Henry/Desktop/New folder/Atomas2/node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { inject, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {\n});\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() {\n        return this._overlap;\n    }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    /** Whether the badge is hidden. */\n    get hidden() {\n        return this._hidden;\n    }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ÉµÉµFactoryTarget.Directive }); }\n    static { this.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatBadge, selector: \"[matBadge]\", inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\"] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    inputs: ['disabled: matBadgeDisabled'],\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; }, propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: ['matBadgeOverlap']\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: ['matBadgeHidden']\n            }] } });\n\nclass MatBadgeModule {\n    static { this.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule }); }\n    static { this.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] }); }\n    static { this.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}