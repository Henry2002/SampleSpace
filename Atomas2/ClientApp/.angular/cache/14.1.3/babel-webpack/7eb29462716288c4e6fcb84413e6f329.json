{"ast":null,"code":"import * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i7 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport * as i6 from '@angular/material/core';\nimport { mixinDisabled, mixinInitialized } from '@angular/material/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i4 from '@angular/material/form-field';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n\nfunction MatPaginator_div_2_mat_form_field_3_mat_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const pageSizeOption_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", pageSizeOption_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", pageSizeOption_r6, \" \");\n  }\n}\n\nfunction MatPaginator_div_2_mat_form_field_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-form-field\", 16)(1, \"mat-select\", 17);\n    i0.ɵɵlistener(\"selectionChange\", function MatPaginator_div_2_mat_form_field_3_Template_mat_select_selectionChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7._changePageSize($event.value));\n    });\n    i0.ɵɵtemplate(2, MatPaginator_div_2_mat_form_field_3_mat_option_2_Template, 2, 2, \"mat-option\", 18);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r3._formFieldAppearance)(\"color\", ctx_r3.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", ctx_r3.pageSize)(\"disabled\", ctx_r3.disabled)(\"aria-labelledby\", ctx_r3._pageSizeLabelId)(\"panelClass\", ctx_r3.selectConfig.panelClass || \"\")(\"disableOptionCentering\", ctx_r3.selectConfig.disableOptionCentering);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3._displayedPageSizeOptions);\n  }\n}\n\nfunction MatPaginator_div_2_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.pageSize);\n  }\n}\n\nfunction MatPaginator_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"div\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, MatPaginator_div_2_mat_form_field_3_Template, 3, 8, \"mat-form-field\", 14);\n    i0.ɵɵtemplate(4, MatPaginator_div_2_div_4_Template, 2, 1, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r0._pageSizeLabelId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0._intl.itemsPerPageLabel, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._displayedPageSizeOptions.length > 1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._displayedPageSizeOptions.length <= 1);\n  }\n}\n\nfunction MatPaginator_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function MatPaginator_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.firstPage());\n    });\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 7);\n    i0.ɵɵelement(2, \"path\", 22);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matTooltip\", ctx_r1._intl.firstPageLabel)(\"matTooltipDisabled\", ctx_r1._previousButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx_r1._previousButtonsDisabled());\n    i0.ɵɵattribute(\"aria-label\", ctx_r1._intl.firstPageLabel);\n  }\n}\n\nfunction MatPaginator_button_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function MatPaginator_button_13_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.lastPage());\n    });\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 7);\n    i0.ɵɵelement(2, \"path\", 24);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matTooltip\", ctx_r2._intl.lastPageLabel)(\"matTooltipDisabled\", ctx_r2._nextButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx_r2._nextButtonsDisabled());\n    i0.ɵɵattribute(\"aria-label\", ctx_r2._intl.lastPageLabel);\n  }\n}\n\nclass MatPaginatorIntl {\n  constructor() {\n    /**\n     * Stream to emit from when labels are changed. Use this to notify components when the labels have\n     * changed after initialization.\n     */\n    this.changes = new Subject();\n    /** A label for the page size selector. */\n\n    this.itemsPerPageLabel = 'Items per page:';\n    /** A label for the button that increments the current page. */\n\n    this.nextPageLabel = 'Next page';\n    /** A label for the button that decrements the current page. */\n\n    this.previousPageLabel = 'Previous page';\n    /** A label for the button that moves to the first page. */\n\n    this.firstPageLabel = 'First page';\n    /** A label for the button that moves to the last page. */\n\n    this.lastPageLabel = 'Last page';\n    /** A label for the range of items within the current page and the length of the whole list. */\n\n    this.getRangeLabel = (page, pageSize, length) => {\n      if (length == 0 || pageSize == 0) {\n        return `0 of ${length}`;\n      }\n\n      length = Math.max(length, 0);\n      const startIndex = page * pageSize; // If the start index exceeds the list length, do not try and fix the end index to the end.\n\n      const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n      return `${startIndex + 1} – ${endIndex} of ${length}`;\n    };\n  }\n\n}\n\nMatPaginatorIntl.ɵfac = function MatPaginatorIntl_Factory(t) {\n  return new (t || MatPaginatorIntl)();\n};\n\nMatPaginatorIntl.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MatPaginatorIntl,\n  factory: MatPaginatorIntl.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPaginatorIntl, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/** @docs-private */\n\n\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\n\n\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The default page size if there is no page size and there are no provided page size options. */\n\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\n\nclass PageEvent {}\n/** Injection token that can be used to provide the default options for the paginator module. */\n\n\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS'); // Boilerplate for applying mixins to _MatPaginatorBase.\n\n/** @docs-private */\n\nconst _MatPaginatorMixinBase = mixinDisabled(mixinInitialized(class {}));\n/**\n * Base class with all of the `MatPaginator` functionality.\n * @docs-private\n */\n\n\nclass _MatPaginatorBase extends _MatPaginatorMixinBase {\n  constructor(_intl, _changeDetectorRef, defaults) {\n    super();\n    this._intl = _intl;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._pageIndex = 0;\n    this._length = 0;\n    this._pageSizeOptions = [];\n    this._hidePageSize = false;\n    this._showFirstLastButtons = false;\n    /** Used to configure the underlying `MatSelect` inside the paginator. */\n\n    this.selectConfig = {};\n    /** Event emitted when the paginator changes the page size or page index. */\n\n    this.page = new EventEmitter();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n\n    if (defaults) {\n      const {\n        pageSize,\n        pageSizeOptions,\n        hidePageSize,\n        showFirstLastButtons\n      } = defaults;\n\n      if (pageSize != null) {\n        this._pageSize = pageSize;\n      }\n\n      if (pageSizeOptions != null) {\n        this._pageSizeOptions = pageSizeOptions;\n      }\n\n      if (hidePageSize != null) {\n        this._hidePageSize = hidePageSize;\n      }\n\n      if (showFirstLastButtons != null) {\n        this._showFirstLastButtons = showFirstLastButtons;\n      }\n    }\n  }\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n\n\n  get pageIndex() {\n    return this._pageIndex;\n  }\n\n  set pageIndex(value) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n\n\n  get length() {\n    return this._length;\n  }\n\n  set length(value) {\n    this._length = coerceNumberProperty(value);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Number of items to display on a page. By default set to 50. */\n\n\n  get pageSize() {\n    return this._pageSize;\n  }\n\n  set pageSize(value) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n\n    this._updateDisplayedPageSizeOptions();\n  }\n  /** The set of provided page size options to display to the user. */\n\n\n  get pageSizeOptions() {\n    return this._pageSizeOptions;\n  }\n\n  set pageSizeOptions(value) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n\n    this._updateDisplayedPageSizeOptions();\n  }\n  /** Whether to hide the page size selection UI from the user. */\n\n\n  get hidePageSize() {\n    return this._hidePageSize;\n  }\n\n  set hidePageSize(value) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  /** Whether to show the first/last buttons UI to the user. */\n\n\n  get showFirstLastButtons() {\n    return this._showFirstLastButtons;\n  }\n\n  set showFirstLastButtons(value) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n\n    this._updateDisplayedPageSizeOptions();\n\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n  /** Advances to the next page if it exists. */\n\n\n  nextPage() {\n    if (!this.hasNextPage()) {\n      return;\n    }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.pageIndex + 1;\n\n    this._emitPageEvent(previousPageIndex);\n  }\n  /** Move back to the previous page if it exists. */\n\n\n  previousPage() {\n    if (!this.hasPreviousPage()) {\n      return;\n    }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.pageIndex - 1;\n\n    this._emitPageEvent(previousPageIndex);\n  }\n  /** Move to the first page if not already there. */\n\n\n  firstPage() {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) {\n      return;\n    }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n\n    this._emitPageEvent(previousPageIndex);\n  }\n  /** Move to the last page if not already there. */\n\n\n  lastPage() {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) {\n      return;\n    }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n\n    this._emitPageEvent(previousPageIndex);\n  }\n  /** Whether there is a previous page. */\n\n\n  hasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n  /** Whether there is a next page. */\n\n\n  hasNextPage() {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n  /** Calculate the number of pages */\n\n\n  getNumberOfPages() {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n\n\n  _changePageSize(pageSize) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n\n    this._emitPageEvent(previousPageIndex);\n  }\n  /** Checks whether the buttons for going forwards should be disabled. */\n\n\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n  /** Checks whether the buttons for going backwards should be disabled. */\n\n\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n\n\n  _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) {\n      return;\n    } // If no page size is provided, use the first page size option or the default page size.\n\n\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    } // Sort the numbers using a number-specific sort function.\n\n\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n\n\n  _emitPageEvent(previousPageIndex) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n\n}\n\n_MatPaginatorBase.ɵfac = function _MatPaginatorBase_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n\n_MatPaginatorBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatPaginatorBase,\n  inputs: {\n    color: \"color\",\n    pageIndex: \"pageIndex\",\n    length: \"length\",\n    pageSize: \"pageSize\",\n    pageSizeOptions: \"pageSizeOptions\",\n    hidePageSize: \"hidePageSize\",\n    showFirstLastButtons: \"showFirstLastButtons\",\n    selectConfig: \"selectConfig\"\n  },\n  outputs: {\n    page: \"page\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatPaginatorBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: MatPaginatorIntl\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined\n    }];\n  }, {\n    color: [{\n      type: Input\n    }],\n    pageIndex: [{\n      type: Input\n    }],\n    length: [{\n      type: Input\n    }],\n    pageSize: [{\n      type: Input\n    }],\n    pageSizeOptions: [{\n      type: Input\n    }],\n    hidePageSize: [{\n      type: Input\n    }],\n    showFirstLastButtons: [{\n      type: Input\n    }],\n    selectConfig: [{\n      type: Input\n    }],\n    page: [{\n      type: Output\n    }]\n  });\n})();\n\nlet nextUniqueId = 0;\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n\nclass MatPaginator extends _MatPaginatorBase {\n  constructor(intl, changeDetectorRef, defaults) {\n    super(intl, changeDetectorRef, defaults);\n    /** ID for the DOM node containing the paginator's items per page label. */\n\n    this._pageSizeLabelId = `mat-paginator-page-size-label-${nextUniqueId++}`;\n    this._formFieldAppearance = (defaults === null || defaults === void 0 ? void 0 : defaults.formFieldAppearance) || 'outline';\n  }\n\n}\n\nMatPaginator.ɵfac = function MatPaginator_Factory(t) {\n  return new (t || MatPaginator)(i0.ɵɵdirectiveInject(MatPaginatorIntl), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_PAGINATOR_DEFAULT_OPTIONS, 8));\n};\n\nMatPaginator.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatPaginator,\n  selectors: [[\"mat-paginator\"]],\n  hostAttrs: [\"role\", \"group\", 1, \"mat-mdc-paginator\"],\n  inputs: {\n    disabled: \"disabled\"\n  },\n  exportAs: [\"matPaginator\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 14,\n  vars: 14,\n  consts: [[1, \"mat-mdc-paginator-outer-container\"], [1, \"mat-mdc-paginator-container\"], [\"class\", \"mat-mdc-paginator-page-size\", 4, \"ngIf\"], [1, \"mat-mdc-paginator-range-actions\"], [\"aria-live\", \"polite\", 1, \"mat-mdc-paginator-range-label\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"class\", \"mat-mdc-paginator-navigation-first\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-mdc-paginator-navigation-previous\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"viewBox\", \"0 0 24 24\", \"focusable\", \"false\", 1, \"mat-mdc-paginator-icon\"], [\"d\", \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-mdc-paginator-navigation-next\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"class\", \"mat-mdc-paginator-navigation-last\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\", 4, \"ngIf\"], [1, \"mat-mdc-paginator-page-size\"], [1, \"mat-mdc-paginator-page-size-label\", 3, \"id\"], [\"class\", \"mat-mdc-paginator-page-size-select\", 3, \"appearance\", \"color\", 4, \"ngIf\"], [\"class\", \"mat-mdc-paginator-page-size-value\", 4, \"ngIf\"], [1, \"mat-mdc-paginator-page-size-select\", 3, \"appearance\", \"color\"], [3, \"value\", \"disabled\", \"aria-labelledby\", \"panelClass\", \"disableOptionCentering\", \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"mat-mdc-paginator-page-size-value\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-mdc-paginator-navigation-first\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-mdc-paginator-navigation-last\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"]],\n  template: function MatPaginator_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵtemplate(2, MatPaginator_div_2_Template, 5, 4, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3)(4, \"div\", 4);\n      i0.ɵɵtext(5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, MatPaginator_button_6_Template, 3, 5, \"button\", 5);\n      i0.ɵɵelementStart(7, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function MatPaginator_Template_button_click_7_listener() {\n        return ctx.previousPage();\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(8, \"svg\", 7);\n      i0.ɵɵelement(9, \"path\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelementStart(10, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function MatPaginator_Template_button_click_10_listener() {\n        return ctx.nextPage();\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(11, \"svg\", 7);\n      i0.ɵɵelement(12, \"path\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(13, MatPaginator_button_13_Template, 3, 5, \"button\", 11);\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !ctx.hidePageSize);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\" \", ctx._intl.getRangeLabel(ctx.pageIndex, ctx.pageSize, ctx.length), \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showFirstLastButtons);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matTooltip\", ctx._intl.previousPageLabel)(\"matTooltipDisabled\", ctx._previousButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx._previousButtonsDisabled());\n      i0.ɵɵattribute(\"aria-label\", ctx._intl.previousPageLabel);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"matTooltip\", ctx._intl.nextPageLabel)(\"matTooltipDisabled\", ctx._nextButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx._nextButtonsDisabled());\n      i0.ɵɵattribute(\"aria-label\", ctx._intl.nextPageLabel);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.showFirstLastButtons);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.MatIconButton, i4.MatFormField, i5.MatSelect, i6.MatOption, i7.MatTooltip],\n  styles: [\".mat-mdc-paginator{display:block}.mat-mdc-paginator .mat-mdc-form-field-subscript-wrapper{display:none}.mat-mdc-paginator .mat-mdc-select{line-height:1.5}.mat-mdc-paginator-outer-container{display:flex}.mat-mdc-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-mdc-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-mdc-paginator-page-size{margin-right:0;margin-left:8px}.mat-mdc-paginator-page-size-label{margin:0 4px}.mat-mdc-paginator-page-size-select{margin:0 4px;width:84px}.mat-mdc-paginator-range-label{margin:0 32px 0 24px}.mat-mdc-paginator-range-actions{display:flex;align-items:center}.mat-mdc-paginator-icon{display:inline-block;width:28px}[dir=rtl] .mat-mdc-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon,.cdk-high-contrast-active .mat-mdc-paginator-icon{fill:currentColor;fill:CanvasText}.cdk-high-contrast-active .mat-mdc-paginator-range-actions .mat-mdc-icon-button{outline:solid 1px}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPaginator, [{\n    type: Component,\n    args: [{\n      selector: 'mat-paginator',\n      exportAs: 'matPaginator',\n      inputs: ['disabled'],\n      host: {\n        'class': 'mat-mdc-paginator',\n        'role': 'group'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<div class=\\\"mat-mdc-paginator-outer-container\\\">\\n  <div class=\\\"mat-mdc-paginator-container\\\">\\n    <div class=\\\"mat-mdc-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-mdc-paginator-page-size-label\\\" id=\\\"{{_pageSizeLabelId}}\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-mdc-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-labelledby]=\\\"_pageSizeLabelId\\\"\\n          [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n          [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-mdc-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-mdc-paginator-range-actions\\\">\\n      <div class=\\\"mat-mdc-paginator-range-label\\\" aria-live=\\\"polite\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\",\n      styles: [\".mat-mdc-paginator{display:block}.mat-mdc-paginator .mat-mdc-form-field-subscript-wrapper{display:none}.mat-mdc-paginator .mat-mdc-select{line-height:1.5}.mat-mdc-paginator-outer-container{display:flex}.mat-mdc-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-mdc-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-mdc-paginator-page-size{margin-right:0;margin-left:8px}.mat-mdc-paginator-page-size-label{margin:0 4px}.mat-mdc-paginator-page-size-select{margin:0 4px;width:84px}.mat-mdc-paginator-range-label{margin:0 32px 0 24px}.mat-mdc-paginator-range-actions{display:flex;align-items:center}.mat-mdc-paginator-icon{display:inline-block;width:28px}[dir=rtl] .mat-mdc-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon,.cdk-high-contrast-active .mat-mdc-paginator-icon{fill:currentColor;fill:CanvasText}.cdk-high-contrast-active .mat-mdc-paginator-range-actions .mat-mdc-icon-button{outline:solid 1px}\"]\n    }]\n  }], function () {\n    return [{\n      type: MatPaginatorIntl\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatPaginatorModule {}\n\nMatPaginatorModule.ɵfac = function MatPaginatorModule_Factory(t) {\n  return new (t || MatPaginatorModule)();\n};\n\nMatPaginatorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatPaginatorModule\n});\nMatPaginatorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n  imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPaginatorModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule],\n      exports: [MatPaginator],\n      declarations: [MatPaginator],\n      providers: [MAT_PAGINATOR_INTL_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent, _MatPaginatorBase };","map":{"version":3,"names":["i2","CommonModule","i0","Injectable","Optional","SkipSelf","InjectionToken","EventEmitter","Directive","Input","Output","Component","ChangeDetectionStrategy","ViewEncapsulation","Inject","NgModule","Subject","i3","MatButtonModule","i5","MatSelectModule","i7","MatTooltipModule","i6","mixinDisabled","mixinInitialized","coerceNumberProperty","coerceBooleanProperty","i4","MatPaginatorIntl","constructor","changes","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","page","pageSize","length","Math","max","startIndex","endIndex","min","ɵfac","ɵprov","type","args","providedIn","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","parentIntl","MAT_PAGINATOR_INTL_PROVIDER","provide","deps","useFactory","DEFAULT_PAGE_SIZE","PageEvent","MAT_PAGINATOR_DEFAULT_OPTIONS","_MatPaginatorMixinBase","_MatPaginatorBase","_intl","_changeDetectorRef","defaults","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","selectConfig","_intlChanges","subscribe","markForCheck","pageSizeOptions","hidePageSize","showFirstLastButtons","_pageSize","pageIndex","value","_updateDisplayedPageSizeOptions","map","p","ngOnInit","_initialized","_markInitialized","ngOnDestroy","unsubscribe","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","ceil","_changePageSize","floor","_nextButtonsDisabled","disabled","_previousButtonsDisabled","_displayedPageSizeOptions","slice","indexOf","push","sort","a","b","emit","ɵdir","ChangeDetectorRef","undefined","color","nextUniqueId","MatPaginator","intl","changeDetectorRef","_pageSizeLabelId","_formFieldAppearance","formFieldAppearance","ɵcmp","NgForOf","NgIf","MatIconButton","MatFormField","MatSelect","MatOption","MatTooltip","selector","exportAs","inputs","host","changeDetection","OnPush","encapsulation","None","template","styles","decorators","MatPaginatorModule","ɵmod","ɵinj","imports","exports","declarations","providers"],"sources":["C:/Users/Henry/Desktop/New folder/Atomas2/node_modules/@angular/material/fesm2015/paginator.mjs"],"sourcesContent":["import * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i7 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport * as i6 from '@angular/material/core';\nimport { mixinDisabled, mixinInitialized } from '@angular/material/core';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i4 from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n    constructor() {\n        /**\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\n         * changed after initialization.\n         */\n        this.changes = new Subject();\n        /** A label for the page size selector. */\n        this.itemsPerPageLabel = 'Items per page:';\n        /** A label for the button that increments the current page. */\n        this.nextPageLabel = 'Next page';\n        /** A label for the button that decrements the current page. */\n        this.previousPageLabel = 'Previous page';\n        /** A label for the button that moves to the first page. */\n        this.firstPageLabel = 'First page';\n        /** A label for the button that moves to the last page. */\n        this.lastPageLabel = 'Last page';\n        /** A label for the range of items within the current page and the length of the whole list. */\n        this.getRangeLabel = (page, pageSize, length) => {\n            if (length == 0 || pageSize == 0) {\n                return `0 of ${length}`;\n            }\n            length = Math.max(length, 0);\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\n        };\n    }\n}\nMatPaginatorIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatPaginatorIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMatPaginatorIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatPaginatorIntl, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatPaginatorIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** @docs-private */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n/** Injection token that can be used to provide the default options for the paginator module. */\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to _MatPaginatorBase.\n/** @docs-private */\nconst _MatPaginatorMixinBase = mixinDisabled(mixinInitialized(class {\n}));\n/**\n * Base class with all of the `MatPaginator` functionality.\n * @docs-private\n */\nclass _MatPaginatorBase extends _MatPaginatorMixinBase {\n    constructor(_intl, _changeDetectorRef, defaults) {\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._pageIndex = 0;\n        this._length = 0;\n        this._pageSizeOptions = [];\n        this._hidePageSize = false;\n        this._showFirstLastButtons = false;\n        /** Used to configure the underlying `MatSelect` inside the paginator. */\n        this.selectConfig = {};\n        /** Event emitted when the paginator changes the page size or page index. */\n        this.page = new EventEmitter();\n        this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n        if (defaults) {\n            const { pageSize, pageSizeOptions, hidePageSize, showFirstLastButtons } = defaults;\n            if (pageSize != null) {\n                this._pageSize = pageSize;\n            }\n            if (pageSizeOptions != null) {\n                this._pageSizeOptions = pageSizeOptions;\n            }\n            if (hidePageSize != null) {\n                this._hidePageSize = hidePageSize;\n            }\n            if (showFirstLastButtons != null) {\n                this._showFirstLastButtons = showFirstLastButtons;\n            }\n        }\n    }\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    get pageIndex() {\n        return this._pageIndex;\n    }\n    set pageIndex(value) {\n        this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    get length() {\n        return this._length;\n    }\n    set length(value) {\n        this._length = coerceNumberProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Number of items to display on a page. By default set to 50. */\n    get pageSize() {\n        return this._pageSize;\n    }\n    set pageSize(value) {\n        this._pageSize = Math.max(coerceNumberProperty(value), 0);\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** The set of provided page size options to display to the user. */\n    get pageSizeOptions() {\n        return this._pageSizeOptions;\n    }\n    set pageSizeOptions(value) {\n        this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** Whether to hide the page size selection UI from the user. */\n    get hidePageSize() {\n        return this._hidePageSize;\n    }\n    set hidePageSize(value) {\n        this._hidePageSize = coerceBooleanProperty(value);\n    }\n    /** Whether to show the first/last buttons UI to the user. */\n    get showFirstLastButtons() {\n        return this._showFirstLastButtons;\n    }\n    set showFirstLastButtons(value) {\n        this._showFirstLastButtons = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        this._initialized = true;\n        this._updateDisplayedPageSizeOptions();\n        this._markInitialized();\n    }\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n    }\n    /** Advances to the next page if it exists. */\n    nextPage() {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex + 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move back to the previous page if it exists. */\n    previousPage() {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the first page if not already there. */\n    firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the last page if not already there. */\n    lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Whether there is a previous page. */\n    hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /** Whether there is a next page. */\n    hasNextPage() {\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /** Calculate the number of pages */\n    getNumberOfPages() {\n        if (!this.pageSize) {\n            return 0;\n        }\n        return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        const startIndex = this.pageIndex * this.pageSize;\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    _updateDisplayedPageSizeOptions() {\n        if (!this._initialized) {\n            return;\n        }\n        // If no page size is provided, use the first page size option or the default page size.\n        if (!this.pageSize) {\n            this._pageSize =\n                this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort((a, b) => a - b);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length,\n        });\n    }\n}\n_MatPaginatorBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: _MatPaginatorBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatPaginatorBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0\", type: _MatPaginatorBase, inputs: { color: \"color\", pageIndex: \"pageIndex\", length: \"length\", pageSize: \"pageSize\", pageSizeOptions: \"pageSizeOptions\", hidePageSize: \"hidePageSize\", showFirstLastButtons: \"showFirstLastButtons\", selectConfig: \"selectConfig\" }, outputs: { page: \"page\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: _MatPaginatorBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined }]; }, propDecorators: { color: [{\n                type: Input\n            }], pageIndex: [{\n                type: Input\n            }], length: [{\n                type: Input\n            }], pageSize: [{\n                type: Input\n            }], pageSizeOptions: [{\n                type: Input\n            }], hidePageSize: [{\n                type: Input\n            }], showFirstLastButtons: [{\n                type: Input\n            }], selectConfig: [{\n                type: Input\n            }], page: [{\n                type: Output\n            }] } });\nlet nextUniqueId = 0;\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorBase {\n    constructor(intl, changeDetectorRef, defaults) {\n        super(intl, changeDetectorRef, defaults);\n        /** ID for the DOM node containing the paginator's items per page label. */\n        this._pageSizeLabelId = `mat-paginator-page-size-label-${nextUniqueId++}`;\n        this._formFieldAppearance = (defaults === null || defaults === void 0 ? void 0 : defaults.formFieldAppearance) || 'outline';\n    }\n}\nMatPaginator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatPaginator, deps: [{ token: MatPaginatorIntl }, { token: i0.ChangeDetectorRef }, { token: MAT_PAGINATOR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatPaginator.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0\", type: MatPaginator, selector: \"mat-paginator\", inputs: { disabled: \"disabled\" }, host: { attributes: { \"role\": \"group\" }, classAttribute: \"mat-mdc-paginator\" }, exportAs: [\"matPaginator\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-mdc-paginator-outer-container\\\">\\n  <div class=\\\"mat-mdc-paginator-container\\\">\\n    <div class=\\\"mat-mdc-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-mdc-paginator-page-size-label\\\" id=\\\"{{_pageSizeLabelId}}\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-mdc-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-labelledby]=\\\"_pageSizeLabelId\\\"\\n          [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n          [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-mdc-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-mdc-paginator-range-actions\\\">\\n      <div class=\\\"mat-mdc-paginator-range-label\\\" aria-live=\\\"polite\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-paginator{display:block}.mat-mdc-paginator .mat-mdc-form-field-subscript-wrapper{display:none}.mat-mdc-paginator .mat-mdc-select{line-height:1.5}.mat-mdc-paginator-outer-container{display:flex}.mat-mdc-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-mdc-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-mdc-paginator-page-size{margin-right:0;margin-left:8px}.mat-mdc-paginator-page-size-label{margin:0 4px}.mat-mdc-paginator-page-size-select{margin:0 4px;width:84px}.mat-mdc-paginator-range-label{margin:0 32px 0 24px}.mat-mdc-paginator-range-actions{display:flex;align-items:center}.mat-mdc-paginator-icon{display:inline-block;width:28px}[dir=rtl] .mat-mdc-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon,.cdk-high-contrast-active .mat-mdc-paginator-icon{fill:currentColor;fill:CanvasText}.cdk-high-contrast-active .mat-mdc-paginator-range-actions .mat-mdc-icon-button{outline:solid 1px}\"], dependencies: [{ kind: \"directive\", type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatIconButton, selector: \"button[mat-icon-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i4.MatFormField, selector: \"mat-form-field\", inputs: [\"hideRequiredMarker\", \"color\", \"floatLabel\", \"appearance\", \"subscriptSizing\", \"hintLabel\"], exportAs: [\"matFormField\"] }, { kind: \"component\", type: i5.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\"], exportAs: [\"matSelect\"] }, { kind: \"component\", type: i6.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }, { kind: \"directive\", type: i7.MatTooltip, selector: \"[matTooltip]\", exportAs: [\"matTooltip\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatPaginator, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-paginator', exportAs: 'matPaginator', inputs: ['disabled'], host: {\n                        'class': 'mat-mdc-paginator',\n                        'role': 'group',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"mat-mdc-paginator-outer-container\\\">\\n  <div class=\\\"mat-mdc-paginator-container\\\">\\n    <div class=\\\"mat-mdc-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-mdc-paginator-page-size-label\\\" id=\\\"{{_pageSizeLabelId}}\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-mdc-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-labelledby]=\\\"_pageSizeLabelId\\\"\\n          [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n          [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-mdc-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-mdc-paginator-range-actions\\\">\\n      <div class=\\\"mat-mdc-paginator-range-label\\\" aria-live=\\\"polite\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-mdc-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-mdc-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-paginator{display:block}.mat-mdc-paginator .mat-mdc-form-field-subscript-wrapper{display:none}.mat-mdc-paginator .mat-mdc-select{line-height:1.5}.mat-mdc-paginator-outer-container{display:flex}.mat-mdc-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-mdc-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-mdc-paginator-page-size{margin-right:0;margin-left:8px}.mat-mdc-paginator-page-size-label{margin:0 4px}.mat-mdc-paginator-page-size-select{margin:0 4px;width:84px}.mat-mdc-paginator-range-label{margin:0 32px 0 24px}.mat-mdc-paginator-range-actions{display:flex;align-items:center}.mat-mdc-paginator-icon{display:inline-block;width:28px}[dir=rtl] .mat-mdc-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-mdc-icon-button[disabled] .mat-mdc-paginator-icon,.cdk-high-contrast-active .mat-mdc-paginator-icon{fill:currentColor;fill:CanvasText}.cdk-high-contrast-active .mat-mdc-paginator-range-actions .mat-mdc-icon-button{outline:solid 1px}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatPaginatorModule {\n}\nMatPaginatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatPaginatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatPaginatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: MatPaginatorModule, declarations: [MatPaginator], imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule], exports: [MatPaginator] });\nMatPaginatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatPaginatorModule, providers: [MAT_PAGINATOR_INTL_PROVIDER], imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatPaginatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule],\n                    exports: [MatPaginator],\n                    declarations: [MatPaginator],\n                    providers: [MAT_PAGINATOR_INTL_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent, _MatPaginatorBase };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}