{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.action());\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.data.action, \" \");\n  }\n}\n\nconst _c0 = [\"label\"];\n\nfunction MatSnackBarContainer_ng_template_4_Template(rf, ctx) {}\n\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\n\nclass MatSnackBarRef {\n  constructor(containerInstance, _overlayRef) {\n    this._overlayRef = _overlayRef;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n\n    this._afterDismissed = new Subject();\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the snack bar action was called. */\n\n    this._onAction = new Subject();\n    /** Whether the snack bar was dismissed using the action button. */\n\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance;\n\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n  /** Dismisses the snack bar. */\n\n\n  dismiss() {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n\n    clearTimeout(this._durationTimeoutId);\n  }\n  /** Marks the snackbar action clicked. */\n\n\n  dismissWithAction() {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n\n      this._onAction.next();\n\n      this._onAction.complete();\n\n      this.dismiss();\n    }\n\n    clearTimeout(this._durationTimeoutId);\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n\n\n  closeWithAction() {\n    this.dismissWithAction();\n  }\n  /** Dismisses the snack bar after some duration */\n\n\n  _dismissAfter(duration) {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n  /** Marks the snackbar as opened */\n\n\n  _open() {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }\n  }\n  /** Cleans up the DOM after closing. */\n\n\n  _finishDismiss() {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({\n      dismissedByAction: this._dismissedByAction\n    });\n\n    this._afterDismissed.complete();\n\n    this._dismissedByAction = false;\n  }\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n\n\n  afterDismissed() {\n    return this._afterDismissed;\n  }\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n\n\n  afterOpened() {\n    return this.containerInstance._onEnter;\n  }\n  /** Gets an observable that is notified when the snack bar action is called. */\n\n\n  onAction() {\n    return this._onAction;\n  }\n\n}\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\n\n\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\n\nclass MatSnackBarConfig {\n  constructor() {\n    /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n    this.politeness = 'assertive';\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n\n    this.announcementMessage = '';\n    /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n\n    this.duration = 0;\n    /** Data being injected into the child component. */\n\n    this.data = null;\n    /** The horizontal position to place the snack bar. */\n\n    this.horizontalPosition = 'center';\n    /** The vertical position to place the snack bar. */\n\n    this.verticalPosition = 'bottom';\n  }\n\n}\n/** Directive that should be applied to the text element to be rendered in the snack bar. */\n\n\nclass MatSnackBarLabel {}\n\nMatSnackBarLabel.ɵfac = function MatSnackBarLabel_Factory(t) {\n  return new (t || MatSnackBarLabel)();\n};\n\nMatSnackBarLabel.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSnackBarLabel,\n  selectors: [[\"\", \"matSnackBarLabel\", \"\"]],\n  hostAttrs: [1, \"mat-mdc-snack-bar-label\", \"mdc-snackbar__label\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSnackBarLabel, [{\n    type: Directive,\n    args: [{\n      selector: `[matSnackBarLabel]`,\n      host: {\n        'class': 'mat-mdc-snack-bar-label mdc-snackbar__label'\n      }\n    }]\n  }], null, null);\n})();\n/** Directive that should be applied to the element containing the snack bar's action buttons. */\n\n\nclass MatSnackBarActions {}\n\nMatSnackBarActions.ɵfac = function MatSnackBarActions_Factory(t) {\n  return new (t || MatSnackBarActions)();\n};\n\nMatSnackBarActions.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSnackBarActions,\n  selectors: [[\"\", \"matSnackBarActions\", \"\"]],\n  hostAttrs: [1, \"mat-mdc-snack-bar-actions\", \"mdc-snackbar__actions\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSnackBarActions, [{\n    type: Directive,\n    args: [{\n      selector: `[matSnackBarActions]`,\n      host: {\n        'class': 'mat-mdc-snack-bar-actions mdc-snackbar__actions'\n      }\n    }]\n  }], null, null);\n})();\n/** Directive that should be applied to each of the snack bar's action buttons. */\n\n\nclass MatSnackBarAction {}\n\nMatSnackBarAction.ɵfac = function MatSnackBarAction_Factory(t) {\n  return new (t || MatSnackBarAction)();\n};\n\nMatSnackBarAction.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSnackBarAction,\n  selectors: [[\"\", \"matSnackBarAction\", \"\"]],\n  hostAttrs: [1, \"mat-mdc-snack-bar-action\", \"mdc-snackbar__action\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSnackBarAction, [{\n    type: Directive,\n    args: [{\n      selector: `[matSnackBarAction]`,\n      host: {\n        'class': 'mat-mdc-snack-bar-action mdc-snackbar__action'\n      }\n    }]\n  }], null, null);\n})();\n\nclass SimpleSnackBar {\n  constructor(snackBarRef, data) {\n    this.snackBarRef = snackBarRef;\n    this.data = data;\n  }\n  /** Performs the action on the snack bar. */\n\n\n  action() {\n    this.snackBarRef.dismissWithAction();\n  }\n  /** If the action button should be shown. */\n\n\n  get hasAction() {\n    return !!this.data.action;\n  }\n\n}\n\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) {\n  return new (t || SimpleSnackBar)(i0.ɵɵdirectiveInject(MatSnackBarRef), i0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n};\n\nSimpleSnackBar.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SimpleSnackBar,\n  selectors: [[\"simple-snack-bar\"]],\n  hostAttrs: [1, \"mat-mdc-simple-snack-bar\"],\n  exportAs: [\"matSnackBar\"],\n  decls: 3,\n  vars: 2,\n  consts: [[\"matSnackBarLabel\", \"\"], [\"matSnackBarActions\", \"\", 4, \"ngIf\"], [\"matSnackBarActions\", \"\"], [\"mat-button\", \"\", \"matSnackBarAction\", \"\", 3, \"click\"]],\n  template: function SimpleSnackBar_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.data.message, \"\\n\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    }\n  },\n  dependencies: [i2.NgIf, i3.MatButton, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction],\n  styles: [\".mat-mdc-simple-snack-bar{display:flex}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SimpleSnackBar, [{\n    type: Component,\n    args: [{\n      selector: 'simple-snack-bar',\n      exportAs: 'matSnackBar',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'mat-mdc-simple-snack-bar'\n      },\n      template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n<div matSnackBarActions *ngIf=\\\"hasAction\\\">\\n  <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n    {{data.action}}\\n  </button>\\n</div>\\n\",\n      styles: [\".mat-mdc-simple-snack-bar{display:flex}\"]\n    }]\n  }], function () {\n    return [{\n      type: MatSnackBarRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DATA]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\n\n\nconst matSnackBarAnimations = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [state('void, hidden', style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), state('visible', style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n    opacity: 0\n  })))])\n};\nlet uniqueId = 0;\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\n\nclass _MatSnackBarContainerBase extends BasePortalOutlet {\n  constructor(_ngZone, _elementRef, _changeDetectorRef, _platform,\n  /** The snack bar configuration. */\n  snackBarConfig) {\n    super();\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._platform = _platform;\n    this.snackBarConfig = snackBarConfig;\n    this._document = inject(DOCUMENT);\n    this._trackedModals = new Set();\n    /** The number of milliseconds to wait before announcing the snack bar's content. */\n\n    this._announceDelay = 150;\n    /** Whether the component has been destroyed. */\n\n    this._destroyed = false;\n    /** Subject for notifying that the snack bar has announced to screen readers. */\n\n    this._onAnnounce = new Subject();\n    /** Subject for notifying that the snack bar has exited from view. */\n\n    this._onExit = new Subject();\n    /** Subject for notifying that the snack bar has finished entering the view. */\n\n    this._onEnter = new Subject();\n    /** The state of the snack bar animations. */\n\n    this._animationState = 'void';\n    /** Unique ID of the aria-live element. */\n\n    this._liveElementId = `mat-snack-bar-container-live-${uniqueId++}`;\n    /**\n     * Attaches a DOM portal to the snack bar container.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n\n    this.attachDomPortal = portal => {\n      this._assertNotAttached();\n\n      const result = this._portalOutlet.attachDomPortal(portal);\n\n      this._afterPortalAttached();\n\n      return result;\n    }; // Use aria-live rather than a live role like 'alert' or 'status'\n    // because NVDA and JAWS have show inconsistent behavior with live roles.\n\n\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._live = 'assertive';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._live = 'off';\n    } else {\n      this._live = 'polite';\n    } // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n    // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n\n\n    if (this._platform.FIREFOX) {\n      if (this._live === 'polite') {\n        this._role = 'status';\n      }\n\n      if (this._live === 'assertive') {\n        this._role = 'alert';\n      }\n    }\n  }\n  /** Attach a component portal as content to this snack bar container. */\n\n\n  attachComponentPortal(portal) {\n    this._assertNotAttached();\n\n    const result = this._portalOutlet.attachComponentPortal(portal);\n\n    this._afterPortalAttached();\n\n    return result;\n  }\n  /** Attach a template portal as content to this snack bar container. */\n\n\n  attachTemplatePortal(portal) {\n    this._assertNotAttached();\n\n    const result = this._portalOutlet.attachTemplatePortal(portal);\n\n    this._afterPortalAttached();\n\n    return result;\n  }\n  /** Handle end of animations, updating the state of the snackbar. */\n\n\n  onAnimationEnd(event) {\n    const {\n      fromState,\n      toState\n    } = event;\n\n    if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n  /** Begin animation of snack bar entrance into view. */\n\n\n  enter() {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n\n      this._changeDetectorRef.detectChanges();\n\n      this._screenReaderAnnounce();\n    }\n  }\n  /** Begin animation of the snack bar exiting from view. */\n\n\n  exit() {\n    // It's common for snack bars to be opened by random outside calls like HTTP requests or\n    // errors. Run inside the NgZone to ensure that it functions correctly.\n    this._ngZone.run(() => {\n      // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n      // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n      // `MatSnackBar.open`).\n      this._animationState = 'hidden'; // Mark this element with an 'exit' attribute to indicate that the snackbar has\n      // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n      // test harness.\n\n      this._elementRef.nativeElement.setAttribute('mat-exit', ''); // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n      // long enough to visually read it either, so clear the timeout for announcing.\n\n\n      clearTimeout(this._announceTimeoutId);\n    });\n\n    return this._onExit;\n  }\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n\n\n  ngOnDestroy() {\n    this._destroyed = true;\n\n    this._clearFromModals();\n\n    this._completeExit();\n  }\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n\n\n  _completeExit() {\n    this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n      this._ngZone.run(() => {\n        this._onExit.next();\n\n        this._onExit.complete();\n      });\n    });\n  }\n  /**\n   * Called after the portal contents have been attached. Can be\n   * used to modify the DOM once it's guaranteed to be in place.\n   */\n\n\n  _afterPortalAttached() {\n    const element = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    this._exposeToModals();\n  }\n  /**\n   * Some browsers won't expose the accessibility node of the live element if there is an\n   * `aria-modal` and the live element is outside of it. This method works around the issue by\n   * pointing the `aria-owns` of all modals to the live element.\n   */\n\n\n  _exposeToModals() {\n    // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with the\n    // `LiveAnnouncer` and any other usages.\n    //\n    // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n    // section of the DOM we need to look through. This should cover all the cases we support, but\n    // the selector can be expanded if it turns out to be too narrow.\n    const id = this._liveElementId;\n\n    const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal=\"true\"]');\n\n    for (let i = 0; i < modals.length; i++) {\n      const modal = modals[i];\n      const ariaOwns = modal.getAttribute('aria-owns');\n\n      this._trackedModals.add(modal);\n\n      if (!ariaOwns) {\n        modal.setAttribute('aria-owns', id);\n      } else if (ariaOwns.indexOf(id) === -1) {\n        modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n      }\n    }\n  }\n  /** Clears the references to the live element from any modals it was added to. */\n\n\n  _clearFromModals() {\n    this._trackedModals.forEach(modal => {\n      const ariaOwns = modal.getAttribute('aria-owns');\n\n      if (ariaOwns) {\n        const newValue = ariaOwns.replace(this._liveElementId, '').trim();\n\n        if (newValue.length > 0) {\n          modal.setAttribute('aria-owns', newValue);\n        } else {\n          modal.removeAttribute('aria-owns');\n        }\n      }\n    });\n\n    this._trackedModals.clear();\n  }\n  /** Asserts that no content is already attached to the container. */\n\n\n  _assertNotAttached() {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n  /**\n   * Starts a timeout to move the snack bar content to the live region so screen readers will\n   * announce it.\n   */\n\n\n  _screenReaderAnnounce() {\n    if (!this._announceTimeoutId) {\n      this._ngZone.runOutsideAngular(() => {\n        this._announceTimeoutId = setTimeout(() => {\n          const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n\n          const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n\n          if (inertElement && liveElement) {\n            // If an element in the snack bar content is focused before being moved\n            // track it and restore focus after moving to the live region.\n            let focusedElement = null;\n\n            if (this._platform.isBrowser && document.activeElement instanceof HTMLElement && inertElement.contains(document.activeElement)) {\n              focusedElement = document.activeElement;\n            }\n\n            inertElement.removeAttribute('aria-hidden');\n            liveElement.appendChild(inertElement);\n            focusedElement?.focus();\n\n            this._onAnnounce.next();\n\n            this._onAnnounce.complete();\n          }\n        }, this._announceDelay);\n      });\n    }\n  }\n\n}\n\n_MatSnackBarContainerBase.ɵfac = function _MatSnackBarContainerBase_Factory(t) {\n  return new (t || _MatSnackBarContainerBase)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(MatSnackBarConfig));\n};\n\n_MatSnackBarContainerBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatSnackBarContainerBase,\n  viewQuery: function _MatSnackBarContainerBase_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatSnackBarContainerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.Platform\n    }, {\n      type: MatSnackBarConfig\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n\n\nclass MatSnackBarContainer extends _MatSnackBarContainerBase {\n  /** Applies the correct CSS class to the label based on its content. */\n  _afterPortalAttached() {\n    super._afterPortalAttached(); // Check to see if the attached component or template uses the MDC template structure,\n    // specifically the MDC label. If not, the container should apply the MDC label class to this\n    // component's label container, which will apply MDC's label styles to the attached view.\n\n\n    const label = this._label.nativeElement;\n    const labelClass = 'mdc-snackbar__label';\n    label.classList.toggle(labelClass, !label.querySelector(`.${labelClass}`));\n  }\n\n}\n\nMatSnackBarContainer.ɵfac = /* @__PURE__ */function () {\n  let ɵMatSnackBarContainer_BaseFactory;\n  return function MatSnackBarContainer_Factory(t) {\n    return (ɵMatSnackBarContainer_BaseFactory || (ɵMatSnackBarContainer_BaseFactory = i0.ɵɵgetInheritedFactory(MatSnackBarContainer)))(t || MatSnackBarContainer);\n  };\n}();\n\nMatSnackBarContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSnackBarContainer,\n  selectors: [[\"mat-snack-bar-container\"]],\n  viewQuery: function MatSnackBarContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._label = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mdc-snackbar\", \"mat-mdc-snack-bar-container\", \"mdc-snackbar--open\"],\n  hostVars: 1,\n  hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {\n        return ctx.onAnimationEnd($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 3,\n  consts: [[1, \"mdc-snackbar__surface\"], [1, \"mat-mdc-snack-bar-label\"], [\"label\", \"\"], [\"aria-hidden\", \"true\"], [\"cdkPortalOutlet\", \"\"]],\n  template: function MatSnackBarContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1, 2)(3, \"div\", 3);\n      i0.ɵɵtemplate(4, MatSnackBarContainer_ng_template_4_Template, 0, 0, \"ng-template\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"div\");\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵattribute(\"aria-live\", ctx._live)(\"role\", ctx._role)(\"id\", ctx._liveElementId);\n    }\n  },\n  dependencies: [i3$1.CdkPortalOutlet],\n  styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;--mdc-snackbar-container-shape:4px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container{width:100vw}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape)}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size);font-family:var(--mdc-snackbar-supporting-text-font);font-weight:var(--mdc-snackbar-supporting-text-weight);line-height:var(--mdc-snackbar-supporting-text-line-height)}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-snack-bar-button-color);--mat-mdc-button-persistent-ripple-color: currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{background-color:currentColor;opacity:.1}.mat-mdc-snack-bar-container .mdc-snackbar__label::before{display:none}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSnackBarAnimations.snackBarState]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSnackBarContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-snack-bar-container',\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      animations: [matSnackBarAnimations.snackBarState],\n      host: {\n        'class': 'mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open',\n        '[@state]': '_animationState',\n        '(@state.done)': 'onAnimationEnd($event)'\n      },\n      template: \"<div class=\\\"mdc-snackbar__surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet></ng-template>\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\" [attr.id]=\\\"_liveElementId\\\"></div>\\n  </div>\\n</div>\\n\",\n      styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;--mdc-snackbar-container-shape:4px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container{width:100vw}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape)}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size);font-family:var(--mdc-snackbar-supporting-text-font);font-weight:var(--mdc-snackbar-supporting-text-weight);line-height:var(--mdc-snackbar-supporting-text-line-height)}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-snack-bar-button-color);--mat-mdc-button-persistent-ripple-color: currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{background-color:currentColor;opacity:.1}.mat-mdc-snack-bar-container .mdc-snackbar__label::before{display:none}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"]\n    }]\n  }], null, {\n    _label: [{\n      type: ViewChild,\n      args: ['label', {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass MatSnackBarModule {}\n\nMatSnackBarModule.ɵfac = function MatSnackBarModule_Factory(t) {\n  return new (t || MatSnackBarModule)();\n};\n\nMatSnackBarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatSnackBarModule\n});\nMatSnackBarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSnackBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n      exports: [MatCommonModule, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction],\n      declarations: [SimpleSnackBar, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarActions, MatSnackBarAction]\n    }]\n  }], null, null);\n})();\n/** @docs-private */\n\n\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n/** Injection token that can be used to specify default snack bar. */\n\n\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n\nclass _MatSnackBarBase {\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef() {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n    this._overlay = _overlay;\n    this._live = _live;\n    this._injector = _injector;\n    this._breakpointObserver = _breakpointObserver;\n    this._parentSnackBar = _parentSnackBar;\n    this._defaultConfig = _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n\n    this._snackBarRefAtThisLevel = null;\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n\n\n  openFromComponent(component, config) {\n    return this._attach(component, config);\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n\n\n  openFromTemplate(template, config) {\n    return this._attach(template, config);\n  }\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n\n\n  open(message, action = '', config) {\n    const _config = { ...this._defaultConfig,\n      ...config\n    }; // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n\n    _config.data = {\n      message,\n      action\n    }; // Since the snack bar has `role=\"alert\"`, we don't\n    // want to announce the same message twice.\n\n    if (_config.announcementMessage === message) {\n      _config.announcementMessage = undefined;\n    }\n\n    return this.openFromComponent(this.simpleSnackBarComponent, _config);\n  }\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n\n\n  dismiss() {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n\n\n  _attachSnackBarContainer(overlayRef, config) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{\n        provide: MatSnackBarConfig,\n        useValue: config\n      }]\n    });\n    const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n    const containerRef = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n\n\n  _attach(content, userConfig) {\n    const config = { ...new MatSnackBarConfig(),\n      ...this._defaultConfig,\n      ...userConfig\n    };\n\n    const overlayRef = this._createOverlay(config);\n\n    const container = this._attachSnackBarContainer(overlayRef, config);\n\n    const snackBarRef = new MatSnackBarRef(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null, {\n        $implicit: config.data,\n        snackBarRef\n      });\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal(portal); // We can't pass this via the injector, because the injector is created earlier.\n\n      snackBarRef.instance = contentRef.instance;\n    } // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n\n\n    this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n      overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n    });\n\n    if (config.announcementMessage) {\n      // Wait until the snack bar contents have been announced then deliver this message.\n      container._onAnnounce.subscribe(() => {\n        this._live.announce(config.announcementMessage, config.politeness);\n      });\n    }\n\n    this._animateSnackBar(snackBarRef, config);\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n  /** Animates the old snack bar out and the new one in. */\n\n\n  _animateSnackBar(snackBarRef, config) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    } // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n\n\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n    }\n  }\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n\n\n  _createOverlay(config) {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global(); // Set horizontal position.\n\n\n    const isRtl = config.direction === 'rtl';\n    const isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    } // Set horizontal position.\n\n\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n\n\n  _createInjector(config, snackBarRef) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    return Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{\n        provide: MatSnackBarRef,\n        useValue: snackBarRef\n      }, {\n        provide: MAT_SNACK_BAR_DATA,\n        useValue: config.data\n      }]\n    });\n  }\n\n}\n\n_MatSnackBarBase.ɵfac = function _MatSnackBarBase_Factory(t) {\n  return new (t || _MatSnackBarBase)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i2$1.LiveAnnouncer), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3$2.BreakpointObserver), i0.ɵɵinject(_MatSnackBarBase, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n};\n\n_MatSnackBarBase.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _MatSnackBarBase,\n  factory: _MatSnackBarBase.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatSnackBarBase, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i2$1.LiveAnnouncer\n    }, {\n      type: i0.Injector\n    }, {\n      type: i3$2.BreakpointObserver\n    }, {\n      type: _MatSnackBarBase,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: MatSnackBarConfig,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n\n\nclass MatSnackBar extends _MatSnackBarBase {\n  constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n    super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n    this.simpleSnackBarComponent = SimpleSnackBar;\n    this.snackBarContainerComponent = MatSnackBarContainer;\n    this.handsetCssClass = 'mat-mdc-snack-bar-handset';\n  }\n\n}\n\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) {\n  return new (t || MatSnackBar)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i2$1.LiveAnnouncer), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i3$2.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n};\n\nMatSnackBar.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MatSnackBar,\n  factory: MatSnackBar.ɵfac,\n  providedIn: MatSnackBarModule\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSnackBar, [{\n    type: Injectable,\n    args: [{\n      providedIn: MatSnackBarModule\n    }]\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i2$1.LiveAnnouncer\n    }, {\n      type: i0.Injector\n    }, {\n      type: i3$2.BreakpointObserver\n    }, {\n      type: MatSnackBar,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: MatSnackBarConfig,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarAction, MatSnackBarActions, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };","map":{"version":3,"names":["i0","InjectionToken","Directive","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","inject","ViewChild","NgModule","Injector","TemplateRef","Injectable","Optional","SkipSelf","Subject","i2","DOCUMENT","CommonModule","i3","MatButtonModule","trigger","state","style","transition","animate","i3$1","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","i1","take","takeUntil","i2$1","i3$2","Breakpoints","i1$1","OverlayModule","OverlayConfig","MatCommonModule","MAX_TIMEOUT","Math","pow","MatSnackBarRef","constructor","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","_onExit","subscribe","_finishDismiss","dismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","duration","setTimeout","min","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","data","horizontalPosition","verticalPosition","MatSnackBarLabel","ɵfac","ɵdir","type","args","selector","host","MatSnackBarActions","MatSnackBarAction","SimpleSnackBar","snackBarRef","action","hasAction","ɵcmp","NgIf","MatButton","exportAs","encapsulation","None","changeDetection","OnPush","template","styles","undefined","decorators","matSnackBarAnimations","snackBarState","transform","opacity","uniqueId","_MatSnackBarContainerBase","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_document","_trackedModals","Set","_announceDelay","_destroyed","_onAnnounce","_animationState","_liveElementId","attachDomPortal","portal","_assertNotAttached","result","_portalOutlet","_afterPortalAttached","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","ngOnDestroy","_clearFromModals","onMicrotaskEmpty","pipe","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","_exposeToModals","id","modals","querySelectorAll","i","length","modal","ariaOwns","getAttribute","indexOf","newValue","replace","trim","removeAttribute","clear","hasAttached","ngDevMode","Error","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","appendChild","focus","NgZone","ElementRef","ChangeDetectorRef","Platform","static","MatSnackBarContainer","label","_label","labelClass","toggle","Default","animations","MatSnackBarModule","ɵmod","ɵinj","imports","exports","declarations","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","_MatSnackBarBase","_openedSnackBarRef","parent","_parentSnackBar","_snackBarRefAtThisLevel","value","_overlay","_injector","_breakpointObserver","_defaultConfig","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","simpleSnackBarComponent","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","create","providers","provide","useValue","containerPortal","snackBarContainerComponent","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","overlayElement","handsetCssClass","matches","announce","_animateSnackBar","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","Overlay","LiveAnnouncer","BreakpointObserver","ɵprov","MatSnackBar","overlay","live","breakpointObserver","parentSnackBar","defaultConfig"],"sources":["C:/Users/Henry/Desktop/New folder/Atomas2/node_modules/@angular/material/fesm2022/snack-bar.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i1 from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/a11y';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport { MatCommonModule } from '@angular/material/core';\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/** Directive that should be applied to the text element to be rendered in the snack bar. */\nclass MatSnackBarLabel {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarLabel, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSnackBarLabel, selector: \"[matSnackBarLabel]\", host: { classAttribute: \"mat-mdc-snack-bar-label mdc-snackbar__label\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarLabel]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-label mdc-snackbar__label',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to the element containing the snack bar's action buttons. */\nclass MatSnackBarActions {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarActions, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSnackBarActions, selector: \"[matSnackBarActions]\", host: { classAttribute: \"mat-mdc-snack-bar-actions mdc-snackbar__actions\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarActions]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-actions mdc-snackbar__actions',\n                    },\n                }]\n        }] });\n/** Directive that should be applied to each of the snack bar's action buttons. */\nclass MatSnackBarAction {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarAction, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSnackBarAction, selector: \"[matSnackBarAction]\", host: { classAttribute: \"mat-mdc-snack-bar-action mdc-snackbar__action\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarAction, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[matSnackBarAction]`,\n                    host: {\n                        'class': 'mat-mdc-snack-bar-action mdc-snackbar__action',\n                    },\n                }]\n        }] });\n\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-mdc-simple-snack-bar\" }, exportAs: [\"matSnackBar\"], ngImport: i0, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n<div matSnackBarActions *ngIf=\\\"hasAction\\\">\\n  <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n    {{data.action}}\\n  </button>\\n</div>\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\"], dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i3.MatButton, selector: \"    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  \", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"directive\", type: MatSnackBarLabel, selector: \"[matSnackBarLabel]\" }, { kind: \"directive\", type: MatSnackBarActions, selector: \"[matSnackBarActions]\" }, { kind: \"directive\", type: MatSnackBarAction, selector: \"[matSnackBarAction]\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', exportAs: 'matSnackBar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-mdc-simple-snack-bar',\n                    }, template: \"<div matSnackBarLabel>\\n  {{data.message}}\\n</div>\\n\\n<div matSnackBarActions *ngIf=\\\"hasAction\\\">\\n  <button mat-button matSnackBarAction (click)=\\\"action()\\\">\\n    {{data.action}}\\n  </button>\\n</div>\\n\", styles: [\".mat-mdc-simple-snack-bar{display:flex}\"] }]\n        }], ctorParameters: function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DATA]\n                }] }]; } });\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\nlet uniqueId = 0;\n/**\n * Base class for snack bar containers.\n * @docs-private\n */\nclass _MatSnackBarContainerBase extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        this._document = inject(DOCUMENT);\n        this._trackedModals = new Set();\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /** Unique ID of the aria-live element. */\n        this._liveElementId = `mat-snack-bar-container-live-${uniqueId++}`;\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._afterPortalAttached();\n            return result;\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._afterPortalAttached();\n        return result;\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._clearFromModals();\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /**\n     * Called after the portal contents have been attached. Can be\n     * used to modify the DOM once it's guaranteed to be in place.\n     */\n    _afterPortalAttached() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        this._exposeToModals();\n    }\n    /**\n     * Some browsers won't expose the accessibility node of the live element if there is an\n     * `aria-modal` and the live element is outside of it. This method works around the issue by\n     * pointing the `aria-owns` of all modals to the live element.\n     */\n    _exposeToModals() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with the\n        // `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const id = this._liveElementId;\n        const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        for (let i = 0; i < modals.length; i++) {\n            const modal = modals[i];\n            const ariaOwns = modal.getAttribute('aria-owns');\n            this._trackedModals.add(modal);\n            if (!ariaOwns) {\n                modal.setAttribute('aria-owns', id);\n            }\n            else if (ariaOwns.indexOf(id) === -1) {\n                modal.setAttribute('aria-owns', ariaOwns + ' ' + id);\n            }\n        }\n    }\n    /** Clears the references to the live element from any modals it was added to. */\n    _clearFromModals() {\n        this._trackedModals.forEach(modal => {\n            const ariaOwns = modal.getAttribute('aria-owns');\n            if (ariaOwns) {\n                const newValue = ariaOwns.replace(this._liveElementId, '').trim();\n                if (newValue.length > 0) {\n                    modal.setAttribute('aria-owns', newValue);\n                }\n                else {\n                    modal.removeAttribute('aria-owns');\n                }\n            }\n        });\n        this._trackedModals.clear();\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement?.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSnackBarContainerBase, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatSnackBarContainerBase, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSnackBarContainerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends _MatSnackBarContainerBase {\n    /** Applies the correct CSS class to the label based on its content. */\n    _afterPortalAttached() {\n        super._afterPortalAttached();\n        // Check to see if the attached component or template uses the MDC template structure,\n        // specifically the MDC label. If not, the container should apply the MDC label class to this\n        // component's label container, which will apply MDC's label styles to the attached view.\n        const label = this._label.nativeElement;\n        const labelClass = 'mdc-snackbar__label';\n        label.classList.toggle(labelClass, !label.querySelector(`.${labelClass}`));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarContainer, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSnackBarContainer, selector: \"mat-snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open\" }, viewQueries: [{ propertyName: \"_label\", first: true, predicate: [\"label\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mdc-snackbar__surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet></ng-template>\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\" [attr.id]=\\\"_liveElementId\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;--mdc-snackbar-container-shape:4px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container{width:100vw}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape)}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size);font-family:var(--mdc-snackbar-supporting-text-font);font-weight:var(--mdc-snackbar-supporting-text-weight);line-height:var(--mdc-snackbar-supporting-text-line-height)}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-snack-bar-button-color);--mat-mdc-button-persistent-ripple-color: currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{background-color:currentColor;opacity:.1}.mat-mdc-snack-bar-container .mdc-snackbar__label::before{display:none}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"], dependencies: [{ kind: \"directive\", type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mdc-snackbar mat-mdc-snack-bar-container mdc-snackbar--open',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<div class=\\\"mdc-snackbar__surface\\\">\\n  <!--\\n    This outer label wrapper will have the class `mdc-snackbar__label` applied if\\n    the attached template/component does not contain it.\\n  -->\\n  <div class=\\\"mat-mdc-snack-bar-label\\\" #label>\\n    <!-- Initialy holds the snack bar content, will be empty after announcing to screen readers. -->\\n    <div aria-hidden=\\\"true\\\">\\n      <ng-template cdkPortalOutlet></ng-template>\\n    </div>\\n\\n    <!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n    <div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\" [attr.id]=\\\"_liveElementId\\\"></div>\\n  </div>\\n</div>\\n\", styles: [\".mdc-snackbar{display:none;position:fixed;right:0;bottom:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;pointer-events:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mdc-snackbar--opening,.mdc-snackbar--open,.mdc-snackbar--closing{display:flex}.mdc-snackbar--open .mdc-snackbar__label,.mdc-snackbar--open .mdc-snackbar__actions{visibility:visible}.mdc-snackbar__surface{padding-left:0;padding-right:8px;display:flex;align-items:center;justify-content:flex-start;box-sizing:border-box;transform:scale(0.8);opacity:0}.mdc-snackbar__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-snackbar__surface::before{border-color:CanvasText}}[dir=rtl] .mdc-snackbar__surface,.mdc-snackbar__surface[dir=rtl]{padding-left:8px;padding-right:0}.mdc-snackbar--open .mdc-snackbar__surface{transform:scale(1);opacity:1;pointer-events:auto}.mdc-snackbar--closing .mdc-snackbar__surface{transform:scale(1)}.mdc-snackbar__label{padding-left:16px;padding-right:8px;width:100%;flex-grow:1;box-sizing:border-box;margin:0;visibility:hidden;padding-top:14px;padding-bottom:14px}[dir=rtl] .mdc-snackbar__label,.mdc-snackbar__label[dir=rtl]{padding-left:8px;padding-right:16px}.mdc-snackbar__label::before{display:inline;content:attr(data-mdc-snackbar-label-text)}.mdc-snackbar__actions{display:flex;flex-shrink:0;align-items:center;box-sizing:border-box;visibility:hidden}.mdc-snackbar__action+.mdc-snackbar__dismiss{margin-left:8px;margin-right:0}[dir=rtl] .mdc-snackbar__action+.mdc-snackbar__dismiss,.mdc-snackbar__action+.mdc-snackbar__dismiss[dir=rtl]{margin-left:0;margin-right:8px}.mat-mdc-snack-bar-container{margin:8px;--mdc-snackbar-container-shape:4px;position:static}.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:344px}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container .mdc-snackbar__surface{min-width:100%}}@media(max-width: 480px),(max-width: 344px){.mat-mdc-snack-bar-container{width:100vw}}.mat-mdc-snack-bar-container .mdc-snackbar__surface{max-width:672px}.mat-mdc-snack-bar-container .mdc-snackbar__surface{box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2), 0px 6px 10px 0px rgba(0, 0, 0, 0.14), 0px 1px 18px 0px rgba(0, 0, 0, 0.12)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{background-color:var(--mdc-snackbar-container-color)}.mat-mdc-snack-bar-container .mdc-snackbar__surface{border-radius:var(--mdc-snackbar-container-shape)}.mat-mdc-snack-bar-container .mdc-snackbar__label{color:var(--mdc-snackbar-supporting-text-color)}.mat-mdc-snack-bar-container .mdc-snackbar__label{font-size:var(--mdc-snackbar-supporting-text-size);font-family:var(--mdc-snackbar-supporting-text-font);font-weight:var(--mdc-snackbar-supporting-text-weight);line-height:var(--mdc-snackbar-supporting-text-line-height)}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled){color:var(--mat-snack-bar-button-color);--mat-mdc-button-persistent-ripple-color: currentColor}.mat-mdc-snack-bar-container .mat-mdc-button.mat-mdc-snack-bar-action:not(:disabled) .mat-ripple-element{background-color:currentColor;opacity:.1}.mat-mdc-snack-bar-container .mdc-snackbar__label::before{display:none}.mat-mdc-snack-bar-handset,.mat-mdc-snack-bar-container,.mat-mdc-snack-bar-label{flex:1 1 auto}.mat-mdc-snack-bar-handset .mdc-snackbar__surface{width:100%}\"] }]\n        }], propDecorators: { _label: [{\n                type: ViewChild,\n                args: ['label', { static: true }]\n            }] } });\n\nclass MatSnackBarModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarModule, declarations: [SimpleSnackBar,\n            MatSnackBarContainer,\n            MatSnackBarLabel,\n            MatSnackBarActions,\n            MatSnackBarAction], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatCommonModule,\n            MatSnackBarContainer,\n            MatSnackBarLabel,\n            MatSnackBarActions,\n            MatSnackBarAction] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarModule, imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [\n                        MatCommonModule,\n                        MatSnackBarContainer,\n                        MatSnackBarLabel,\n                        MatSnackBarActions,\n                        MatSnackBarAction,\n                    ],\n                    declarations: [\n                        SimpleSnackBar,\n                        MatSnackBarContainer,\n                        MatSnackBarLabel,\n                        MatSnackBarActions,\n                        MatSnackBarAction,\n                    ],\n                }]\n        }] });\n\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\nclass _MatSnackBarBase {\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = { ...this._defaultConfig, ...config };\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = { ...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig };\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSnackBarBase }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-mdc-snack-bar-handset';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: MatSnackBarConfig, decorators: [{\n                    type: Inject,\n                    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarAction, MatSnackBarActions, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarLabel, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, _MatSnackBarContainerBase, matSnackBarAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}