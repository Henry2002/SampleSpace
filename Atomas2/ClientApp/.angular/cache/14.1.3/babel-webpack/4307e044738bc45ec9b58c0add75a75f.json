{"ast":null,"code":"import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getEventTarget } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nimport * as ɵngcc6 from '@angular/material/form-field';\nconst _c0 = [\"panel\"];\n\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n  }\n}\n\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\n\nclass MatAutocompleteSelectedEvent {\n  constructor(\n  /** Reference to the autocomplete panel that emitted the event. */\n  source,\n  /** Option that was selected. */\n  option) {\n    this.source = source;\n    this.option = option;\n  }\n\n} // Boilerplate for applying mixins to MatAutocomplete.\n\n/** @docs-private */\n\n\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\n\n\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\n\n\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n  constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n    super();\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._activeOptionChanges = Subscription.EMPTY;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n\n    this.showPanel = false;\n    this._isOpen = false;\n    /** Function that maps an option's control value to its display value in the trigger. */\n\n    this.displayWith = null;\n    /** Event that is emitted whenever an option from the list is selected. */\n\n    this.optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n\n    this.opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n\n    this.closed = new EventEmitter();\n    /** Emits whenever an option is activated using the keyboard. */\n\n    this.optionActivated = new EventEmitter();\n    this._classList = {};\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n\n    this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`; // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n    // Safari using VoiceOver. We should occasionally check back to see whether the bug\n    // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n    // option altogether.\n\n    this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n  /** Whether the autocomplete panel is open. */\n\n\n  get isOpen() {\n    return this._isOpen && this.showPanel;\n  }\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n\n\n  get autoActiveFirstOption() {\n    return this._autoActiveFirstOption;\n  }\n\n  set autoActiveFirstOption(value) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n\n\n  set classList(value) {\n    if (value && value.length) {\n      this._classList = coerceStringArray(value).reduce((classList, className) => {\n        classList[className] = true;\n        return classList;\n      }, {});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n\n    this._elementRef.nativeElement.className = '';\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n    this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n      if (this.isOpen) {\n        this.optionActivated.emit({\n          source: this,\n          option: this.options.toArray()[index] || null\n        });\n      }\n    }); // Set the initial visibility state.\n\n    this._setVisibility();\n  }\n\n  ngOnDestroy() {\n    this._activeOptionChanges.unsubscribe();\n  }\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n\n\n  _setScrollTop(scrollTop) {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n  /** Returns the panel's scrollTop. */\n\n\n  _getScrollTop() {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n  /** Panel should hide itself when the option list is empty. */\n\n\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n\n    this._setVisibilityClasses(this._classList);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Emits the `select` event. */\n\n\n  _emitSelectEvent(option) {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n  /** Gets the aria-labelledby for the autocomplete panel. */\n\n\n  _getPanelAriaLabelledby(labelId) {\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n\n\n  _setVisibilityClasses(classList) {\n    classList[this._visibleClass] = this.showPanel;\n    classList[this._hiddenClass] = !this.showPanel;\n  }\n\n}\n\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) {\n  return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform));\n};\n\n_MatAutocompleteBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _MatAutocompleteBase,\n  viewQuery: function _MatAutocompleteBase_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TemplateRef, 7);\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    }\n  },\n  inputs: {\n    displayWith: \"displayWith\",\n    autoActiveFirstOption: \"autoActiveFirstOption\",\n    classList: [\"class\", \"classList\"],\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    panelWidth: \"panelWidth\"\n  },\n  outputs: {\n    optionSelected: \"optionSelected\",\n    opened: \"opened\",\n    closed: \"closed\",\n    optionActivated: \"optionActivated\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\n_MatAutocompleteBase.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: Platform\n}];\n\n_MatAutocompleteBase.propDecorators = {\n  template: [{\n    type: ViewChild,\n    args: [TemplateRef, {\n      static: true\n    }]\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  displayWith: [{\n    type: Input\n  }],\n  autoActiveFirstOption: [{\n    type: Input\n  }],\n  panelWidth: [{\n    type: Input\n  }],\n  optionSelected: [{\n    type: Output\n  }],\n  opened: [{\n    type: Output\n  }],\n  closed: [{\n    type: Output\n  }],\n  optionActivated: [{\n    type: Output\n  }],\n  classList: [{\n    type: Input,\n    args: ['class']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: ɵngcc1.Platform\n    }];\n  }, {\n    displayWith: [{\n      type: Input\n    }],\n    optionSelected: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    optionActivated: [{\n      type: Output\n    }],\n    autoActiveFirstOption: [{\n      type: Input\n    }],\n    classList: [{\n      type: Input,\n      args: ['class']\n    }],\n    template: [{\n      type: ViewChild,\n      args: [TemplateRef, {\n        static: true\n      }]\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    panelWidth: [{\n      type: Input\n    }]\n  });\n})();\n\nclass MatAutocomplete extends _MatAutocompleteBase {\n  constructor() {\n    super(...arguments);\n    this._visibleClass = 'mat-autocomplete-visible';\n    this._hiddenClass = 'mat-autocomplete-hidden';\n  }\n\n}\n\nMatAutocomplete.ɵfac = /*@__PURE__*/function () {\n  let ɵMatAutocomplete_BaseFactory;\n  return function MatAutocomplete_Factory(t) {\n    return (ɵMatAutocomplete_BaseFactory || (ɵMatAutocomplete_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete)))(t || MatAutocomplete);\n  };\n}();\n\nMatAutocomplete.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatAutocomplete,\n  selectors: [[\"mat-autocomplete\"]],\n  contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-autocomplete\"],\n  inputs: {\n    disableRipple: \"disableRipple\"\n  },\n  exportAs: [\"matAutocomplete\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatAutocomplete\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n  template: function MatAutocomplete_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n    }\n  },\n  dependencies: [ɵngcc2.NgClass],\n  styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nMatAutocomplete.propDecorators = {\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MAT_OPTGROUP, {\n      descendants: true\n    }]\n  }],\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n    type: Component,\n    args: [{\n      selector: 'mat-autocomplete',\n      template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'matAutocomplete',\n      inputs: ['disableRipple'],\n      host: {\n        'class': 'mat-autocomplete'\n      },\n      providers: [{\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatAutocomplete\n      }],\n      styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"]\n    }]\n  }], null, {\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\n\n\nclass _MatAutocompleteOriginBase {\n  constructor(\n  /** Reference to the element on which the directive is applied. */\n  elementRef) {\n    this.elementRef = elementRef;\n  }\n\n}\n\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) {\n  return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\n_MatAutocompleteOriginBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _MatAutocompleteOriginBase\n});\n\n_MatAutocompleteOriginBase.ctorParameters = () => [{\n  type: ElementRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n\n\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {}\n\nMatAutocompleteOrigin.ɵfac = /*@__PURE__*/function () {\n  let ɵMatAutocompleteOrigin_BaseFactory;\n  return function MatAutocompleteOrigin_Factory(t) {\n    return (ɵMatAutocompleteOrigin_BaseFactory || (ɵMatAutocompleteOrigin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin)))(t || MatAutocompleteOrigin);\n  };\n}();\n\nMatAutocompleteOrigin.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteOrigin,\n  selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n  exportAs: [\"matAutocompleteOrigin\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[matAutocompleteOrigin]',\n      exportAs: 'matAutocompleteOrigin'\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\n\n\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\n\n\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\n\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\n\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + 'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\n\n\nclass _MatAutocompleteTriggerBase {\n  constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._defaults = _defaults;\n    this._componentDestroyed = false;\n    this._autocompleteDisabled = false;\n    /** Whether or not the label state is being overridden. */\n\n    this._manuallyFloatingLabel = false;\n    /** Subscription to viewport size changes. */\n\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n\n    this._canOpenOnNextFocus = true;\n    /** Stream of keyboard events that can close the panel. */\n\n    this._closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n\n    this._windowBlurHandler = () => {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      this._canOpenOnNextFocus = this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n    };\n    /** `View -> model callback called when value changes` */\n\n\n    this._onChange = () => {};\n    /** `View -> model callback called when autocomplete has been touched` */\n\n\n    this._onTouched = () => {};\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     */\n\n\n    this.position = 'auto';\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n\n    this.autocompleteAttribute = 'off';\n    this._overlayAttached = false;\n    /** Stream of autocomplete option selections. */\n\n    this.optionSelections = defer(() => {\n      if (this.autocomplete && this.autocomplete.options) {\n        return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n      } // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n\n\n      return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n    });\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n\n\n  get autocompleteDisabled() {\n    return this._autocompleteDisabled;\n  }\n\n  set autocompleteDisabled(value) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  ngAfterViewInit() {\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n\n    this._componentDestroyed = true;\n\n    this._destroyPanel();\n\n    this._closeKeyEventStream.complete();\n  }\n  /** Whether or not the autocomplete panel is open. */\n\n\n  get panelOpen() {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  /** Opens the autocomplete suggestion panel. */\n\n\n  openPanel() {\n    this._attachOverlay();\n\n    this._floatLabel();\n  }\n  /** Closes the autocomplete suggestion panel. */\n\n\n  closePanel() {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n\n      this._closingActionsSubscription.unsubscribe();\n    } // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n\n\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n\n\n  updatePosition() {\n    if (this._overlayAttached) {\n      this._overlayRef.updatePosition();\n    }\n  }\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n\n\n  get panelClosingActions() {\n    return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of()).pipe( // Normalize the output so we return a consistent type.\n    map(event => event instanceof MatOptionSelectionChange ? event : null));\n  }\n  /** The currently active option, coerced to MatOption type. */\n\n\n  get activeOption() {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n  /** Stream of clicks outside of the autocomplete panel. */\n\n\n  _getOutsideClickStream() {\n    return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n      // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n      // fall back to check the first element in the path of the click event.\n      const clickTarget = _getEventTarget(event);\n\n      const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n      const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n      return this._overlayAttached && clickTarget !== this._element.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget);\n    }));\n  } // Implemented as part of ControlValueAccessor.\n\n\n  writeValue(value) {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  setDisabledState(isDisabled) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event) {\n    const keyCode = event.keyCode; // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n\n    if (keyCode === ESCAPE && !hasModifierKey(event)) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n\n      this._resetActiveItem();\n\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n      }\n    }\n  }\n\n  _handleInput(event) {\n    let target = event.target;\n    let value = target.value; // Based on `NumberValueAccessor` from forms.\n\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    } // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n\n\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus() {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n\n      this._attachOverlay();\n\n      this._floatLabel(true);\n    }\n  }\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n\n\n  _floatLabel(shouldAnimate = false) {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n  /** If the label has been manually elevated, return it to its normal state. */\n\n\n  _resetLabel() {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n\n\n  _subscribeToClosingActions() {\n    const firstStable = this._zone.onStable.pipe(take(1));\n\n    const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), // Defer emitting to the stream until the next tick, because changing\n    // bindings in here will cause \"changed after checked\" errors.\n    delay(0)); // When the zone is stable initially, and when the option list changes...\n\n    return merge(firstStable, optionChanges).pipe( // create a new stream of panelClosingActions, replacing any previous streams\n    // that were created, and flatten it so our stream only emits closing events...\n    switchMap(() => {\n      const wasOpen = this.panelOpen;\n\n      this._resetActiveItem();\n\n      this.autocomplete._setVisibility();\n\n      if (this.panelOpen) {\n        this._overlayRef.updatePosition(); // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n        // event, because we may not have emitted it when the panel was attached. This\n        // can happen if the users opens the panel and there are no options, but the\n        // options come in slightly later or as a result of the value changing.\n\n\n        if (wasOpen !== this.panelOpen) {\n          this.autocomplete.opened.emit();\n        }\n      }\n\n      return this.panelClosingActions;\n    }), // when the first closing event occurs...\n    take(1)) // set the value, close the panel, and complete.\n    .subscribe(event => this._setValueAndClose(event));\n  }\n  /** Destroys the autocomplete suggestion panel. */\n\n\n  _destroyPanel() {\n    if (this._overlayRef) {\n      this.closePanel();\n\n      this._overlayRef.dispose();\n\n      this._overlayRef = null;\n    }\n  }\n\n  _setTriggerValue(value) {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value; // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n\n    const inputValue = toDisplay != null ? toDisplay : ''; // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n\n\n  _setValueAndClose(event) {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n\n      this._setTriggerValue(event.source.value);\n\n      this._onChange(event.source.value);\n\n      this._element.nativeElement.focus();\n\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n\n\n  _clearPreviousSelectedOption(skip) {\n    this.autocomplete.options.forEach(option => {\n      if (option !== skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  _attachOverlay() {\n    var _a;\n\n    if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n        id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId()\n      });\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef; // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE && !hasModifierKey(event) || event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey')) {\n          this._closeKeyEventStream.next();\n\n          this._resetActiveItem(); // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n\n\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n      this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n        if (this.panelOpen && overlayRef) {\n          overlayRef.updateSize({\n            width: this._getPanelWidth()\n          });\n        }\n      });\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n\n      overlayRef.updateSize({\n        width: this._getPanelWidth()\n      });\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n\n    this.autocomplete._isOpen = this._overlayAttached = true; // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  _getOverlayConfig() {\n    var _a;\n\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir,\n      panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass\n    });\n  }\n\n  _getOverlayPosition() {\n    const strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n\n    this._setStrategyPositions(strategy);\n\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n  /** Sets the positions on a position strategy based on the directive's input state. */\n\n\n  _setStrategyPositions(positionStrategy) {\n    // Note that we provide horizontal fallback positions, even though by default the dropdown\n    // width matches the input, because consumers can override the width. See #18854.\n    const belowPositions = [{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'end',\n      originY: 'bottom',\n      overlayX: 'end',\n      overlayY: 'top'\n    }]; // The overlay edge connected to the trigger should have squared corners, while\n    // the opposite end has rounded corners. We apply a CSS class to swap the\n    // border-radius based on the overlay position.\n\n    const panelClass = this._aboveClass;\n    const abovePositions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass\n    }, {\n      originX: 'end',\n      originY: 'top',\n      overlayX: 'end',\n      overlayY: 'bottom',\n      panelClass\n    }];\n    let positions;\n\n    if (this.position === 'above') {\n      positions = abovePositions;\n    } else if (this.position === 'below') {\n      positions = belowPositions;\n    } else {\n      positions = [...belowPositions, ...abovePositions];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  _getConnectedElement() {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  _getPanelWidth() {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n  /** Returns the width of the input element, so the panel width can match it. */\n\n\n  _getHostWidth() {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n\n\n  _resetActiveItem() {\n    const autocomplete = this.autocomplete;\n\n    if (autocomplete.autoActiveFirstOption) {\n      // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n      // the former will find the next enabled option, if the first one is disabled.\n      autocomplete._keyManager.setFirstItemActive();\n    } else {\n      autocomplete._keyManager.setActiveItem(-1);\n    }\n  }\n  /** Determines whether the panel can be opened. */\n\n\n  _canOpen() {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n  _getWindow() {\n    var _a;\n\n    return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n  }\n  /** Scrolls to a particular option in the list. */\n\n\n  _scrollToOption(index) {\n    // Given that we are not actually focusing active options, we must manually adjust scroll\n    // to reveal options below the fold. First, we find the offset of the option from the top\n    // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n    // the panel height + the option height, so the active option will be just visible at the\n    // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n    // will become the offset. If that offset is visible within the panel already, the scrollTop is\n    // not adjusted.\n    const autocomplete = this.autocomplete;\n\n    const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      autocomplete._setScrollTop(0);\n    } else if (autocomplete.panel) {\n      const option = autocomplete.options.toArray()[index];\n\n      if (option) {\n        const element = option._getHostElement();\n\n        const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n\n        autocomplete._setScrollTop(newScrollPosition);\n      }\n    }\n  }\n\n}\n\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) {\n  return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8));\n};\n\n_MatAutocompleteTriggerBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _MatAutocompleteTriggerBase,\n  inputs: {\n    position: [\"matAutocompletePosition\", \"position\"],\n    autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n    autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"],\n    autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n    connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"]\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\n_MatAutocompleteTriggerBase.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Overlay\n}, {\n  type: ViewContainerRef\n}, {\n  type: NgZone\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_FORM_FIELD]\n  }, {\n    type: Host\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: ViewportRuler\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n  }]\n}];\n\n_MatAutocompleteTriggerBase.propDecorators = {\n  autocomplete: [{\n    type: Input,\n    args: ['matAutocomplete']\n  }],\n  position: [{\n    type: Input,\n    args: ['matAutocompletePosition']\n  }],\n  connectedTo: [{\n    type: Input,\n    args: ['matAutocompleteConnectedTo']\n  }],\n  autocompleteAttribute: [{\n    type: Input,\n    args: ['autocomplete']\n  }],\n  autocompleteDisabled: [{\n    type: Input,\n    args: ['matAutocompleteDisabled']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc3.Overlay\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc4.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc6.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }, {\n        type: Host\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc5.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    position: [{\n      type: Input,\n      args: ['matAutocompletePosition']\n    }],\n    autocompleteAttribute: [{\n      type: Input,\n      args: ['autocomplete']\n    }],\n    autocompleteDisabled: [{\n      type: Input,\n      args: ['matAutocompleteDisabled']\n    }],\n    autocomplete: [{\n      type: Input,\n      args: ['matAutocomplete']\n    }],\n    connectedTo: [{\n      type: Input,\n      args: ['matAutocompleteConnectedTo']\n    }]\n  });\n})();\n\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n  constructor() {\n    super(...arguments);\n    this._aboveClass = 'mat-autocomplete-panel-above';\n  }\n\n}\n\nMatAutocompleteTrigger.ɵfac = /*@__PURE__*/function () {\n  let ɵMatAutocompleteTrigger_BaseFactory;\n  return function MatAutocompleteTrigger_Factory(t) {\n    return (ɵMatAutocompleteTrigger_BaseFactory || (ɵMatAutocompleteTrigger_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger)))(t || MatAutocompleteTrigger);\n  };\n}();\n\nMatAutocompleteTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatAutocompleteTrigger,\n  selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n  hostAttrs: [1, \"mat-autocomplete-trigger\"],\n  hostVars: 7,\n  hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n        return ctx._handleFocus();\n      })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n        return ctx._onTouched();\n      })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n        return ctx._handleInput($event);\n      })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    }\n  },\n  exportAs: [\"matAutocompleteTrigger\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n    type: Directive,\n    args: [{\n      selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n      host: {\n        'class': 'mat-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n        '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n        '[attr.aria-haspopup]': '!autocompleteDisabled',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': '_handleFocus()',\n        '(blur)': '_onTouched()',\n        '(input)': '_handleInput($event)',\n        '(keydown)': '_handleKeydown($event)'\n      },\n      exportAs: 'matAutocompleteTrigger',\n      providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatAutocompleteModule {}\n\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) {\n  return new (t || MatAutocompleteModule)();\n};\n\nMatAutocompleteModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatAutocompleteModule\n});\nMatAutocompleteModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule, CdkScrollableModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n      exports: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule, MatOptionModule, MatCommonModule],\n      declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, {\n    declarations: function () {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin];\n    },\n    imports: function () {\n      return [OverlayModule, MatOptionModule, MatCommonModule, CommonModule];\n    },\n    exports: function () {\n      return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };","map":{"version":3,"names":["ActiveDescendantKeyManager","coerceBooleanProperty","coerceStringArray","Platform","_getEventTarget","InjectionToken","EventEmitter","Directive","ChangeDetectorRef","ElementRef","Inject","ViewChild","TemplateRef","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","forwardRef","ViewContainerRef","NgZone","Optional","Host","NgModule","mixinDisableRipple","MAT_OPTION_PARENT_COMPONENT","MAT_OPTGROUP","MatOption","MatOptionSelectionChange","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionModule","MatCommonModule","Subscription","Subject","defer","merge","of","fromEvent","DOCUMENT","CommonModule","Overlay","OverlayConfig","OverlayModule","ViewportRuler","CdkScrollableModule","Directionality","ESCAPE","hasModifierKey","ENTER","UP_ARROW","DOWN_ARROW","TAB","TemplatePortal","NG_VALUE_ACCESSOR","MatFormField","MAT_FORM_FIELD","take","switchMap","filter","map","tap","delay","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","formFieldId_r1","id","ctx_r0","ɵɵnextContext","ɵɵproperty","_classList","ɵɵattribute","ariaLabel","_getPanelAriaLabelledby","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","_MatAutocompleteBase","_changeDetectorRef","_elementRef","defaults","platform","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","inertGroups","SAFARI","_autoActiveFirstOption","isOpen","value","classList","length","reduce","className","_setVisibilityClasses","nativeElement","ngAfterContentInit","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","unsubscribe","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","labelId","labelExpression","ariaLabelledby","_visibleClass","_hiddenClass","ɵfac","_MatAutocompleteBase_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","viewQuery","_MatAutocompleteBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","template","first","inputs","panelWidth","outputs","features","ɵɵInheritDefinitionFeature","ctorParameters","undefined","decorators","args","propDecorators","static","ngDevMode","ɵsetClassMetadata","MatAutocomplete","arguments","ɵMatAutocomplete_BaseFactory","MatAutocomplete_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","ɵɵcontentQuery","optionGroups","hostAttrs","disableRipple","exportAs","ɵɵProvidersFeature","provide","useExisting","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","ɵɵprojectionDef","ɵɵtemplate","dependencies","NgClass","styles","encapsulation","changeDetection","descendants","selector","None","OnPush","host","providers","_MatAutocompleteOriginBase","elementRef","_MatAutocompleteOriginBase_Factory","MatAutocompleteOrigin","ɵMatAutocompleteOrigin_BaseFactory","MatAutocompleteOrigin_Factory","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_MatAutocompleteTriggerBase","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_defaults","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","onSelectionChange","onStable","pipe","_scrollStrategy","autocompleteDisabled","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","panelClosingActions","tabOut","_getOutsideClickStream","detachments","activeOption","activeItem","clickTarget","formField","customOrigin","connectedTo","contains","overlayElement","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","preventDefault","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","parseFloat","_previousValue","_handleFocus","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","forEach","selected","deselect","_a","overlayRef","_portal","getLabelId","create","_getOverlayConfig","keydownEvents","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setFirstItemActive","setActiveItem","element","readOnly","defaultView","labelCount","_getHostElement","newScrollPosition","offsetTop","offsetHeight","_MatAutocompleteTriggerBase_Factory","ɵɵNgOnChangesFeature","ɵMatAutocompleteTrigger_BaseFactory","MatAutocompleteTrigger_Factory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","ɵɵlistener","MatAutocompleteTrigger_focusin_HostBindingHandler","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","MatAutocompleteTrigger_keydown_HostBindingHandler","toString","MatAutocompleteModule","MatAutocompleteModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Users/Henry/Desktop/New folder/Atomas2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js"],"sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getEventTarget } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nimport * as ɵngcc6 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {\n});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated using the keyboard. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n}\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) { return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform)); };\n_MatAutocompleteBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteBase, viewQuery: function _MatAutocompleteBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 7);\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, inputs: { displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatAutocompleteBase.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] },\n    { type: Platform }\n];\n_MatAutocompleteBase.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }, { type: ɵngcc1.Platform }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-autocomplete-visible';\n        this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n}\nMatAutocomplete.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocomplete_BaseFactory; return function MatAutocomplete_Factory(t) { return (ɵMatAutocomplete_BaseFactory || (ɵMatAutocomplete_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete)))(t || MatAutocomplete); }; }();\nMatAutocomplete.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n    } }, dependencies: [ɵngcc2.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatAutocomplete.propDecorators = {\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{ selector: 'mat-autocomplete', template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', inputs: ['disableRipple'], host: {\n                    'class': 'mat-autocomplete'\n                }, providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"] }]\n    }], null, { optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) { return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\n_MatAutocompleteOriginBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteOriginBase });\n_MatAutocompleteOriginBase.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n}\nMatAutocompleteOrigin.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocompleteOrigin_BaseFactory; return function MatAutocompleteOrigin_Factory(t) { return (ɵMatAutocompleteOrigin_BaseFactory || (ɵMatAutocompleteOrigin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin)))(t || MatAutocompleteOrigin); }; }();\nMatAutocompleteOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of autocomplete option selections. */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = _getEventTarget(event);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        var _a;\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, { id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId() });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                    this._closeKeyEventStream.next();\n                    this._resetActiveItem();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        var _a;\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir,\n            panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n            // the former will find the next enabled option, if the first one is disabled.\n            autocomplete._keyManager.setFirstItemActive();\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n}\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) { return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8)); };\n_MatAutocompleteTriggerBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteTriggerBase, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatAutocompleteTriggerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\n_MatAutocompleteTriggerBase.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc3.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc4.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.ViewportRuler }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n}\nMatAutocompleteTrigger.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocompleteTrigger_BaseFactory; return function MatAutocompleteTrigger_Factory(t) { return (ɵMatAutocompleteTrigger_BaseFactory || (ɵMatAutocompleteTrigger_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger)))(t || MatAutocompleteTrigger); }; }();\nMatAutocompleteTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); };\nMatAutocompleteModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [OverlayModule,\n        MatOptionModule,\n        MatCommonModule,\n        CommonModule, CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                    CommonModule\n                ],\n                exports: [\n                    MatAutocomplete,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    CdkScrollableModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [OverlayModule,\n        MatOptionModule,\n        MatCommonModule,\n        CommonModule]; }, exports: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}