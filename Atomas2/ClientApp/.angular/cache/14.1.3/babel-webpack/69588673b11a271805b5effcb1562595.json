{"ast":null,"code":"import * as i8 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Self, Attribute, Input, ViewChild, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\n\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.placeholder);\n  }\n}\n\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n  }\n}\n\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 11);\n    i0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 12);\n    i0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction MatSelect_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"div\", 15, 16);\n    i0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_10_Template_div_animation_transformPanel_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8._panelDoneAnimatingStream.next($event.toState));\n    })(\"keydown\", function MatSelect_ng_template_10_Template_div_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10._handleKeydown($event));\n    });\n    i0.ɵɵprojection(2, 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵclassMapInterpolate1(\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open \", ctx_r4._getPanelTheme(), \"\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", \"showing\");\n    i0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n  }\n}\n\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [transition('* => void', query('@transformPanel', [animateChild()], {\n    optional: true\n  }))]),\n\n  /** This animation transforms the select's overlay panel on and off the page. */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    opacity: 0,\n    transform: 'scale(1, 0.8)'\n  })), transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 1,\n    transform: 'scale(1, 1)'\n  }))), transition('* => void', animate('100ms linear', style({\n    opacity: 0\n  })))])\n}; // Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\n\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\n\n\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\n\n\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\n\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\n\n\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\n\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\n\nclass MatSelectChange {\n  constructor(\n  /** Reference to the select that emitted the change event. */\n  source,\n  /** Current value of the select that emitted the event. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n\n} // Boilerplate for applying mixins to MatSelect.\n\n/** @docs-private */\n\n\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n  constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /**\n   * Form control bound to the component.\n   * Implemented as part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  ngControl) {\n    this._elementRef = _elementRef;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n    /**\n     * Emits whenever the component state changes and should cause the parent\n     * form-field to update. Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n\n    this.stateChanges = new Subject();\n  }\n\n}))));\n/** Base class with all of the `MatSelect` functionality. */\n\n\nclass _MatSelectBase extends _MatSelectMixinBase {\n  /** Whether the select is focused. */\n  get focused() {\n    return this._focused || this._panelOpen;\n  }\n  /** Placeholder to be shown if no value has been selected. */\n\n\n  get placeholder() {\n    return this._placeholder;\n  }\n\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /** Whether the component is required. */\n\n\n  get required() {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /** Whether the user should be allowed to select multiple options. */\n\n\n  get multiple() {\n    return this._multiple;\n  }\n\n  set multiple(value) {\n    if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n  /** Whether to center the active option over the trigger. */\n\n\n  get disableOptionCentering() {\n    return this._disableOptionCentering;\n  }\n\n  set disableOptionCentering(value) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n\n\n  get compareWith() {\n    return this._compareWith;\n  }\n\n  set compareWith(fn) {\n    if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectNonFunctionValueError();\n    }\n\n    this._compareWith = fn;\n\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /** Value of the select control. */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(newValue) {\n    const hasAssigned = this._assignValue(newValue);\n\n    if (hasAssigned) {\n      this._onChange(newValue);\n    }\n  }\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n\n\n  get typeaheadDebounceInterval() {\n    return this._typeaheadDebounceInterval;\n  }\n\n  set typeaheadDebounceInterval(value) {\n    this._typeaheadDebounceInterval = coerceNumberProperty(value);\n  }\n  /** Unique id of the element. */\n\n\n  get id() {\n    return this._id;\n  }\n\n  set id(value) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n\n  constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._viewportRuler = _viewportRuler;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._ngZone = _ngZone;\n    this._dir = _dir;\n    this._parentFormField = _parentFormField;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._defaultOptions = _defaultOptions;\n    /** Whether or not the overlay panel is open. */\n\n    this._panelOpen = false;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n\n    this._compareWith = (o1, o2) => o1 === o2;\n    /** Unique id for this input. */\n\n\n    this._uid = `mat-select-${nextUniqueId++}`;\n    /** Current `aria-labelledby` value for the select trigger. */\n\n    this._triggerAriaLabelledBy = null;\n    /** Emits whenever the component is destroyed. */\n\n    this._destroy = new Subject();\n    /** `View -> model callback called when value changes` */\n\n    this._onChange = () => {};\n    /** `View -> model callback called when select has been touched` */\n\n\n    this._onTouched = () => {};\n    /** ID for the DOM node containing the select's value. */\n\n\n    this._valueId = `mat-select-value-${nextUniqueId++}`;\n    /** Emits when the panel element is finished transforming in. */\n\n    this._panelDoneAnimatingStream = new Subject();\n    this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n    this._focused = false;\n    /** A name for this control that can be used by `mat-form-field`. */\n\n    this.controlType = 'mat-select';\n    this._multiple = false;\n    this._disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n    /** Aria label of the select. */\n\n    this.ariaLabel = '';\n    /** Combined stream of all of the child options' change events. */\n\n    this.optionSelectionChanges = defer(() => {\n      const options = this.options;\n\n      if (options) {\n        return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n      }\n\n      return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n    /** Event emitted when the select panel has been toggled. */\n\n    this.openedChange = new EventEmitter();\n    /** Event emitted when the select has been opened. */\n\n    this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n    /** Event emitted when the select has been closed. */\n\n    this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n    /** Event emitted when the selected value has been changed by the user. */\n\n    this.selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n\n    this.valueChange = new EventEmitter();\n    /**\n     * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n     * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n     * panel. Track the modal we have changed so we can undo the changes on destroy.\n     */\n\n    this._trackedModal = null;\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    } // Note that we only want to set this when the defaults pass it in, otherwise it should\n    // stay as `undefined` so that it falls back to the default in the key manager.\n\n\n    if (_defaultOptions?.typeaheadDebounceInterval != null) {\n      this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0; // Force setter to be called in case id was not specified.\n\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple);\n    this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n\n    this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(() => this._panelDoneAnimating(this.panelOpen));\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    const newAriaLabelledby = this._getTriggerAriaLabelledby();\n\n    const ngControl = this.ngControl; // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n    // is computed as a result of a content query which can cause this binding to trigger a\n    // \"changed after checked\" error.\n\n    if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n      const element = this._elementRef.nativeElement;\n      this._triggerAriaLabelledBy = newAriaLabelledby;\n\n      if (newAriaLabelledby) {\n        element.setAttribute('aria-labelledby', newAriaLabelledby);\n      } else {\n        element.removeAttribute('aria-labelledby');\n      }\n    }\n\n    if (ngControl) {\n      // The disabled state might go out of sync if the form group is swapped out. See #17860.\n      if (this._previousControl !== ngControl.control) {\n        if (this._previousControl !== undefined && ngControl.disabled !== null && ngControl.disabled !== this.disabled) {\n          this.disabled = ngControl.disabled;\n        }\n\n        this._previousControl = ngControl.control;\n      }\n\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled'] || changes['userAriaDescribedBy']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n\n    this._destroy.next();\n\n    this._destroy.complete();\n\n    this.stateChanges.complete();\n\n    this._clearFromModal();\n  }\n  /** Toggles the overlay panel open or closed. */\n\n\n  toggle() {\n    this.panelOpen ? this.close() : this.open();\n  }\n  /** Opens the overlay panel. */\n\n\n  open() {\n    if (this._canOpen()) {\n      this._applyModalPanelOwnership();\n\n      this._panelOpen = true;\n\n      this._keyManager.withHorizontalOrientation(null);\n\n      this._highlightCorrectOption();\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * If the autocomplete trigger is inside of an `aria-modal` element, connect\n   * that modal to the options panel with `aria-owns`.\n   *\n   * For some browser + screen reader combinations, when navigation is inside\n   * of an `aria-modal` element, the screen reader treats everything outside\n   * of that modal as hidden or invisible.\n   *\n   * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n   * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n   * from reaching the panel.\n   *\n   * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n   * the options panel. This effectively communicates to assistive technology that the\n   * options panel is part of the same interaction as the modal.\n   *\n   * At time of this writing, this issue is present in VoiceOver.\n   * See https://github.com/angular/components/issues/20694\n   */\n\n\n  _applyModalPanelOwnership() {\n    // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n    // the `LiveAnnouncer` and any other usages.\n    //\n    // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n    // section of the DOM we need to look through. This should cover all the cases we support, but\n    // the selector can be expanded if it turns out to be too narrow.\n    const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n\n    if (!modal) {\n      // Most commonly, the autocomplete trigger is not inside a modal.\n      return;\n    }\n\n    const panelId = `${this.id}-panel`;\n\n    if (this._trackedModal) {\n      removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n    }\n\n    addAriaReferencedId(modal, 'aria-owns', panelId);\n    this._trackedModal = modal;\n  }\n  /** Clears the reference to the listbox overlay element from the modal it was added to. */\n\n\n  _clearFromModal() {\n    if (!this._trackedModal) {\n      // Most commonly, the autocomplete trigger is not used inside a modal.\n      return;\n    }\n\n    const panelId = `${this.id}-panel`;\n    removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n    this._trackedModal = null;\n  }\n  /** Closes the overlay panel and focuses the host element. */\n\n\n  close() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n      this._changeDetectorRef.markForCheck();\n\n      this._onTouched();\n    }\n  }\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n\n\n  writeValue(value) {\n    this._assignValue(value);\n  }\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n\n    this._changeDetectorRef.markForCheck();\n\n    this.stateChanges.next();\n  }\n  /** Whether or not the overlay panel is open. */\n\n\n  get panelOpen() {\n    return this._panelOpen;\n  }\n  /** The currently selected option. */\n\n\n  get selected() {\n    return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n  }\n  /** The value displayed in the trigger. */\n\n\n  get triggerValue() {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      } // TODO(crisbeto): delimiter should be configurable for proper localization.\n\n\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n  /** Whether the element is in RTL mode. */\n\n\n  _isRtl() {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n  /** Handles all keydown events on the select. */\n\n\n  _handleKeydown(event) {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n  /** Handles keyboard events while the select is closed. */\n\n\n  _handleClosedKeydown(event) {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager; // Open the select on ALT + arrow key to match the native <select>\n\n    if (!manager.isTyping() && isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n      manager.onKeydown(event);\n      const selectedOption = this.selected; // Since the value has changed, we need to announce it ourselves.\n\n      if (selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n      }\n    }\n  }\n  /** Handles keyboard events when the selected is open. */\n\n\n  _handleOpenKeydown(event) {\n    const manager = this._keyManager;\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isTyping = manager.isTyping();\n\n    if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close(); // Don't do anything in this case if the user is typing,\n      // because the typing sequence can include the space key.\n    } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n      event.preventDefault();\n\n      manager.activeItem._selectViaInteraction();\n    } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n\n\n  _onBlur() {\n    this._focused = false;\n    this._keyManager?.cancelTypeahead();\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n\n\n  _onAttached() {\n    this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n\n      this._positioningSettled();\n    });\n  }\n  /** Returns the theme to be used on the panel. */\n\n\n  _getPanelTheme() {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n  /** Whether the select has a value. */\n\n\n  get empty() {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl) {\n        this._value = this.ngControl.value;\n      }\n\n      this._setSelectionByValue(this._value);\n\n      this.stateChanges.next();\n    });\n  }\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n\n\n  _setSelectionByValue(value) {\n    this.options.forEach(option => option.setInactiveStyles());\n\n    this._selectionModel.clear();\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      value.forEach(currentValue => this._selectOptionByValue(currentValue));\n\n      this._sortValues();\n    } else {\n      const correspondingOption = this._selectOptionByValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n\n\n      if (correspondingOption) {\n        this._keyManager.updateActiveItem(correspondingOption);\n      } else if (!this.panelOpen) {\n        // Otherwise reset the highlighted option. Note that we only want to do this while\n        // closed, because doing it while open can shift the user's focus unnecessarily.\n        this._keyManager.updateActiveItem(-1);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n\n\n  _selectOptionByValue(value) {\n    const correspondingOption = this.options.find(option => {\n      // Skip options that are already in the model. This allows us to handle cases\n      // where the same primitive value is selected multiple times.\n      if (this._selectionModel.isSelected(option)) {\n        return false;\n      }\n\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value, value);\n      } catch (error) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n  /** Assigns a specific value to the select. Returns whether the value has changed. */\n\n\n  _assignValue(newValue) {\n    // Always re-assign an array, because it might have been mutated.\n    if (newValue !== this._value || this._multiple && Array.isArray(newValue)) {\n      if (this.options) {\n        this._setSelectionByValue(newValue);\n      }\n\n      this._value = newValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  _skipPredicate(item) {\n    return item.disabled;\n  }\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n\n\n  _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(this._typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withHomeAndEnd().withPageUpDown().withAllowedModifierKeys(['shiftKey']).skipPredicate(this._skipPredicate);\n\n    this._keyManager.tabOut.subscribe(() => {\n      if (this.panelOpen) {\n        // Select the active item when tabbing away. This is consistent with how the native\n        // select behaves. Note that we only want to do this in single selection mode.\n        if (!this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        } // Restore focus to the trigger before closing. Ensures that the focus\n        // position won't be lost if the user got focus into the overlay.\n\n\n        this.focus();\n        this.close();\n      }\n    });\n\n    this._keyManager.change.subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n\n\n  _resetOptions() {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    }); // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n\n    merge(...this.options.map(option => option._stateChanges)).pipe(takeUntil(changedOrDestroyed)).subscribe(() => {\n      // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n      // be the result of an expression changing. We have to use `detectChanges` in order\n      // to avoid \"changed after checked\" errors (see #14793).\n      this._changeDetectorRef.detectChanges();\n\n      this.stateChanges.next();\n    });\n  }\n  /** Invoked when an option is clicked. */\n\n\n  _onSelect(option, isUserInput) {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n\n      this._selectionModel.clear();\n\n      if (this.value != null) {\n        this._propagateChanges(option.value);\n      }\n    } else {\n      if (wasSelected !== option.selected) {\n        option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n      }\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n  /** Sorts the selected values in the selected based on their order in the panel. */\n\n\n  _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n      });\n\n      this.stateChanges.next();\n    }\n  }\n  /** Emits change event to set the model value. */\n\n\n  _propagateChanges(fallbackValue) {\n    let valueToEmit = null;\n\n    if (this.multiple) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n\n    this._onChange(valueToEmit);\n\n    this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first *enabled* option.\n   */\n\n\n  _highlightCorrectOption() {\n    if (this._keyManager) {\n      if (this.empty) {\n        // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n        // because it activates the first option that passes the skip predicate, rather than the\n        // first *enabled* option.\n        let firstEnabledOptionIndex = -1;\n\n        for (let index = 0; index < this.options.length; index++) {\n          const option = this.options.get(index);\n\n          if (!option.disabled) {\n            firstEnabledOptionIndex = index;\n            break;\n          }\n        }\n\n        this._keyManager.setActiveItem(firstEnabledOptionIndex);\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n  /** Whether the panel is allowed to open. */\n\n\n  _canOpen() {\n    return !this._panelOpen && !this.disabled && this.options?.length > 0;\n  }\n  /** Focuses the select element. */\n\n\n  focus(options) {\n    this._elementRef.nativeElement.focus(options);\n  }\n  /** Gets the aria-labelledby for the select panel. */\n\n\n  _getPanelAriaLabelledby() {\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelId = this._parentFormField?.getLabelId();\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n  /** Determines the `aria-activedescendant` to be set on the host. */\n\n\n  _getAriaActiveDescendant() {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n  /** Gets the aria-labelledby of the select component trigger. */\n\n\n  _getTriggerAriaLabelledby() {\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelId = this._parentFormField?.getLabelId();\n    let value = (labelId ? labelId + ' ' : '') + this._valueId;\n\n    if (this.ariaLabelledby) {\n      value += ' ' + this.ariaLabelledby;\n    }\n\n    return value;\n  }\n  /** Called when the overlay panel is done animating. */\n\n\n  _panelDoneAnimating(isOpen) {\n    this.openedChange.emit(isOpen);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  setDescribedByIds(ids) {\n    if (ids.length) {\n      this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n    } else {\n      this._elementRef.nativeElement.removeAttribute('aria-describedby');\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get shouldLabelFloat() {\n    return this._panelOpen || !this.empty || this._focused && !!this._placeholder;\n  }\n\n}\n\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) {\n  return new (t || _MatSelectBase)(i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.ErrorStateMatcher), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(i4.NgForm, 8), i0.ɵɵdirectiveInject(i4.FormGroupDirective, 8), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), i0.ɵɵdirectiveInject(i4.NgControl, 10), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i5.LiveAnnouncer), i0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8));\n};\n\n_MatSelectBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatSelectBase,\n  viewQuery: function _MatSelectBase_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n      i0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n    }\n  },\n  inputs: {\n    userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"],\n    panelClass: \"panelClass\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    multiple: \"multiple\",\n    disableOptionCentering: \"disableOptionCentering\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    errorStateMatcher: \"errorStateMatcher\",\n    typeaheadDebounceInterval: \"typeaheadDebounceInterval\",\n    sortComparator: \"sortComparator\",\n    id: \"id\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    _openedStream: \"opened\",\n    _closedStream: \"closed\",\n    selectionChange: \"selectionChange\",\n    valueChange: \"valueChange\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatSelectBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i1.ViewportRuler\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i2.ErrorStateMatcher\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i6.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }]\n    }, {\n      type: i4.NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SELECT_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i5.LiveAnnouncer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_SELECT_CONFIG]\n      }]\n    }];\n  }, {\n    userAriaDescribedBy: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    trigger: [{\n      type: ViewChild,\n      args: ['trigger']\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    _overlayDir: [{\n      type: ViewChild,\n      args: [CdkConnectedOverlay]\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disableOptionCentering: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    typeaheadDebounceInterval: [{\n      type: Input\n    }],\n    sortComparator: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n\n\nclass MatSelectTrigger {}\n\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n  return new (t || MatSelectTrigger)();\n};\n\nMatSelectTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSelectTrigger,\n  selectors: [[\"mat-select-trigger\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_SELECT_TRIGGER,\n    useExisting: MatSelectTrigger\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectTrigger, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-select-trigger',\n      providers: [{\n        provide: MAT_SELECT_TRIGGER,\n        useExisting: MatSelectTrigger\n      }]\n    }]\n  }], null, null);\n})();\n\nclass MatSelect extends _MatSelectBase {\n  constructor() {\n    super(...arguments);\n    /**\n     * Width of the panel. If set to `auto`, the panel will match the trigger width.\n     * If set to null or an empty string, the panel will grow to match the longest option's text.\n     */\n\n    this.panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined' ? this._defaultOptions.panelWidth : 'auto';\n    this._positions = [{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'end',\n      originY: 'bottom',\n      overlayX: 'end',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass: 'mat-mdc-select-panel-above'\n    }, {\n      originX: 'end',\n      originY: 'top',\n      overlayX: 'end',\n      overlayY: 'bottom',\n      panelClass: 'mat-mdc-select-panel-above'\n    }];\n    this._hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false; // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n\n    this._skipPredicate = option => {\n      if (this.panelOpen) {\n        // Support keyboard focusing disabled options in an ARIA listbox.\n        return false;\n      } // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n      // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n      // closed.\n\n\n      return option.disabled;\n    };\n  }\n\n  get shouldLabelFloat() {\n    // Since the panel doesn't overlap the trigger, we\n    // want the label to only float when there's a value.\n    return this.panelOpen || !this.empty || this.focused && !!this.placeholder;\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n\n        this._changeDetectorRef.detectChanges();\n      }\n    });\n  }\n\n  open() {\n    // It's important that we read this as late as possible, because doing so earlier will\n    // return a different element since it's based on queries in the form field which may\n    // not have run yet. Also this needs to be assigned before we measure the overlay width.\n    if (this._parentFormField) {\n      this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n    }\n\n    this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n    super.open(); // Required for the MDC form field to pick up when the overlay has been opened.\n\n    this.stateChanges.next();\n  }\n\n  close() {\n    super.close(); // Required for the MDC form field to pick up when the overlay has been closed.\n\n    this.stateChanges.next();\n  }\n  /** Scrolls the active option into view. */\n\n\n  _scrollOptionIntoView(index) {\n    const option = this.options.toArray()[index];\n\n    if (option) {\n      const panel = this.panel.nativeElement;\n\n      const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n\n      const element = option._getHostElement();\n\n      if (index === 0 && labelCount === 1) {\n        // If we've got one group label before the option and we're at the top option,\n        // scroll the list to the top. This is better UX than scrolling the list to the\n        // top of the option, because it allows the user to read the top group's label.\n        panel.scrollTop = 0;\n      } else {\n        panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n      }\n    }\n  }\n\n  _positioningSettled() {\n    this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n  }\n\n  _getChangeEvent(value) {\n    return new MatSelectChange(this, value);\n  }\n  /** Gets how wide the overlay panel should be. */\n\n\n  _getOverlayWidth(preferredOrigin) {\n    if (this.panelWidth === 'auto') {\n      const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin ? preferredOrigin.elementRef : preferredOrigin || this._elementRef;\n      return refToMeasure.nativeElement.getBoundingClientRect().width;\n    }\n\n    return this.panelWidth === null ? '' : this.panelWidth;\n  }\n  /** Whether checkmark indicator for single-selection options is hidden. */\n\n\n  get hideSingleSelectionIndicator() {\n    return this._hideSingleSelectionIndicator;\n  }\n\n  set hideSingleSelectionIndicator(value) {\n    this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n\n    this._syncParentProperties();\n  }\n  /** Syncs the parent state with the individual options. */\n\n\n  _syncParentProperties() {\n    if (this.options) {\n      for (const option of this.options) {\n        option._changeDetectorRef.markForCheck();\n      }\n    }\n  }\n\n}\n\nMatSelect.ɵfac = /* @__PURE__ */function () {\n  let ɵMatSelect_BaseFactory;\n  return function MatSelect_Factory(t) {\n    return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = i0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect);\n  };\n}();\n\nMatSelect.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSelect,\n  selectors: [[\"mat-select\"]],\n  contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"listbox\", \"ngSkipHydration\", \"\", 1, \"mat-mdc-select\"],\n  hostVars: 19,\n  hostBindings: function MatSelect_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n      i0.ɵɵclassProp(\"mat-mdc-select-disabled\", ctx.disabled)(\"mat-mdc-select-invalid\", ctx.errorState)(\"mat-mdc-select-required\", ctx.required)(\"mat-mdc-select-empty\", ctx.empty)(\"mat-mdc-select-multiple\", ctx.multiple);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    panelWidth: \"panelWidth\",\n    hideSingleSelectionIndicator: \"hideSingleSelectionIndicator\"\n  },\n  exportAs: [\"matSelect\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatSelect\n  }, {\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatSelect\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c3,\n  decls: 11,\n  vars: 10,\n  consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-mdc-select-trigger\", 3, \"click\"], [\"fallbackOverlayOrigin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-mdc-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-mdc-select-placeholder mat-mdc-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-mdc-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-mdc-select-arrow-wrapper\"], [1, \"mat-mdc-select-arrow\"], [\"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", \"focusable\", \"false\", \"aria-hidden\", \"true\"], [\"d\", \"M7 10l5 5 5-5z\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayWidth\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-mdc-select-placeholder\", \"mat-mdc-select-min-line\"], [1, \"mat-mdc-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-mdc-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-mdc-select-min-line\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n  template: function MatSelect_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c2);\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n        return ctx.toggle();\n      });\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n      i0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 5)(7, \"div\", 6);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(8, \"svg\", 7);\n      i0.ɵɵelement(9, \"path\", 8);\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵtemplate(10, MatSelect_ng_template_10_Template, 3, 9, \"ng-template\", 9);\n      i0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_10_listener() {\n        return ctx.close();\n      })(\"attach\", function MatSelect_Template_ng_template_attach_10_listener() {\n        return ctx._onAttached();\n      })(\"detach\", function MatSelect_Template_ng_template_detach_10_listener() {\n        return ctx.close();\n      });\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n      i0.ɵɵattribute(\"id\", ctx._valueId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", true);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", false);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", ctx._preferredOverlayOrigin || _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayWidth\", ctx._overlayWidth);\n    }\n  },\n  dependencies: [i7.NgClass, i7.NgSwitch, i7.NgSwitchCase, i7.NgSwitchDefault, i8.CdkConnectedOverlay, i8.CdkOverlayOrigin],\n  styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSelectAnimations.transformPanel]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelect, [{\n    type: Component,\n    args: [{\n      selector: 'mat-select',\n      exportAs: 'matSelect',\n      inputs: ['disabled', 'disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'role': 'combobox',\n        'aria-autocomplete': 'none',\n        'aria-haspopup': 'listbox',\n        'class': 'mat-mdc-select',\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n        '[attr.aria-expanded]': 'panelOpen',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n        'ngSkipHydration': '',\n        '[class.mat-mdc-select-disabled]': 'disabled',\n        '[class.mat-mdc-select-invalid]': 'errorState',\n        '[class.mat-mdc-select-required]': 'required',\n        '[class.mat-mdc-select-empty]': 'empty',\n        '[class.mat-mdc-select-multiple]': 'multiple',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()'\n      },\n      animations: [matSelectAnimations.transformPanel],\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatSelect\n      }, {\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatSelect\n      }],\n      template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n      styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"]\n    }]\n  }], null, {\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    customTrigger: [{\n      type: ContentChild,\n      args: [MAT_SELECT_TRIGGER]\n    }],\n    panelWidth: [{\n      type: Input\n    }],\n    hideSingleSelectionIndicator: [{\n      type: Input\n    }]\n  });\n})();\n\nclass MatSelectModule {}\n\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) {\n  return new (t || MatSelectModule)();\n};\n\nMatSelectModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatSelectModule\n});\nMatSelectModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n  imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n      exports: [CdkScrollableModule, MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n      declarations: [MatSelect, MatSelectTrigger],\n      providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };","map":{"version":3,"names":["i8","Overlay","CdkConnectedOverlay","CdkOverlayOrigin","OverlayModule","i7","CommonModule","i0","InjectionToken","EventEmitter","Directive","Optional","Inject","Self","Attribute","Input","ViewChild","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","NgModule","i2","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatCommonModule","i6","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","i1","CdkScrollableModule","i5","removeAriaReferencedId","addAriaReferencedId","ActiveDescendantKeyManager","i3","coerceBooleanProperty","coerceNumberProperty","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","i4","Validators","Subject","defer","merge","startWith","switchMap","take","filter","map","distinctUntilChanged","takeUntil","trigger","transition","query","animateChild","state","style","animate","matSelectAnimations","transformPanelWrap","optional","transformPanel","opacity","transform","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MAT_SELECT_TRIGGER","MatSelectChange","constructor","source","value","_MatSelectMixinBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","_MatSelectBase","focused","_focused","_panelOpen","placeholder","_placeholder","next","required","_required","control","hasValidator","multiple","_multiple","_selectionModel","ngDevMode","disableOptionCentering","_disableOptionCentering","compareWith","_compareWith","fn","_initializeSelection","_value","newValue","hasAssigned","_assignValue","_onChange","typeaheadDebounceInterval","_typeaheadDebounceInterval","id","_id","_uid","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","o1","o2","_triggerAriaLabelledBy","_destroy","_onTouched","_valueId","_panelDoneAnimatingStream","_overlayPanelClass","overlayPanelClass","controlType","ariaLabel","optionSelectionChanges","options","changes","pipe","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","_trackedModal","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","ngOnInit","subscribe","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","_previousControl","undefined","disabled","updateErrorState","ngOnChanges","_keyManager","withTypeAhead","ngOnDestroy","destroy","complete","_clearFromModal","toggle","close","open","_canOpen","_applyModalPanelOwnership","withHorizontalOrientation","_highlightCorrectOption","markForCheck","modal","closest","panelId","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","triggerValue","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_onFocus","_onBlur","cancelTypeahead","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","_getPanelTheme","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","_skipPredicate","item","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","firstEnabledOptionIndex","index","length","get","_getPanelAriaLabelledby","labelId","getLabelId","labelExpression","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","ɵfac","ViewportRuler","ChangeDetectorRef","NgZone","ErrorStateMatcher","ElementRef","Directionality","NgForm","FormGroupDirective","NgControl","LiveAnnouncer","ɵdir","type","decorators","MatFormField","args","userAriaDescribedBy","panelClass","errorStateMatcher","MatSelectTrigger","useExisting","selector","providers","MatSelect","arguments","panelWidth","_positions","originX","originY","overlayX","overlayY","_hideSingleSelectionIndicator","hideSingleSelectionIndicator","_overlayWidth","_getOverlayWidth","_preferredOverlayOrigin","getConnectedOverlayOrigin","labelCount","optionGroups","_getHostElement","scrollTop","offsetTop","offsetHeight","preferredOrigin","refToMeasure","getBoundingClientRect","width","_syncParentProperties","ɵcmp","NgClass","NgSwitch","NgSwitchCase","NgSwitchDefault","exportAs","inputs","encapsulation","None","changeDetection","OnPush","host","animations","template","styles","descendants","customTrigger","MatSelectModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/Users/Henry/Desktop/New folder/Atomas2/node_modules/@angular/material/fesm2022/select.mjs"],"sourcesContent":["import * as i8 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Self, Attribute, Input, ViewChild, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)',\n        })),\n        transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)',\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\nlet nextUniqueId = 0;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form-field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n}))));\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `aria-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (_defaultOptions?.typeaheadDebounceInterval != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n        this._clearFromModal();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._applyModalPanelOwnership();\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the reference to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (!this._trackedModal) {\n            // Most commonly, the autocomplete trigger is not used inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        this._trackedModal = null;\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    _skipPredicate(item) {\n        return item.disabled;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey'])\n            .skipPredicate(this._skipPredicate);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n                // because it activates the first option that passes the skip predicate, rather than the\n                // first *enabled* option.\n                let firstEnabledOptionIndex = -1;\n                for (let index = 0; index < this.options.length; index++) {\n                    const option = this.options.get(index);\n                    if (!option.disabled) {\n                        firstEnabledOptionIndex = index;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(firstEnabledOptionIndex);\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatSelectBase, inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i4.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i6.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }, { type: i4.NgControl, decorators: [{\n                    type: Self\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_SELECT_SCROLL_STRATEGY]\n                }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_SELECT_CONFIG]\n                }] }]; }, propDecorators: { userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Width of the panel. If set to `auto`, the panel will match the trigger width.\n         * If set to null or an empty string, the panel will grow to match the longest option's text.\n         */\n        this.panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined'\n            ? this._defaultOptions.panelWidth\n            : 'auto';\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'end',\n                originY: 'bottom',\n                overlayX: 'end',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n            {\n                originX: 'end',\n                originY: 'top',\n                overlayX: 'end',\n                overlayY: 'bottom',\n                panelClass: 'mat-mdc-select-panel-above',\n            },\n        ];\n        this._hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n        // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n        // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n        // recommendation.\n        //\n        // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n        // makes a few exceptions for compound widgets.\n        //\n        // From [Developing a Keyboard Interface](\n        // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n        //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n        //   Listbox...\"\n        //\n        // The user can focus disabled options using the keyboard, but the user cannot click disabled\n        // options.\n        this._skipPredicate = (option) => {\n            if (this.panelOpen) {\n                // Support keyboard focusing disabled options in an ARIA listbox.\n                return false;\n            }\n            // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n            // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n            // closed.\n            return option.disabled;\n        };\n    }\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    open() {\n        // It's important that we read this as late as possible, because doing so earlier will\n        // return a different element since it's based on queries in the form field which may\n        // not have run yet. Also this needs to be assigned before we measure the overlay width.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n        this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n        super.open();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n    }\n    close() {\n        super.close();\n        // Required for the MDC form field to pick up when the overlay has been closed.\n        this.stateChanges.next();\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth(preferredOrigin) {\n        if (this.panelWidth === 'auto') {\n            const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin\n                ? preferredOrigin.elementRef\n                : preferredOrigin || this._elementRef;\n            return refToMeasure.nativeElement.getBoundingClientRect().width;\n        }\n        return this.panelWidth === null ? '' : this.panelWidth;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n        this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", panelWidth: \"panelWidth\", hideSingleSelectionIndicator: \"hideSingleSelectionIndicator\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"listbox\", \"ngSkipHydration\": \"\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"], dependencies: [{ kind: \"directive\", type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i7.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i7.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i7.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { kind: \"directive\", type: i8.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: i8.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }], animations: [matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        'ngSkipHydration': '',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-mdc-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-mdc-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-mdc-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color);font-family:var(--mat-select-trigger-text-font);line-height:var(--mat-select-trigger-text-line-height);font-size:var(--mat-select-trigger-text-size);font-weight:var(--mat-select-trigger-text-weight);letter-spacing:var(--mat-select-trigger-text-tracking)}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color)}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:translateY(-8px)}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color)}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow{color:var(--mat-select-invalid-arrow-color)}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color)}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .cdk-high-contrast-active .mat-mdc-select-arrow svg{fill:GrayText}div.mat-mdc-select-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color)}.cdk-high-contrast-active div.mat-mdc-select-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color)}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], panelWidth: [{\n                type: Input\n            }], hideSingleSelectionIndicator: [{\n                type: Input\n            }] } });\n\nclass MatSelectModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n            MatFormFieldModule,\n            MatSelect,\n            MatSelectTrigger,\n            MatOptionModule,\n            MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule,\n            MatFormFieldModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}