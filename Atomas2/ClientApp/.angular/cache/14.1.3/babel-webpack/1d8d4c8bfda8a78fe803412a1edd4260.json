{"ast":null,"code":"import * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, Optional, Inject, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injectable, ANIMATION_MODULE_TYPE as ANIMATION_MODULE_TYPE$1, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { numbers, cssClasses } from '@material/dialog';\nimport { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/portal';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { MatCommonModule } from '@angular/material/core';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\n\nfunction MatDialogContainer_ng_template_2_Template(rf, ctx) {}\n\nclass MatDialogConfig {\n  constructor() {\n    /** The ARIA role of the dialog element. */\n    this.role = 'dialog';\n    /** Custom class for the overlay pane. */\n\n    this.panelClass = '';\n    /** Whether the dialog has a backdrop. */\n\n    this.hasBackdrop = true;\n    /** Custom class for the backdrop. */\n\n    this.backdropClass = '';\n    /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n\n    this.disableClose = false;\n    /** Width of the dialog. */\n\n    this.width = '';\n    /** Height of the dialog. */\n\n    this.height = '';\n    /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n\n    this.maxWidth = '80vw';\n    /** Data being injected into the child component. */\n\n    this.data = null;\n    /** ID of the element that describes the dialog. */\n\n    this.ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n\n    this.ariaLabelledBy = null;\n    /** Aria label to assign to the dialog element. */\n\n    this.ariaLabel = null;\n    /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n\n    this.ariaModal = true;\n    /**\n     * Where the dialog should focus on open.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n     * AutoFocusTarget instead.\n     */\n\n    this.autoFocus = 'first-tabbable';\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n\n    this.restoreFocus = true;\n    /** Whether to wait for the opening animation to finish before trapping focus. */\n\n    this.delayFocusTrap = true;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n\n    this.closeOnNavigation = true; // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n  }\n\n}\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n// tslint:disable-next-line:validate-decorators\n\n\nclass _MatDialogContainerBase extends CdkDialogContainer {\n  constructor(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor) {\n    super(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);\n    /** Emits when an animation state changes. */\n\n    this._animationStateChanged = new EventEmitter();\n  }\n\n  _captureInitialFocus() {\n    if (!this._config.delayFocusTrap) {\n      this._trapFocus();\n    }\n  }\n  /**\n   * Callback for when the open dialog animation has finished. Intended to\n   * be called by sub-classes that use different animation implementations.\n   */\n\n\n  _openAnimationDone(totalTime) {\n    if (this._config.delayFocusTrap) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.next({\n      state: 'opened',\n      totalTime\n    });\n  }\n\n}\n\n_MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) {\n  return new (t || _MatDialogContainerBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MatDialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.OverlayRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n};\n\n_MatDialogContainerBase.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: _MatDialogContainerBase,\n  selectors: [[\"ng-component\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function _MatDialogContainerBase_Template(rf, ctx) {},\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatDialogContainerBase, [{\n    type: Component,\n    args: [{\n      template: ''\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }, {\n      type: i1.InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1$1.OverlayRef\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, null);\n})();\n\nconst TRANSITION_DURATION_PROPERTY = '--mat-dialog-transition-duration'; // TODO(mmalerba): Remove this function after animation durations are required\n//  to be numbers.\n\n/**\n * Converts a CSS time string to a number in ms. If the given time is already a\n * number, it is assumed to be in ms.\n */\n\nfunction parseCssTime(time) {\n  if (time == null) {\n    return null;\n  }\n\n  if (typeof time === 'number') {\n    return time;\n  }\n\n  if (time.endsWith('ms')) {\n    return coerceNumberProperty(time.substring(0, time.length - 2));\n  }\n\n  if (time.endsWith('s')) {\n    return coerceNumberProperty(time.substring(0, time.length - 1)) * 1000;\n  }\n\n  if (time === '0') {\n    return 0;\n  }\n\n  return null; // anything else is invalid.\n}\n/**\n * Internal component that wraps user-provided dialog content in a MDC dialog.\n * @docs-private\n */\n\n\nclass MatDialogContainer extends _MatDialogContainerBase {\n  constructor(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, _animationMode, focusMonitor) {\n    var _a, _b;\n\n    super(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, focusMonitor);\n    this._animationMode = _animationMode;\n    /** Whether animations are enabled. */\n\n    this._animationsEnabled = this._animationMode !== 'NoopAnimations';\n    /** Host element of the dialog container component. */\n\n    this._hostElement = this._elementRef.nativeElement;\n    /** Duration of the dialog open animation. */\n\n    this._openAnimationDuration = this._animationsEnabled ? (_a = parseCssTime(this._config.enterAnimationDuration)) !== null && _a !== void 0 ? _a : numbers.DIALOG_ANIMATION_OPEN_TIME_MS : 0;\n    /** Duration of the dialog close animation. */\n\n    this._closeAnimationDuration = this._animationsEnabled ? (_b = parseCssTime(this._config.exitAnimationDuration)) !== null && _b !== void 0 ? _b : numbers.DIALOG_ANIMATION_CLOSE_TIME_MS : 0;\n    /** Current timer for dialog animations. */\n\n    this._animationTimer = null;\n    /**\n     * Completes the dialog open by clearing potential animation classes, trapping\n     * focus and emitting an opened event.\n     */\n\n    this._finishDialogOpen = () => {\n      this._clearAnimationClasses();\n\n      this._openAnimationDone(this._openAnimationDuration);\n    };\n    /**\n     * Completes the dialog close by clearing potential animation classes, restoring\n     * focus and emitting a closed event.\n     */\n\n\n    this._finishDialogClose = () => {\n      this._clearAnimationClasses();\n\n      this._animationStateChanged.emit({\n        state: 'closed',\n        totalTime: this._closeAnimationDuration\n      });\n    };\n  }\n\n  _contentAttached() {\n    // Delegate to the original dialog-container initialization (i.e. saving the\n    // previous element, setting up the focus trap and moving focus to the container).\n    super._contentAttached(); // Note: Usually we would be able to use the MDC dialog foundation here to handle\n    // the dialog animation for us, but there are a few reasons why we just leverage\n    // their styles and not use the runtime foundation code:\n    //   1. Foundation does not allow us to disable animations.\n    //   2. Foundation contains unnecessary features we don't need and aren't\n    //      tree-shakeable. e.g. background scrim, keyboard event handlers for ESC button.\n    //   3. Foundation uses unnecessary timers for animations to work around limitations\n    //      in React's `setState` mechanism.\n    //      https://github.com/material-components/material-components-web/pull/3682.\n\n\n    this._startOpenAnimation();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._animationTimer !== null) {\n      clearTimeout(this._animationTimer);\n    }\n  }\n  /** Starts the dialog open animation if enabled. */\n\n\n  _startOpenAnimation() {\n    this._animationStateChanged.emit({\n      state: 'opening',\n      totalTime: this._openAnimationDuration\n    });\n\n    if (this._animationsEnabled) {\n      // One would expect that the open class is added once the animation finished, but MDC\n      // uses the open class in combination with the opening class to start the animation.\n      this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._openAnimationDuration}ms`);\n\n      this._hostElement.classList.add(cssClasses.OPENING);\n\n      this._hostElement.classList.add(cssClasses.OPEN);\n\n      this._waitForAnimationToComplete(this._openAnimationDuration, this._finishDialogOpen);\n    } else {\n      this._hostElement.classList.add(cssClasses.OPEN); // Note: We could immediately finish the dialog opening here with noop animations,\n      // but we defer until next tick so that consumers can subscribe to `afterOpened`.\n      // Executing this immediately would mean that `afterOpened` emits synchronously\n      // on `dialog.open` before the consumer had a change to subscribe to `afterOpened`.\n\n\n      Promise.resolve().then(() => this._finishDialogOpen());\n    }\n  }\n  /**\n   * Starts the exit animation of the dialog if enabled. This method is\n   * called by the dialog ref.\n   */\n\n\n  _startExitAnimation() {\n    this._animationStateChanged.emit({\n      state: 'closing',\n      totalTime: this._closeAnimationDuration\n    });\n\n    this._hostElement.classList.remove(cssClasses.OPEN);\n\n    if (this._animationsEnabled) {\n      this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._openAnimationDuration}ms`);\n\n      this._hostElement.classList.add(cssClasses.CLOSING);\n\n      this._waitForAnimationToComplete(this._closeAnimationDuration, this._finishDialogClose);\n    } else {\n      // This subscription to the `OverlayRef#backdropClick` observable in the `DialogRef` is\n      // set up before any user can subscribe to the backdrop click. The subscription triggers\n      // the dialog close and this method synchronously. If we'd synchronously emit the `CLOSED`\n      // animation state event if animations are disabled, the overlay would be disposed\n      // immediately and all other subscriptions to `DialogRef#backdropClick` would be silently\n      // skipped. We work around this by waiting with the dialog close until the next tick when\n      // all subscriptions have been fired as expected. This is not an ideal solution, but\n      // there doesn't seem to be any other good way. Alternatives that have been considered:\n      //   1. Deferring `DialogRef.close`. This could be a breaking change due to a new microtask.\n      //      Also this issue is specific to the MDC implementation where the dialog could\n      //      technically be closed synchronously. In the non-MDC one, Angular animations are used\n      //      and closing always takes at least a tick.\n      //   2. Ensuring that user subscriptions to `backdropClick`, `keydownEvents` in the dialog\n      //      ref are first. This would solve the issue, but has the risk of memory leaks and also\n      //      doesn't solve the case where consumers call `DialogRef.close` in their subscriptions.\n      // Based on the fact that this is specific to the MDC-based implementation of the dialog\n      // animations, the defer is applied here.\n      Promise.resolve().then(() => this._finishDialogClose());\n    }\n  }\n  /** Clears all dialog animation classes. */\n\n\n  _clearAnimationClasses() {\n    this._hostElement.classList.remove(cssClasses.OPENING);\n\n    this._hostElement.classList.remove(cssClasses.CLOSING);\n  }\n\n  _waitForAnimationToComplete(duration, callback) {\n    if (this._animationTimer !== null) {\n      clearTimeout(this._animationTimer);\n    } // Note that we want this timer to run inside the NgZone, because we want\n    // the related events like `afterClosed` to be inside the zone as well.\n\n\n    this._animationTimer = setTimeout(callback, duration);\n  }\n\n}\n\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) {\n  return new (t || MatDialogContainer)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MatDialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.OverlayRef), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n};\n\nMatDialogContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatDialogContainer,\n  selectors: [[\"mat-dialog-container\"]],\n  hostAttrs: [\"tabindex\", \"-1\", 1, \"mat-mdc-dialog-container\", \"mdc-dialog\"],\n  hostVars: 8,\n  hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx._config.id);\n      i0.ɵɵattribute(\"aria-modal\", ctx._config.ariaModal)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      i0.ɵɵclassProp(\"_mat-animation-noopable\", !ctx._animationsEnabled);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 0,\n  consts: [[1, \"mdc-dialog__container\"], [1, \"mat-mdc-dialog-surface\", \"mdc-dialog__surface\"], [\"cdkPortalOutlet\", \"\"]],\n  template: function MatDialogContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵtemplate(2, MatDialogContainer_ng_template_2_Template, 0, 0, \"ng-template\", 2);\n      i0.ɵɵelementEnd()();\n    }\n  },\n  dependencies: [i4.CdkPortalOutlet],\n  styles: [\".mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-dialog,.mdc-dialog__scrim{position:fixed;top:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;width:100%;height:100%}.mdc-dialog{display:none;z-index:var(--mdc-dialog-z-index, 7)}.mdc-dialog .mdc-dialog__content{padding:20px 24px 20px 24px}.mdc-dialog .mdc-dialog__surface{min-width:280px}@media(max-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:calc(100vw - 32px)}}@media(min-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:560px}}.mdc-dialog .mdc-dialog__surface{max-height:calc(100% - 32px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-width:none}@media(max-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px;width:560px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 112px)}}@media(max-width: 720px)and (min-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:560px}}@media(max-width: 720px)and (max-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:calc(100vh - 160px)}}@media(max-width: 720px)and (min-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px}}@media(max-width: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-height: 400px),(max-width: 600px),(min-width: 720px)and (max-height: 400px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{height:100%;max-height:100vh;max-width:100vw;width:100vw;border-radius:0}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{order:-1;left:-12px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__header{padding:0 16px 9px;justify-content:flex-start}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__title{margin-left:calc(16px - 2 * 12px)}}@media(min-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 400px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}.mdc-dialog.mdc-dialog__scrim--hidden .mdc-dialog__scrim{opacity:0}.mdc-dialog__scrim{opacity:0;z-index:-1}.mdc-dialog__container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;transform:scale(0.8);opacity:0;pointer-events:none}.mdc-dialog__surface{position:relative;display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;max-width:100%;max-height:100%;pointer-events:auto;overflow-y:auto}.mdc-dialog__surface .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}[dir=rtl] .mdc-dialog__surface,.mdc-dialog__surface[dir=rtl]{text-align:right}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-dialog__surface{outline:2px solid windowText}}.mdc-dialog__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-dialog__surface::before{border-color:CanvasText}}@media screen and (-ms-high-contrast: active),screen and (-ms-high-contrast: none){.mdc-dialog__surface::before{content:none}}.mdc-dialog__title{display:block;margin-top:0;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:0 24px 9px}.mdc-dialog__title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mdc-dialog__title,.mdc-dialog__title[dir=rtl]{text-align:right}.mdc-dialog--scrollable .mdc-dialog__title{margin-bottom:1px;padding-bottom:15px}.mdc-dialog--fullscreen .mdc-dialog__header{align-items:baseline;border-bottom:1px solid rgba(0,0,0,0);display:inline-flex;justify-content:space-between;padding:0 24px 9px;z-index:1}@media screen and (forced-colors: active){.mdc-dialog--fullscreen .mdc-dialog__header{border-bottom-color:CanvasText}}.mdc-dialog--fullscreen .mdc-dialog__header .mdc-dialog__close{right:-12px}.mdc-dialog--fullscreen .mdc-dialog__title{margin-bottom:0;padding:0;border-bottom:0}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__title{border-bottom:0;margin-bottom:0}.mdc-dialog--fullscreen .mdc-dialog__close{top:5px}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--fullscreen--titleless .mdc-dialog__close{margin-top:4px}.mdc-dialog--fullscreen--titleless.mdc-dialog--scrollable .mdc-dialog__close{margin-top:0}.mdc-dialog__content{flex-grow:1;box-sizing:border-box;margin:0;overflow:auto}.mdc-dialog__content>:first-child{margin-top:0}.mdc-dialog__content>:last-child{margin-bottom:0}.mdc-dialog__title+.mdc-dialog__content,.mdc-dialog__header+.mdc-dialog__content{padding-top:0}.mdc-dialog--scrollable .mdc-dialog__title+.mdc-dialog__content{padding-top:8px;padding-bottom:8px}.mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:6px 0 0}.mdc-dialog--scrollable .mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:0}.mdc-dialog__actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--stacked .mdc-dialog__actions{flex-direction:column;align-items:flex-end}.mdc-dialog__button{margin-left:8px;margin-right:0;max-width:100%;text-align:right}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{margin-left:0;margin-right:8px}.mdc-dialog__button:first-child{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button:first-child,.mdc-dialog__button:first-child[dir=rtl]{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{text-align:left}.mdc-dialog--stacked .mdc-dialog__button:not(:first-child){margin-top:12px}.mdc-dialog--open,.mdc-dialog--opening,.mdc-dialog--closing{display:flex}.mdc-dialog--opening .mdc-dialog__scrim{transition:opacity 150ms linear}.mdc-dialog--opening .mdc-dialog__container{transition:opacity 75ms linear,transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-dialog--closing .mdc-dialog__scrim,.mdc-dialog--closing .mdc-dialog__container{transition:opacity 75ms linear}.mdc-dialog--closing .mdc-dialog__container{transform:none}.mdc-dialog--open .mdc-dialog__scrim{opacity:1}.mdc-dialog--open .mdc-dialog__container{transform:none;opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim{opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{transition:opacity 75ms linear}.mdc-dialog--open.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim{transition:opacity 150ms linear}.mdc-dialog__surface-scrim{display:none;opacity:0;position:absolute;width:100%;height:100%;z-index:1}.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{display:block}.mdc-dialog-scroll-lock{overflow:hidden}.mdc-dialog--no-content-padding .mdc-dialog__content{padding:0}.mdc-dialog--sheet .mdc-dialog__close{right:12px;top:9px;position:absolute;z-index:1}.mdc-dialog__scrim--removed{pointer-events:none}.mdc-dialog__scrim--removed .mdc-dialog__scrim,.mdc-dialog__scrim--removed .mdc-dialog__surface-scrim{display:none}.mat-mdc-dialog-content{max-height:65vh}.mat-mdc-dialog-container{position:static;display:block}.mat-mdc-dialog-container,.mat-mdc-dialog-container .mdc-dialog__container,.mat-mdc-dialog-container .mdc-dialog__surface{max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mat-mdc-dialog-container .mdc-dialog__surface{display:block;width:100%;height:100%}.mat-mdc-dialog-container{outline:0}.mat-mdc-dialog-container .mdc-dialog__surface{background-color:var(--mdc-dialog-container-color, white)}.mat-mdc-dialog-container .mdc-dialog__surface{box-shadow:var(--mdc-dialog-container-elevation, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12))}.mat-mdc-dialog-container .mdc-dialog__surface{border-radius:var(--mdc-dialog-container-shape, var(--mdc-shape-medium, 4px))}.mat-mdc-dialog-container.mdc-dialog--scrollable .mdc-dialog__title,.mat-mdc-dialog-container.mdc-dialog--scrollable .mdc-dialog__actions,.mat-mdc-dialog-container.mdc-dialog--scrollable.mdc-dialog-scroll-divider-footer .mdc-dialog__actions{border-color:var(--mdc-dialog-with-divider-divider-color, black)}.mat-mdc-dialog-container.mdc-dialog--scrollable .mdc-dialog__title{border-bottom-color:var(--mdc-dialog-with-divider-divider-color, black)}.mat-mdc-dialog-container .mdc-dialog__title{font-family:var(--mdc-dialog-subhead-font, \\\"Arial\\\");line-height:var(--mdc-dialog-subhead-line-height, 14px);font-size:var(--mdc-dialog-subhead-size, 14px);font-weight:var(--mdc-dialog-subhead-weight, 500);letter-spacing:var(--mdc-dialog-subhead-tracking, 1px)}.mat-mdc-dialog-container .mdc-dialog__title{color:var(--mdc-dialog-subhead-color, black)}.mat-mdc-dialog-container .mdc-dialog__content{font-family:var(--mdc-dialog-supporting-text-font, \\\"Arial\\\");line-height:var(--mdc-dialog-supporting-text-line-height, 14px);font-size:var(--mdc-dialog-supporting-text-size, 14px);font-weight:var(--mdc-dialog-supporting-text-weight, 500);letter-spacing:var(--mdc-dialog-supporting-text-tracking, 1px)}.mat-mdc-dialog-container .mdc-dialog__content{color:var(--mdc-dialog-supporting-text-color, black)}.mat-mdc-dialog-container .mdc-dialog__container{transition-duration:var(--mat-dialog-transition-duration, 0ms)}.mat-mdc-dialog-container._mat-animation-noopable .mdc-dialog__container{transition:none}.mat-mdc-dialog-content{display:block}.mat-mdc-dialog-actions{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-dialog-container',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      host: {\n        'class': 'mat-mdc-dialog-container mdc-dialog',\n        'tabindex': '-1',\n        '[attr.aria-modal]': '_config.ariaModal',\n        '[id]': '_config.id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n        '[class._mat-animation-noopable]': '!_animationsEnabled'\n      },\n      template: \"<div class=\\\"mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet></ng-template>\\n  </div>\\n</div>\\n\",\n      styles: [\".mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-dialog,.mdc-dialog__scrim{position:fixed;top:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;width:100%;height:100%}.mdc-dialog{display:none;z-index:var(--mdc-dialog-z-index, 7)}.mdc-dialog .mdc-dialog__content{padding:20px 24px 20px 24px}.mdc-dialog .mdc-dialog__surface{min-width:280px}@media(max-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:calc(100vw - 32px)}}@media(min-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:560px}}.mdc-dialog .mdc-dialog__surface{max-height:calc(100% - 32px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-width:none}@media(max-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px;width:560px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 112px)}}@media(max-width: 720px)and (min-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:560px}}@media(max-width: 720px)and (max-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:calc(100vh - 160px)}}@media(max-width: 720px)and (min-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px}}@media(max-width: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-height: 400px),(max-width: 600px),(min-width: 720px)and (max-height: 400px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{height:100%;max-height:100vh;max-width:100vw;width:100vw;border-radius:0}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{order:-1;left:-12px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__header{padding:0 16px 9px;justify-content:flex-start}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__title{margin-left:calc(16px - 2 * 12px)}}@media(min-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 400px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}.mdc-dialog.mdc-dialog__scrim--hidden .mdc-dialog__scrim{opacity:0}.mdc-dialog__scrim{opacity:0;z-index:-1}.mdc-dialog__container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;transform:scale(0.8);opacity:0;pointer-events:none}.mdc-dialog__surface{position:relative;display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;max-width:100%;max-height:100%;pointer-events:auto;overflow-y:auto}.mdc-dialog__surface .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}[dir=rtl] .mdc-dialog__surface,.mdc-dialog__surface[dir=rtl]{text-align:right}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-dialog__surface{outline:2px solid windowText}}.mdc-dialog__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-dialog__surface::before{border-color:CanvasText}}@media screen and (-ms-high-contrast: active),screen and (-ms-high-contrast: none){.mdc-dialog__surface::before{content:none}}.mdc-dialog__title{display:block;margin-top:0;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:0 24px 9px}.mdc-dialog__title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mdc-dialog__title,.mdc-dialog__title[dir=rtl]{text-align:right}.mdc-dialog--scrollable .mdc-dialog__title{margin-bottom:1px;padding-bottom:15px}.mdc-dialog--fullscreen .mdc-dialog__header{align-items:baseline;border-bottom:1px solid rgba(0,0,0,0);display:inline-flex;justify-content:space-between;padding:0 24px 9px;z-index:1}@media screen and (forced-colors: active){.mdc-dialog--fullscreen .mdc-dialog__header{border-bottom-color:CanvasText}}.mdc-dialog--fullscreen .mdc-dialog__header .mdc-dialog__close{right:-12px}.mdc-dialog--fullscreen .mdc-dialog__title{margin-bottom:0;padding:0;border-bottom:0}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__title{border-bottom:0;margin-bottom:0}.mdc-dialog--fullscreen .mdc-dialog__close{top:5px}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--fullscreen--titleless .mdc-dialog__close{margin-top:4px}.mdc-dialog--fullscreen--titleless.mdc-dialog--scrollable .mdc-dialog__close{margin-top:0}.mdc-dialog__content{flex-grow:1;box-sizing:border-box;margin:0;overflow:auto}.mdc-dialog__content>:first-child{margin-top:0}.mdc-dialog__content>:last-child{margin-bottom:0}.mdc-dialog__title+.mdc-dialog__content,.mdc-dialog__header+.mdc-dialog__content{padding-top:0}.mdc-dialog--scrollable .mdc-dialog__title+.mdc-dialog__content{padding-top:8px;padding-bottom:8px}.mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:6px 0 0}.mdc-dialog--scrollable .mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:0}.mdc-dialog__actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--stacked .mdc-dialog__actions{flex-direction:column;align-items:flex-end}.mdc-dialog__button{margin-left:8px;margin-right:0;max-width:100%;text-align:right}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{margin-left:0;margin-right:8px}.mdc-dialog__button:first-child{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button:first-child,.mdc-dialog__button:first-child[dir=rtl]{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{text-align:left}.mdc-dialog--stacked .mdc-dialog__button:not(:first-child){margin-top:12px}.mdc-dialog--open,.mdc-dialog--opening,.mdc-dialog--closing{display:flex}.mdc-dialog--opening .mdc-dialog__scrim{transition:opacity 150ms linear}.mdc-dialog--opening .mdc-dialog__container{transition:opacity 75ms linear,transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-dialog--closing .mdc-dialog__scrim,.mdc-dialog--closing .mdc-dialog__container{transition:opacity 75ms linear}.mdc-dialog--closing .mdc-dialog__container{transform:none}.mdc-dialog--open .mdc-dialog__scrim{opacity:1}.mdc-dialog--open .mdc-dialog__container{transform:none;opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim{opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{transition:opacity 75ms linear}.mdc-dialog--open.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim{transition:opacity 150ms linear}.mdc-dialog__surface-scrim{display:none;opacity:0;position:absolute;width:100%;height:100%;z-index:1}.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{display:block}.mdc-dialog-scroll-lock{overflow:hidden}.mdc-dialog--no-content-padding .mdc-dialog__content{padding:0}.mdc-dialog--sheet .mdc-dialog__close{right:12px;top:9px;position:absolute;z-index:1}.mdc-dialog__scrim--removed{pointer-events:none}.mdc-dialog__scrim--removed .mdc-dialog__scrim,.mdc-dialog__scrim--removed .mdc-dialog__surface-scrim{display:none}.mat-mdc-dialog-content{max-height:65vh}.mat-mdc-dialog-container{position:static;display:block}.mat-mdc-dialog-container,.mat-mdc-dialog-container .mdc-dialog__container,.mat-mdc-dialog-container .mdc-dialog__surface{max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mat-mdc-dialog-container .mdc-dialog__surface{display:block;width:100%;height:100%}.mat-mdc-dialog-container{outline:0}.mat-mdc-dialog-container .mdc-dialog__surface{background-color:var(--mdc-dialog-container-color, white)}.mat-mdc-dialog-container .mdc-dialog__surface{box-shadow:var(--mdc-dialog-container-elevation, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12))}.mat-mdc-dialog-container .mdc-dialog__surface{border-radius:var(--mdc-dialog-container-shape, var(--mdc-shape-medium, 4px))}.mat-mdc-dialog-container.mdc-dialog--scrollable .mdc-dialog__title,.mat-mdc-dialog-container.mdc-dialog--scrollable .mdc-dialog__actions,.mat-mdc-dialog-container.mdc-dialog--scrollable.mdc-dialog-scroll-divider-footer .mdc-dialog__actions{border-color:var(--mdc-dialog-with-divider-divider-color, black)}.mat-mdc-dialog-container.mdc-dialog--scrollable .mdc-dialog__title{border-bottom-color:var(--mdc-dialog-with-divider-divider-color, black)}.mat-mdc-dialog-container .mdc-dialog__title{font-family:var(--mdc-dialog-subhead-font, \\\"Arial\\\");line-height:var(--mdc-dialog-subhead-line-height, 14px);font-size:var(--mdc-dialog-subhead-size, 14px);font-weight:var(--mdc-dialog-subhead-weight, 500);letter-spacing:var(--mdc-dialog-subhead-tracking, 1px)}.mat-mdc-dialog-container .mdc-dialog__title{color:var(--mdc-dialog-subhead-color, black)}.mat-mdc-dialog-container .mdc-dialog__content{font-family:var(--mdc-dialog-supporting-text-font, \\\"Arial\\\");line-height:var(--mdc-dialog-supporting-text-line-height, 14px);font-size:var(--mdc-dialog-supporting-text-size, 14px);font-weight:var(--mdc-dialog-supporting-text-weight, 500);letter-spacing:var(--mdc-dialog-supporting-text-tracking, 1px)}.mat-mdc-dialog-container .mdc-dialog__content{color:var(--mdc-dialog-supporting-text-color, black)}.mat-mdc-dialog-container .mdc-dialog__container{transition-duration:var(--mat-dialog-transition-duration, 0ms)}.mat-mdc-dialog-container._mat-animation-noopable .mdc-dialog__container{transition:none}.mat-mdc-dialog-content{display:block}.mat-mdc-dialog-actions{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDialogConfig\n    }, {\n      type: i1.InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1$1.OverlayRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\n\n\nclass MatDialogRef {\n  constructor(_ref, config, _containerInstance) {\n    this._ref = _ref;\n    this._containerInstance = _containerInstance;\n    /** Subject for notifying the user that the dialog has finished opening. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n\n    this._beforeClosed = new Subject();\n    /** Current state of the dialog. */\n\n    this._state = 0\n    /* MatDialogState.OPEN */\n    ;\n    this.disableClose = config.disableClose;\n    this.id = _ref.id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'opened'), take(1)).subscribe(() => {\n      this._afterOpened.next();\n\n      this._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closed'), take(1)).subscribe(() => {\n      clearTimeout(this._closeFallbackTimeout);\n\n      this._finishDialogClose();\n    });\n\n    _ref.overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n\n      this._beforeClosed.complete();\n\n      this._finishDialogClose();\n    });\n\n    merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n      if (!this.disableClose) {\n        event.preventDefault();\n\n        _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n\n\n  close(dialogResult) {\n    this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n    this._containerInstance._animationStateChanged.pipe(filter(event => event.state === 'closing'), take(1)).subscribe(event => {\n      this._beforeClosed.next(dialogResult);\n\n      this._beforeClosed.complete();\n\n      this._ref.overlayRef.detachBackdrop(); // The logic that disposes of the overlay depends on the exit animation completing, however\n      // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n      // timeout which will clean everything up if the animation hasn't fired within the specified\n      // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n      // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n\n\n      this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n    });\n\n    this._state = 1\n    /* MatDialogState.CLOSING */\n    ;\n\n    this._containerInstance._startExitAnimation();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n\n\n  afterOpened() {\n    return this._afterOpened;\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n\n\n  afterClosed() {\n    return this._ref.closed;\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n\n\n  beforeClosed() {\n    return this._beforeClosed;\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n\n\n  backdropClick() {\n    return this._ref.backdropClick;\n  }\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n\n\n  keydownEvents() {\n    return this._ref.keydownEvents;\n  }\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n\n\n  updatePosition(position) {\n    let strategy = this._ref.config.positionStrategy;\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._ref.updatePosition();\n\n    return this;\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n\n\n  updateSize(width = '', height = '') {\n    this._ref.updateSize(width, height);\n\n    return this;\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n\n\n  addPanelClass(classes) {\n    this._ref.addPanelClass(classes);\n\n    return this;\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n\n\n  removePanelClass(classes) {\n    this._ref.removePanelClass(classes);\n\n    return this;\n  }\n  /** Gets the current state of the dialog's lifecycle. */\n\n\n  getState() {\n    return this._state;\n  }\n  /**\n   * Finishes the dialog close by updating the state of the dialog\n   * and disposing the overlay.\n   */\n\n\n  _finishDialogClose() {\n    this._state = 2\n    /* MatDialogState.CLOSED */\n    ;\n\n    this._ref.close(this._result, {\n      focusOrigin: this._closeInteractionType\n    });\n\n    this.componentInstance = null;\n  }\n\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\n\n\nfunction _closeDialogVia(ref, interactionType, result) {\n  ref._closeInteractionType = interactionType;\n  return ref.close(result);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\n\n\nconst MAT_DIALOG_DATA = new InjectionToken('MatMdcDialogData');\n/** Injection token that can be used to specify default dialog options. */\n\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-mdc-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\n\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-mdc-dialog-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\n\n\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/** @docs-private */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n} // Counter for unique dialog ids.\n\n\nlet uniqueId = 0;\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\n\nclass _MatDialogBase {\n  constructor(_overlay, injector, _defaultOptions, _parentDialog,\n  /**\n   * @deprecated No longer used. To be removed.\n   * @breaking-change 15.0.0\n   */\n  _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken,\n  /**\n   * @deprecated No longer used. To be removed.\n   * @breaking-change 14.0.0\n   */\n  _animationMode) {\n    this._overlay = _overlay;\n    this._defaultOptions = _defaultOptions;\n    this._parentDialog = _parentDialog;\n    this._dialogRefConstructor = _dialogRefConstructor;\n    this._dialogContainerType = _dialogContainerType;\n    this._dialogDataToken = _dialogDataToken;\n    this._openDialogsAtThisLevel = [];\n    this._afterAllClosedAtThisLevel = new Subject();\n    this._afterOpenedAtThisLevel = new Subject();\n    this._idPrefix = 'mat-dialog-';\n    this.dialogConfigClass = MatDialogConfig;\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n\n    this.afterAllClosed = defer(() => this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(startWith(undefined)));\n    this._scrollStrategy = scrollStrategy;\n    this._dialog = injector.get(Dialog);\n  }\n  /** Keeps track of the currently-open dialogs. */\n\n\n  get openDialogs() {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n  /** Stream that emits when a dialog has been opened. */\n\n\n  get afterOpened() {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  _getAfterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n  }\n\n  open(componentOrTemplateRef, config) {\n    let dialogRef;\n    config = Object.assign(Object.assign({}, this._defaultOptions || new MatDialogConfig()), config);\n    config.id = config.id || `${this._idPrefix}${uniqueId++}`;\n    config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n\n    const cdkRef = this._dialog.open(componentOrTemplateRef, Object.assign(Object.assign({}, config), {\n      positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n      // Disable closing since we need to sync it up to the animation ourselves.\n      disableClose: true,\n      // Disable closing on destroy, because this service cleans up its open dialogs as well.\n      // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n      // the dialogs immediately whereas we want it to wait for the animations to finish.\n      closeOnDestroy: false,\n      container: {\n        type: this._dialogContainerType,\n        providers: () => [// Provide our config as the CDK config as well since it has the same interface as the\n        // CDK one, but it contains the actual values passed in by the user for things like\n        // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n        {\n          provide: this.dialogConfigClass,\n          useValue: config\n        }, {\n          provide: DialogConfig,\n          useValue: config\n        }]\n      },\n      templateContext: () => ({\n        dialogRef\n      }),\n      providers: (ref, cdkConfig, dialogContainer) => {\n        dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n        dialogRef.updatePosition(config === null || config === void 0 ? void 0 : config.position);\n        return [{\n          provide: this._dialogContainerType,\n          useValue: dialogContainer\n        }, {\n          provide: this._dialogDataToken,\n          useValue: cdkConfig.data\n        }, {\n          provide: this._dialogRefConstructor,\n          useValue: dialogRef\n        }];\n      }\n    })); // This can't be assigned in the `providers` callback, because\n    // the instance hasn't been assigned to the CDK ref yet.\n\n\n    dialogRef.componentInstance = cdkRef.componentInstance;\n    this.openDialogs.push(dialogRef);\n    this.afterOpened.next(dialogRef);\n    dialogRef.afterClosed().subscribe(() => {\n      const index = this.openDialogs.indexOf(dialogRef);\n\n      if (index > -1) {\n        this.openDialogs.splice(index, 1);\n\n        if (!this.openDialogs.length) {\n          this._getAfterAllClosed().next();\n        }\n      }\n    });\n    return dialogRef;\n  }\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n\n\n  closeAll() {\n    this._closeDialogs(this.openDialogs);\n  }\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n\n\n  getDialogById(id) {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n\n    this._afterAllClosedAtThisLevel.complete();\n\n    this._afterOpenedAtThisLevel.complete();\n  }\n\n  _closeDialogs(dialogs) {\n    let i = dialogs.length;\n\n    while (i--) {\n      dialogs[i].close();\n    }\n  }\n\n}\n\n_MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n\n_MatDialogBase.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: _MatDialogBase,\n  factory: _MatDialogBase.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatDialogBase, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: undefined\n    }, {\n      type: undefined\n    }, {\n      type: i1$1.OverlayContainer\n    }, {\n      type: undefined\n    }, {\n      type: i0.Type\n    }, {\n      type: i0.Type\n    }, {\n      type: i0.InjectionToken\n    }, {\n      type: undefined\n    }];\n  }, null);\n})();\n/**\n * Service to open Material Design modal dialogs.\n */\n\n\nclass MatDialog extends _MatDialogBase {\n  constructor(overlay, injector,\n  /**\n   * @deprecated `_location` parameter to be removed.\n   * @breaking-change 10.0.0\n   */\n  location, defaultOptions, scrollStrategy, parentDialog,\n  /**\n   * @deprecated No longer used. To be removed.\n   * @breaking-change 15.0.0\n   */\n  overlayContainer,\n  /**\n   * @deprecated No longer used. To be removed.\n   * @breaking-change 14.0.0\n   */\n  animationMode) {\n    super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\n    this._idPrefix = 'mat-mdc-dialog-';\n  }\n\n}\n\nMatDialog.ɵfac = function MatDialog_Factory(t) {\n  return new (t || MatDialog)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.Location, 8), i0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), i0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), i0.ɵɵinject(MatDialog, 12), i0.ɵɵinject(i1$1.OverlayContainer), i0.ɵɵinject(ANIMATION_MODULE_TYPE$1, 8));\n};\n\nMatDialog.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MatDialog,\n  factory: MatDialog.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: i2.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatDialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DIALOG_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatDialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1$1.OverlayContainer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE$1]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique IDs for dialog elements. */\n\n\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nclass MatDialogClose {\n  constructor( // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  dialogRef, _elementRef, _dialog) {\n    this.dialogRef = dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /** Default to \"button\" to prevents accidental form submits. */\n\n    this.type = 'button';\n  }\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n  }\n\n  ngOnChanges(changes) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n\n  _onButtonClick(event) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n  }\n\n}\n\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n  return new (t || MatDialogClose)(i0.ɵɵdirectiveInject(MatDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogClose.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogClose,\n  selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n  hostVars: 2,\n  hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) {\n        return ctx._onButtonClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    }\n  },\n  inputs: {\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    type: \"type\",\n    dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n    _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n  },\n  exportAs: [\"matDialogClose\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogClose, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-close], [matDialogClose]',\n      exportAs: 'matDialogClose',\n      host: {\n        '(click)': '_onButtonClick($event)',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.type]': 'type'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    type: [{\n      type: Input\n    }],\n    dialogResult: [{\n      type: Input,\n      args: ['mat-dialog-close']\n    }],\n    _matDialogClose: [{\n      type: Input,\n      args: ['matDialogClose']\n    }]\n  });\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nclass MatDialogTitle {\n  constructor( // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  _dialogRef, _elementRef, _dialog) {\n    this._dialogRef = _dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    this.id = `mat-mdc-dialog-title-${dialogElementUid++}`;\n  }\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n\n}\n\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n  return new (t || MatDialogTitle)(i0.ɵɵdirectiveInject(MatDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatDialog));\n};\n\nMatDialogTitle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogTitle,\n  selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n  hostAttrs: [1, \"mat-mdc-dialog-title\", \"mdc-dialog__title\"],\n  hostVars: 1,\n  hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\"\n  },\n  exportAs: [\"matDialogTitle\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogTitle, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-title], [matDialogTitle]',\n      exportAs: 'matDialogTitle',\n      host: {\n        'class': 'mat-mdc-dialog-title mdc-dialog__title',\n        '[id]': 'id'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: MatDialog\n    }];\n  }, {\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Scrollable content container of a dialog.\n */\n\n\nclass MatDialogContent {}\n\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n  return new (t || MatDialogContent)();\n};\n\nMatDialogContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogContent,\n  selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n  hostAttrs: [1, \"mat-mdc-dialog-content\", \"mdc-dialog__content\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogContent, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n      host: {\n        'class': 'mat-mdc-dialog-content mdc-dialog__content'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nclass MatDialogActions {\n  constructor() {\n    /**\n     * Horizontal alignment of action buttons.\n     */\n    this.align = 'start';\n  }\n\n}\n\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n  return new (t || MatDialogActions)();\n};\n\nMatDialogActions.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatDialogActions,\n  selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n  hostAttrs: [1, \"mat-mdc-dialog-actions\", \"mdc-dialog__actions\"],\n  hostVars: 4,\n  hostBindings: function MatDialogActions_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-mdc-dialog-actions-align-center\", ctx.align === \"center\")(\"mat-mdc-dialog-actions-align-end\", ctx.align === \"end\");\n    }\n  },\n  inputs: {\n    align: \"align\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogActions, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n      host: {\n        'class': 'mat-mdc-dialog-actions mdc-dialog__actions',\n        '[class.mat-mdc-dialog-actions-align-center]': 'align === \"center\"',\n        '[class.mat-mdc-dialog-actions-align-end]': 'align === \"end\"'\n      }\n    }]\n  }], null, {\n    align: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  let parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-mdc-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatDialogModule {}\n\nMatDialogModule.ɵfac = function MatDialogModule_Factory(t) {\n  return new (t || MatDialogModule)();\n};\n\nMatDialogModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatDialogModule\n});\nMatDialogModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n  imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatDialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule],\n      exports: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule],\n      declarations: [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent],\n      providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n */\n\n\nconst _defaultParams = {\n  params: {\n    enterAnimationDuration: '150ms',\n    exitAnimationDuration: '75ms'\n  }\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\n\nconst matDialogAnimations = {\n  /** Animation that is applied on the dialog container by default. */\n  dialogContainer: trigger('dialogContainer', [// Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({\n    opacity: 0,\n    transform: 'scale(0.7)'\n  })), state('enter', style({\n    transform: 'none'\n  })), transition('* => enter', group([animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', style({\n    transform: 'none',\n    opacity: 1\n  })), query('@*', animateChild(), {\n    optional: true\n  })]), _defaultParams), transition('* => void, * => exit', group([animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({\n    opacity: 0\n  })), query('@*', animateChild(), {\n    optional: true\n  })]), _defaultParams)])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, _defaultParams, matDialogAnimations };","map":{"version":3,"names":["i1$1","Overlay","OverlayModule","i0","EventEmitter","Component","Optional","Inject","ViewEncapsulation","ChangeDetectionStrategy","InjectionToken","Injectable","ANIMATION_MODULE_TYPE","ANIMATION_MODULE_TYPE$1","SkipSelf","Directive","Input","NgModule","i2","DOCUMENT","numbers","cssClasses","CdkDialogContainer","Dialog","DialogConfig","DialogModule","coerceNumberProperty","i1","i4","PortalModule","Subject","merge","defer","filter","take","startWith","ESCAPE","hasModifierKey","MatCommonModule","trigger","state","style","transition","group","animate","query","animateChild","MatDialogConfig","constructor","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","ariaModal","autoFocus","restoreFocus","delayFocusTrap","closeOnNavigation","_MatDialogContainerBase","elementRef","focusTrapFactory","_document","dialogConfig","interactivityChecker","ngZone","overlayRef","focusMonitor","_animationStateChanged","_captureInitialFocus","_config","_trapFocus","_openAnimationDone","totalTime","next","ɵfac","ElementRef","FocusTrapFactory","InteractivityChecker","NgZone","OverlayRef","FocusMonitor","ɵcmp","type","args","template","undefined","decorators","TRANSITION_DURATION_PROPERTY","parseCssTime","time","endsWith","substring","length","MatDialogContainer","document","checker","_animationMode","_a","_b","_animationsEnabled","_hostElement","_elementRef","nativeElement","_openAnimationDuration","enterAnimationDuration","DIALOG_ANIMATION_OPEN_TIME_MS","_closeAnimationDuration","exitAnimationDuration","DIALOG_ANIMATION_CLOSE_TIME_MS","_animationTimer","_finishDialogOpen","_clearAnimationClasses","_finishDialogClose","emit","_contentAttached","_startOpenAnimation","ngOnDestroy","clearTimeout","setProperty","classList","add","OPENING","OPEN","_waitForAnimationToComplete","Promise","resolve","then","_startExitAnimation","remove","CLOSING","duration","callback","setTimeout","CdkPortalOutlet","selector","encapsulation","None","changeDetection","Default","host","styles","MatDialogRef","_ref","config","_containerInstance","_afterOpened","_beforeClosed","_state","id","pipe","event","subscribe","complete","_closeFallbackTimeout","detachments","_result","backdropClick","keydownEvents","keyCode","preventDefault","_closeDialogVia","close","dialogResult","detachBackdrop","afterOpened","afterClosed","closed","beforeClosed","updatePosition","position","strategy","positionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","addPanelClass","classes","removePanelClass","getState","focusOrigin","_closeInteractionType","componentInstance","ref","interactionType","result","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","uniqueId","_MatDialogBase","_overlay","injector","_defaultOptions","_parentDialog","_overlayContainer","scrollStrategy","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_idPrefix","dialogConfigClass","afterAllClosed","openDialogs","_getAfterAllClosed","_scrollStrategy","_dialog","get","parent","open","componentOrTemplateRef","dialogRef","Object","assign","cdkRef","global","closeOnDestroy","container","providers","useValue","templateContext","cdkConfig","dialogContainer","push","index","indexOf","splice","closeAll","_closeDialogs","getDialogById","find","dialog","dialogs","i","ɵprov","Injector","OverlayContainer","Type","MatDialog","location","defaultOptions","parentDialog","overlayContainer","animationMode","Location","dialogElementUid","MatDialogClose","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","_onButtonClick","screenX","screenY","ɵdir","exportAs","_matDialogClose","MatDialogTitle","_dialogRef","_ariaLabelledBy","MatDialogContent","MatDialogActions","align","element","parentElement","contains","MatDialogModule","ɵmod","ɵinj","imports","exports","declarations","_defaultParams","params","matDialogAnimations","opacity","transform","optional"],"sources":["C:/Users/Henry/Desktop/New folder/Atomas2/node_modules/@angular/material/fesm2015/dialog.mjs"],"sourcesContent":["import * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, Optional, Inject, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injectable, ANIMATION_MODULE_TYPE as ANIMATION_MODULE_TYPE$1, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { numbers, cssClasses } from '@material/dialog';\nimport { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/portal';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { MatCommonModule } from '@angular/material/core';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n        this.ariaModal = true;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /** Whether to wait for the opening animation to finish before trapping focus. */\n        this.delayFocusTrap = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n// tslint:disable-next-line:validate-decorators\nclass _MatDialogContainerBase extends CdkDialogContainer {\n    constructor(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor) {\n        super(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n    }\n    _captureInitialFocus() {\n        if (!this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Callback for when the open dialog animation has finished. Intended to\n     * be called by sub-classes that use different animation implementations.\n     */\n    _openAnimationDone(totalTime) {\n        if (this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n        this._animationStateChanged.next({ state: 'opened', totalTime });\n    }\n}\n_MatDialogContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: _MatDialogContainerBase, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });\n_MatDialogContainerBase.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0\", type: _MatDialogContainerBase, selector: \"ng-component\", usesInheritance: true, ngImport: i0, template: '', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: _MatDialogContainerBase, decorators: [{\n            type: Component,\n            args: [{ template: '' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i1.FocusMonitor }];\n    } });\nconst TRANSITION_DURATION_PROPERTY = '--mat-dialog-transition-duration';\n// TODO(mmalerba): Remove this function after animation durations are required\n//  to be numbers.\n/**\n * Converts a CSS time string to a number in ms. If the given time is already a\n * number, it is assumed to be in ms.\n */\nfunction parseCssTime(time) {\n    if (time == null) {\n        return null;\n    }\n    if (typeof time === 'number') {\n        return time;\n    }\n    if (time.endsWith('ms')) {\n        return coerceNumberProperty(time.substring(0, time.length - 2));\n    }\n    if (time.endsWith('s')) {\n        return coerceNumberProperty(time.substring(0, time.length - 1)) * 1000;\n    }\n    if (time === '0') {\n        return 0;\n    }\n    return null; // anything else is invalid.\n}\n/**\n * Internal component that wraps user-provided dialog content in a MDC dialog.\n * @docs-private\n */\nclass MatDialogContainer extends _MatDialogContainerBase {\n    constructor(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, _animationMode, focusMonitor) {\n        var _a, _b;\n        super(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, focusMonitor);\n        this._animationMode = _animationMode;\n        /** Whether animations are enabled. */\n        this._animationsEnabled = this._animationMode !== 'NoopAnimations';\n        /** Host element of the dialog container component. */\n        this._hostElement = this._elementRef.nativeElement;\n        /** Duration of the dialog open animation. */\n        this._openAnimationDuration = this._animationsEnabled\n            ? (_a = parseCssTime(this._config.enterAnimationDuration)) !== null && _a !== void 0 ? _a : numbers.DIALOG_ANIMATION_OPEN_TIME_MS\n            : 0;\n        /** Duration of the dialog close animation. */\n        this._closeAnimationDuration = this._animationsEnabled\n            ? (_b = parseCssTime(this._config.exitAnimationDuration)) !== null && _b !== void 0 ? _b : numbers.DIALOG_ANIMATION_CLOSE_TIME_MS\n            : 0;\n        /** Current timer for dialog animations. */\n        this._animationTimer = null;\n        /**\n         * Completes the dialog open by clearing potential animation classes, trapping\n         * focus and emitting an opened event.\n         */\n        this._finishDialogOpen = () => {\n            this._clearAnimationClasses();\n            this._openAnimationDone(this._openAnimationDuration);\n        };\n        /**\n         * Completes the dialog close by clearing potential animation classes, restoring\n         * focus and emitting a closed event.\n         */\n        this._finishDialogClose = () => {\n            this._clearAnimationClasses();\n            this._animationStateChanged.emit({ state: 'closed', totalTime: this._closeAnimationDuration });\n        };\n    }\n    _contentAttached() {\n        // Delegate to the original dialog-container initialization (i.e. saving the\n        // previous element, setting up the focus trap and moving focus to the container).\n        super._contentAttached();\n        // Note: Usually we would be able to use the MDC dialog foundation here to handle\n        // the dialog animation for us, but there are a few reasons why we just leverage\n        // their styles and not use the runtime foundation code:\n        //   1. Foundation does not allow us to disable animations.\n        //   2. Foundation contains unnecessary features we don't need and aren't\n        //      tree-shakeable. e.g. background scrim, keyboard event handlers for ESC button.\n        //   3. Foundation uses unnecessary timers for animations to work around limitations\n        //      in React's `setState` mechanism.\n        //      https://github.com/material-components/material-components-web/pull/3682.\n        this._startOpenAnimation();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n    }\n    /** Starts the dialog open animation if enabled. */\n    _startOpenAnimation() {\n        this._animationStateChanged.emit({ state: 'opening', totalTime: this._openAnimationDuration });\n        if (this._animationsEnabled) {\n            // One would expect that the open class is added once the animation finished, but MDC\n            // uses the open class in combination with the opening class to start the animation.\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._openAnimationDuration}ms`);\n            this._hostElement.classList.add(cssClasses.OPENING);\n            this._hostElement.classList.add(cssClasses.OPEN);\n            this._waitForAnimationToComplete(this._openAnimationDuration, this._finishDialogOpen);\n        }\n        else {\n            this._hostElement.classList.add(cssClasses.OPEN);\n            // Note: We could immediately finish the dialog opening here with noop animations,\n            // but we defer until next tick so that consumers can subscribe to `afterOpened`.\n            // Executing this immediately would mean that `afterOpened` emits synchronously\n            // on `dialog.open` before the consumer had a change to subscribe to `afterOpened`.\n            Promise.resolve().then(() => this._finishDialogOpen());\n        }\n    }\n    /**\n     * Starts the exit animation of the dialog if enabled. This method is\n     * called by the dialog ref.\n     */\n    _startExitAnimation() {\n        this._animationStateChanged.emit({ state: 'closing', totalTime: this._closeAnimationDuration });\n        this._hostElement.classList.remove(cssClasses.OPEN);\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._openAnimationDuration}ms`);\n            this._hostElement.classList.add(cssClasses.CLOSING);\n            this._waitForAnimationToComplete(this._closeAnimationDuration, this._finishDialogClose);\n        }\n        else {\n            // This subscription to the `OverlayRef#backdropClick` observable in the `DialogRef` is\n            // set up before any user can subscribe to the backdrop click. The subscription triggers\n            // the dialog close and this method synchronously. If we'd synchronously emit the `CLOSED`\n            // animation state event if animations are disabled, the overlay would be disposed\n            // immediately and all other subscriptions to `DialogRef#backdropClick` would be silently\n            // skipped. We work around this by waiting with the dialog close until the next tick when\n            // all subscriptions have been fired as expected. This is not an ideal solution, but\n            // there doesn't seem to be any other good way. Alternatives that have been considered:\n            //   1. Deferring `DialogRef.close`. This could be a breaking change due to a new microtask.\n            //      Also this issue is specific to the MDC implementation where the dialog could\n            //      technically be closed synchronously. In the non-MDC one, Angular animations are used\n            //      and closing always takes at least a tick.\n            //   2. Ensuring that user subscriptions to `backdropClick`, `keydownEvents` in the dialog\n            //      ref are first. This would solve the issue, but has the risk of memory leaks and also\n            //      doesn't solve the case where consumers call `DialogRef.close` in their subscriptions.\n            // Based on the fact that this is specific to the MDC-based implementation of the dialog\n            // animations, the defer is applied here.\n            Promise.resolve().then(() => this._finishDialogClose());\n        }\n    }\n    /** Clears all dialog animation classes. */\n    _clearAnimationClasses() {\n        this._hostElement.classList.remove(cssClasses.OPENING);\n        this._hostElement.classList.remove(cssClasses.CLOSING);\n    }\n    _waitForAnimationToComplete(duration, callback) {\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n        // Note that we want this timer to run inside the NgZone, because we want\n        // the related events like `afterClosed` to be inside the zone as well.\n        this._animationTimer = setTimeout(callback, duration);\n    }\n}\nMatDialogContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });\nMatDialogContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0\", type: MatDialogContainer, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.aria-modal\": \"_config.ariaModal\", \"id\": \"_config.id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledBy\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"class._mat-animation-noopable\": \"!_animationsEnabled\" }, classAttribute: \"mat-mdc-dialog-container mdc-dialog\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet></ng-template>\\n  </div>\\n</div>\\n\", styles: [\".mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-dialog,.mdc-dialog__scrim{position:fixed;top:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;width:100%;height:100%}.mdc-dialog{display:none;z-index:var(--mdc-dialog-z-index, 7)}.mdc-dialog .mdc-dialog__content{padding:20px 24px 20px 24px}.mdc-dialog .mdc-dialog__surface{min-width:280px}@media(max-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:calc(100vw - 32px)}}@media(min-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:560px}}.mdc-dialog .mdc-dialog__surface{max-height:calc(100% - 32px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-width:none}@media(max-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px;width:560px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 112px)}}@media(max-width: 720px)and (min-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:560px}}@media(max-width: 720px)and (max-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:calc(100vh - 160px)}}@media(max-width: 720px)and (min-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px}}@media(max-width: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-height: 400px),(max-width: 600px),(min-width: 720px)and (max-height: 400px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{height:100%;max-height:100vh;max-width:100vw;width:100vw;border-radius:0}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{order:-1;left:-12px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__header{padding:0 16px 9px;justify-content:flex-start}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__title{margin-left:calc(16px - 2 * 12px)}}@media(min-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 400px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}.mdc-dialog.mdc-dialog__scrim--hidden .mdc-dialog__scrim{opacity:0}.mdc-dialog__scrim{opacity:0;z-index:-1}.mdc-dialog__container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;transform:scale(0.8);opacity:0;pointer-events:none}.mdc-dialog__surface{position:relative;display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;max-width:100%;max-height:100%;pointer-events:auto;overflow-y:auto}.mdc-dialog__surface .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}[dir=rtl] .mdc-dialog__surface,.mdc-dialog__surface[dir=rtl]{text-align:right}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-dialog__surface{outline:2px solid windowText}}.mdc-dialog__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-dialog__surface::before{border-color:CanvasText}}@media screen and (-ms-high-contrast: active),screen and (-ms-high-contrast: none){.mdc-dialog__surface::before{content:none}}.mdc-dialog__title{display:block;margin-top:0;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:0 24px 9px}.mdc-dialog__title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mdc-dialog__title,.mdc-dialog__title[dir=rtl]{text-align:right}.mdc-dialog--scrollable .mdc-dialog__title{margin-bottom:1px;padding-bottom:15px}.mdc-dialog--fullscreen .mdc-dialog__header{align-items:baseline;border-bottom:1px solid rgba(0,0,0,0);display:inline-flex;justify-content:space-between;padding:0 24px 9px;z-index:1}@media screen and (forced-colors: active){.mdc-dialog--fullscreen .mdc-dialog__header{border-bottom-color:CanvasText}}.mdc-dialog--fullscreen .mdc-dialog__header .mdc-dialog__close{right:-12px}.mdc-dialog--fullscreen .mdc-dialog__title{margin-bottom:0;padding:0;border-bottom:0}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__title{border-bottom:0;margin-bottom:0}.mdc-dialog--fullscreen .mdc-dialog__close{top:5px}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--fullscreen--titleless .mdc-dialog__close{margin-top:4px}.mdc-dialog--fullscreen--titleless.mdc-dialog--scrollable .mdc-dialog__close{margin-top:0}.mdc-dialog__content{flex-grow:1;box-sizing:border-box;margin:0;overflow:auto}.mdc-dialog__content>:first-child{margin-top:0}.mdc-dialog__content>:last-child{margin-bottom:0}.mdc-dialog__title+.mdc-dialog__content,.mdc-dialog__header+.mdc-dialog__content{padding-top:0}.mdc-dialog--scrollable .mdc-dialog__title+.mdc-dialog__content{padding-top:8px;padding-bottom:8px}.mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:6px 0 0}.mdc-dialog--scrollable .mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:0}.mdc-dialog__actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--stacked .mdc-dialog__actions{flex-direction:column;align-items:flex-end}.mdc-dialog__button{margin-left:8px;margin-right:0;max-width:100%;text-align:right}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{margin-left:0;margin-right:8px}.mdc-dialog__button:first-child{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button:first-child,.mdc-dialog__button:first-child[dir=rtl]{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{text-align:left}.mdc-dialog--stacked .mdc-dialog__button:not(:first-child){margin-top:12px}.mdc-dialog--open,.mdc-dialog--opening,.mdc-dialog--closing{display:flex}.mdc-dialog--opening .mdc-dialog__scrim{transition:opacity 150ms linear}.mdc-dialog--opening .mdc-dialog__container{transition:opacity 75ms linear,transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-dialog--closing .mdc-dialog__scrim,.mdc-dialog--closing .mdc-dialog__container{transition:opacity 75ms linear}.mdc-dialog--closing .mdc-dialog__container{transform:none}.mdc-dialog--open .mdc-dialog__scrim{opacity:1}.mdc-dialog--open .mdc-dialog__container{transform:none;opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim{opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{transition:opacity 75ms linear}.mdc-dialog--open.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim{transition:opacity 150ms linear}.mdc-dialog__surface-scrim{display:none;opacity:0;position:absolute;width:100%;height:100%;z-index:1}.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{display:block}.mdc-dialog-scroll-lock{overflow:hidden}.mdc-dialog--no-content-padding .mdc-dialog__content{padding:0}.mdc-dialog--sheet .mdc-dialog__close{right:12px;top:9px;position:absolute;z-index:1}.mdc-dialog__scrim--removed{pointer-events:none}.mdc-dialog__scrim--removed .mdc-dialog__scrim,.mdc-dialog__scrim--removed .mdc-dialog__surface-scrim{display:none}.mat-mdc-dialog-content{max-height:65vh}.mat-mdc-dialog-container{position:static;display:block}.mat-mdc-dialog-container,.mat-mdc-dialog-container .mdc-dialog__container,.mat-mdc-dialog-container .mdc-dialog__surface{max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mat-mdc-dialog-container .mdc-dialog__surface{display:block;width:100%;height:100%}.mat-mdc-dialog-container{outline:0}.mat-mdc-dialog-container .mdc-dialog__surface{background-color:var(--mdc-dialog-container-color, white)}.mat-mdc-dialog-container .mdc-dialog__surface{box-shadow:var(--mdc-dialog-container-elevation, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12))}.mat-mdc-dialog-container .mdc-dialog__surface{border-radius:var(--mdc-dialog-container-shape, var(--mdc-shape-medium, 4px))}.mat-mdc-dialog-container.mdc-dialog--scrollable .mdc-dialog__title,.mat-mdc-dialog-container.mdc-dialog--scrollable .mdc-dialog__actions,.mat-mdc-dialog-container.mdc-dialog--scrollable.mdc-dialog-scroll-divider-footer .mdc-dialog__actions{border-color:var(--mdc-dialog-with-divider-divider-color, black)}.mat-mdc-dialog-container.mdc-dialog--scrollable .mdc-dialog__title{border-bottom-color:var(--mdc-dialog-with-divider-divider-color, black)}.mat-mdc-dialog-container .mdc-dialog__title{font-family:var(--mdc-dialog-subhead-font, \\\"Arial\\\");line-height:var(--mdc-dialog-subhead-line-height, 14px);font-size:var(--mdc-dialog-subhead-size, 14px);font-weight:var(--mdc-dialog-subhead-weight, 500);letter-spacing:var(--mdc-dialog-subhead-tracking, 1px)}.mat-mdc-dialog-container .mdc-dialog__title{color:var(--mdc-dialog-subhead-color, black)}.mat-mdc-dialog-container .mdc-dialog__content{font-family:var(--mdc-dialog-supporting-text-font, \\\"Arial\\\");line-height:var(--mdc-dialog-supporting-text-line-height, 14px);font-size:var(--mdc-dialog-supporting-text-size, 14px);font-weight:var(--mdc-dialog-supporting-text-weight, 500);letter-spacing:var(--mdc-dialog-supporting-text-tracking, 1px)}.mat-mdc-dialog-container .mdc-dialog__content{color:var(--mdc-dialog-supporting-text-color, black)}.mat-mdc-dialog-container .mdc-dialog__container{transition-duration:var(--mat-dialog-transition-duration, 0ms)}.mat-mdc-dialog-container._mat-animation-noopable .mdc-dialog__container{transition:none}.mat-mdc-dialog-content{display:block}.mat-mdc-dialog-actions{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"], dependencies: [{ kind: \"directive\", type: i4.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, host: {\n                        'class': 'mat-mdc-dialog-container mdc-dialog',\n                        'tabindex': '-1',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[id]': '_config.id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[class._mat-animation-noopable]': '!_animationsEnabled',\n                    }, template: \"<div class=\\\"mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet></ng-template>\\n  </div>\\n</div>\\n\", styles: [\".mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-dialog,.mdc-dialog__scrim{position:fixed;top:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;width:100%;height:100%}.mdc-dialog{display:none;z-index:var(--mdc-dialog-z-index, 7)}.mdc-dialog .mdc-dialog__content{padding:20px 24px 20px 24px}.mdc-dialog .mdc-dialog__surface{min-width:280px}@media(max-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:calc(100vw - 32px)}}@media(min-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:560px}}.mdc-dialog .mdc-dialog__surface{max-height:calc(100% - 32px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-width:none}@media(max-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px;width:560px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 112px)}}@media(max-width: 720px)and (min-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:560px}}@media(max-width: 720px)and (max-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:calc(100vh - 160px)}}@media(max-width: 720px)and (min-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px}}@media(max-width: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-height: 400px),(max-width: 600px),(min-width: 720px)and (max-height: 400px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{height:100%;max-height:100vh;max-width:100vw;width:100vw;border-radius:0}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{order:-1;left:-12px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__header{padding:0 16px 9px;justify-content:flex-start}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__title{margin-left:calc(16px - 2 * 12px)}}@media(min-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 400px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}.mdc-dialog.mdc-dialog__scrim--hidden .mdc-dialog__scrim{opacity:0}.mdc-dialog__scrim{opacity:0;z-index:-1}.mdc-dialog__container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;transform:scale(0.8);opacity:0;pointer-events:none}.mdc-dialog__surface{position:relative;display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;max-width:100%;max-height:100%;pointer-events:auto;overflow-y:auto}.mdc-dialog__surface .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}[dir=rtl] .mdc-dialog__surface,.mdc-dialog__surface[dir=rtl]{text-align:right}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-dialog__surface{outline:2px solid windowText}}.mdc-dialog__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-dialog__surface::before{border-color:CanvasText}}@media screen and (-ms-high-contrast: active),screen and (-ms-high-contrast: none){.mdc-dialog__surface::before{content:none}}.mdc-dialog__title{display:block;margin-top:0;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:0 24px 9px}.mdc-dialog__title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mdc-dialog__title,.mdc-dialog__title[dir=rtl]{text-align:right}.mdc-dialog--scrollable .mdc-dialog__title{margin-bottom:1px;padding-bottom:15px}.mdc-dialog--fullscreen .mdc-dialog__header{align-items:baseline;border-bottom:1px solid rgba(0,0,0,0);display:inline-flex;justify-content:space-between;padding:0 24px 9px;z-index:1}@media screen and (forced-colors: active){.mdc-dialog--fullscreen .mdc-dialog__header{border-bottom-color:CanvasText}}.mdc-dialog--fullscreen .mdc-dialog__header .mdc-dialog__close{right:-12px}.mdc-dialog--fullscreen .mdc-dialog__title{margin-bottom:0;padding:0;border-bottom:0}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__title{border-bottom:0;margin-bottom:0}.mdc-dialog--fullscreen .mdc-dialog__close{top:5px}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--fullscreen--titleless .mdc-dialog__close{margin-top:4px}.mdc-dialog--fullscreen--titleless.mdc-dialog--scrollable .mdc-dialog__close{margin-top:0}.mdc-dialog__content{flex-grow:1;box-sizing:border-box;margin:0;overflow:auto}.mdc-dialog__content>:first-child{margin-top:0}.mdc-dialog__content>:last-child{margin-bottom:0}.mdc-dialog__title+.mdc-dialog__content,.mdc-dialog__header+.mdc-dialog__content{padding-top:0}.mdc-dialog--scrollable .mdc-dialog__title+.mdc-dialog__content{padding-top:8px;padding-bottom:8px}.mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:6px 0 0}.mdc-dialog--scrollable .mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:0}.mdc-dialog__actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--stacked .mdc-dialog__actions{flex-direction:column;align-items:flex-end}.mdc-dialog__button{margin-left:8px;margin-right:0;max-width:100%;text-align:right}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{margin-left:0;margin-right:8px}.mdc-dialog__button:first-child{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button:first-child,.mdc-dialog__button:first-child[dir=rtl]{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{text-align:left}.mdc-dialog--stacked .mdc-dialog__button:not(:first-child){margin-top:12px}.mdc-dialog--open,.mdc-dialog--opening,.mdc-dialog--closing{display:flex}.mdc-dialog--opening .mdc-dialog__scrim{transition:opacity 150ms linear}.mdc-dialog--opening .mdc-dialog__container{transition:opacity 75ms linear,transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-dialog--closing .mdc-dialog__scrim,.mdc-dialog--closing .mdc-dialog__container{transition:opacity 75ms linear}.mdc-dialog--closing .mdc-dialog__container{transform:none}.mdc-dialog--open .mdc-dialog__scrim{opacity:1}.mdc-dialog--open .mdc-dialog__container{transform:none;opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim{opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{transition:opacity 75ms linear}.mdc-dialog--open.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim{transition:opacity 150ms linear}.mdc-dialog__surface-scrim{display:none;opacity:0;position:absolute;width:100%;height:100%;z-index:1}.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{display:block}.mdc-dialog-scroll-lock{overflow:hidden}.mdc-dialog--no-content-padding .mdc-dialog__content{padding:0}.mdc-dialog--sheet .mdc-dialog__close{right:12px;top:9px;position:absolute;z-index:1}.mdc-dialog__scrim--removed{pointer-events:none}.mdc-dialog__scrim--removed .mdc-dialog__scrim,.mdc-dialog__scrim--removed .mdc-dialog__surface-scrim{display:none}.mat-mdc-dialog-content{max-height:65vh}.mat-mdc-dialog-container{position:static;display:block}.mat-mdc-dialog-container,.mat-mdc-dialog-container .mdc-dialog__container,.mat-mdc-dialog-container .mdc-dialog__surface{max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mat-mdc-dialog-container .mdc-dialog__surface{display:block;width:100%;height:100%}.mat-mdc-dialog-container{outline:0}.mat-mdc-dialog-container .mdc-dialog__surface{background-color:var(--mdc-dialog-container-color, white)}.mat-mdc-dialog-container .mdc-dialog__surface{box-shadow:var(--mdc-dialog-container-elevation, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12))}.mat-mdc-dialog-container .mdc-dialog__surface{border-radius:var(--mdc-dialog-container-shape, var(--mdc-shape-medium, 4px))}.mat-mdc-dialog-container.mdc-dialog--scrollable .mdc-dialog__title,.mat-mdc-dialog-container.mdc-dialog--scrollable .mdc-dialog__actions,.mat-mdc-dialog-container.mdc-dialog--scrollable.mdc-dialog-scroll-divider-footer .mdc-dialog__actions{border-color:var(--mdc-dialog-with-divider-divider-color, black)}.mat-mdc-dialog-container.mdc-dialog--scrollable .mdc-dialog__title{border-bottom-color:var(--mdc-dialog-with-divider-divider-color, black)}.mat-mdc-dialog-container .mdc-dialog__title{font-family:var(--mdc-dialog-subhead-font, \\\"Arial\\\");line-height:var(--mdc-dialog-subhead-line-height, 14px);font-size:var(--mdc-dialog-subhead-size, 14px);font-weight:var(--mdc-dialog-subhead-weight, 500);letter-spacing:var(--mdc-dialog-subhead-tracking, 1px)}.mat-mdc-dialog-container .mdc-dialog__title{color:var(--mdc-dialog-subhead-color, black)}.mat-mdc-dialog-container .mdc-dialog__content{font-family:var(--mdc-dialog-supporting-text-font, \\\"Arial\\\");line-height:var(--mdc-dialog-supporting-text-line-height, 14px);font-size:var(--mdc-dialog-supporting-text-size, 14px);font-weight:var(--mdc-dialog-supporting-text-weight, 500);letter-spacing:var(--mdc-dialog-supporting-text-tracking, 1px)}.mat-mdc-dialog-container .mdc-dialog__content{color:var(--mdc-dialog-supporting-text-color, black)}.mat-mdc-dialog-container .mdc-dialog__container{transition-duration:var(--mat-dialog-transition-duration, 0ms)}.mat-mdc-dialog-container._mat-animation-noopable .mdc-dialog__container{transition:none}.mat-mdc-dialog-content{display:block}.mat-mdc-dialog-actions{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: i1.FocusMonitor }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_ref, config, _containerInstance) {\n        this._ref = _ref;\n        this._containerInstance = _containerInstance;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* MatDialogState.OPEN */;\n        this.disableClose = config.disableClose;\n        this.id = _ref.id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _ref.overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._finishDialogClose();\n        });\n        merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n            if (!this.disableClose) {\n                event.preventDefault();\n                _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._ref.overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = 1 /* MatDialogState.CLOSING */;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._ref.closed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._ref.backdropClick;\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._ref.keydownEvents;\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._ref.config.positionStrategy;\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._ref.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._ref.updateSize(width, height);\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._ref.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._ref.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* MatDialogState.CLOSED */;\n        this._ref.close(this._result, { focusOrigin: this._closeInteractionType });\n        this.componentInstance = null;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    ref._closeInteractionType = interactionType;\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatMdcDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-mdc-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-mdc-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\nclass _MatDialogBase {\n    constructor(_overlay, injector, _defaultOptions, _parentDialog, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _animationMode) {\n        this._overlay = _overlay;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._dialogRefConstructor = _dialogRefConstructor;\n        this._dialogContainerType = _dialogContainerType;\n        this._dialogDataToken = _dialogDataToken;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._idPrefix = 'mat-dialog-';\n        this.dialogConfigClass = MatDialogConfig;\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n        this._dialog = injector.get(Dialog);\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    open(componentOrTemplateRef, config) {\n        let dialogRef;\n        config = Object.assign(Object.assign({}, (this._defaultOptions || new MatDialogConfig())), config);\n        config.id = config.id || `${this._idPrefix}${uniqueId++}`;\n        config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n        const cdkRef = this._dialog.open(componentOrTemplateRef, Object.assign(Object.assign({}, config), { positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(), \n            // Disable closing since we need to sync it up to the animation ourselves.\n            disableClose: true, \n            // Disable closing on destroy, because this service cleans up its open dialogs as well.\n            // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n            // the dialogs immediately whereas we want it to wait for the animations to finish.\n            closeOnDestroy: false, container: {\n                type: this._dialogContainerType,\n                providers: () => [\n                    // Provide our config as the CDK config as well since it has the same interface as the\n                    // CDK one, but it contains the actual values passed in by the user for things like\n                    // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n                    { provide: this.dialogConfigClass, useValue: config },\n                    { provide: DialogConfig, useValue: config },\n                ],\n            }, templateContext: () => ({ dialogRef }), providers: (ref, cdkConfig, dialogContainer) => {\n                dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n                dialogRef.updatePosition(config === null || config === void 0 ? void 0 : config.position);\n                return [\n                    { provide: this._dialogContainerType, useValue: dialogContainer },\n                    { provide: this._dialogDataToken, useValue: cdkConfig.data },\n                    { provide: this._dialogRefConstructor, useValue: dialogRef },\n                ];\n            } }));\n        // This can't be assigned in the `providers` callback, because\n        // the instance hasn't been assigned to the CDK ref yet.\n        dialogRef.componentInstance = cdkRef.componentInstance;\n        this.openDialogs.push(dialogRef);\n        this.afterOpened.next(dialogRef);\n        dialogRef.afterClosed().subscribe(() => {\n            const index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                if (!this.openDialogs.length) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        });\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            dialogs[i].close();\n        }\n    }\n}\n_MatDialogBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: _MatDialogBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Injectable });\n_MatDialogBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: _MatDialogBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: _MatDialogBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: undefined }, { type: undefined }, { type: i1$1.OverlayContainer }, { type: undefined }, { type: i0.Type }, { type: i0.Type }, { type: i0.InjectionToken }, { type: undefined }]; } });\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, defaultOptions, scrollStrategy, parentDialog, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    overlayContainer, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    animationMode) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\n        this._idPrefix = 'mat-mdc-dialog-';\n    }\n}\nMatDialog.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_DIALOG_SCROLL_STRATEGY }, { token: MatDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE$1, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nMatDialog.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialog });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\n                        type: Optional\n                    }] }, { type: MatDialogConfig, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_DIALOG_DEFAULT_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_DIALOG_SCROLL_STRATEGY]\n                    }] }, { type: MatDialog, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE$1]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialogClose, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogClose.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0\", type: MatDialogClose, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: MatDialogRef, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ElementRef }, { type: MatDialog }];\n    }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = `mat-mdc-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialogTitle, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0\", type: MatDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-mdc-dialog-title mdc-dialog__title\" }, exportAs: [\"matDialogTitle\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    host: {\n                        'class': 'mat-mdc-dialog-title mdc-dialog__title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: MatDialogRef, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ElementRef }, { type: MatDialog }];\n    }, propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0\", type: MatDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-mdc-dialog-content mdc-dialog__content\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-mdc-dialog-content mdc-dialog__content' },\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n    constructor() {\n        /**\n         * Horizontal alignment of action buttons.\n         */\n        this.align = 'start';\n    }\n}\nMatDialogActions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialogActions, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatDialogActions.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0\", type: MatDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-mdc-dialog-actions-align-center\": \"align === \\\"center\\\"\", \"class.mat-mdc-dialog-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-mdc-dialog-actions mdc-dialog__actions\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    host: {\n                        'class': 'mat-mdc-dialog-actions mdc-dialog__actions',\n                        '[class.mat-mdc-dialog-actions-align-center]': 'align === \"center\"',\n                        '[class.mat-mdc-dialog-actions-align-end]': 'align === \"end\"',\n                    },\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }] } });\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-mdc-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialogModule, declarations: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogActions,\n        MatDialogContent], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule], exports: [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogContent,\n        MatDialogActions,\n        MatCommonModule] });\nMatDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialogModule, providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule],\n                    exports: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogContent,\n                        MatDialogActions,\n                        MatCommonModule,\n                    ],\n                    declarations: [\n                        MatDialogContainer,\n                        MatDialogClose,\n                        MatDialogTitle,\n                        MatDialogActions,\n                        MatDialogContent,\n                    ],\n                    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n */\nconst _defaultParams = {\n    params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' },\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', group([\n            animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), _defaultParams),\n        transition('* => void, * => exit', group([\n            animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), _defaultParams),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, _defaultParams, matDialogAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}