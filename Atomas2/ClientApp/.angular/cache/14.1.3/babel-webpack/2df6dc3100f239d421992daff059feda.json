{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Optional, SkipSelf, Input, EventEmitter, Self, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, map, take, startWith, tap, switchMap } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\n\nfunction extendStyles(dest, source, importantProperties) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      const value = source[key];\n\n      if (value) {\n        dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n      } else {\n        dest.removeProperty(key);\n      }\n    }\n  }\n\n  return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\n\n\nfunction toggleNativeDragInteractions(element, enable) {\n  const userSelect = enable ? '' : 'none';\n  extendStyles(element.style, {\n    'touch-action': enable ? '' : 'none',\n    '-webkit-user-drag': enable ? '' : 'none',\n    '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n    'user-select': userSelect,\n    '-ms-user-select': userSelect,\n    '-webkit-user-select': userSelect,\n    '-moz-user-select': userSelect\n  });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\n\n\nfunction toggleVisibility(element, enable, importantProperties) {\n  extendStyles(element.style, {\n    position: enable ? '' : 'fixed',\n    top: enable ? '' : '0',\n    opacity: enable ? '' : '0',\n    left: enable ? '' : '-999em'\n  }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\n\n\nfunction combineTransforms(transform, initialTransform) {\n  return initialTransform && initialTransform != 'none' ? transform + ' ' + initialTransform : transform;\n}\n/** Parses a CSS time value to milliseconds. */\n\n\nfunction parseCssTimeUnitsToMs(value) {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\n\n\nfunction getTransformTransitionDurationInMs(element) {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all'); // If there's no transition for `all` or `transform`, we shouldn't do anything.\n\n  if (!property) {\n    return 0;\n  } // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n\n\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) + parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\n\n\nfunction parseCssPropertyValue(computedStyle, name) {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n/** Gets a mutable version of an element's bounding `ClientRect`. */\n\n\nfunction getMutableClientRect(element) {\n  const clientRect = element.getBoundingClientRect(); // We need to clone the `clientRect` here, because all the values on it are readonly\n  // and we need to be able to update them. Also we can't use a spread here, because\n  // the values on a `ClientRect` aren't own properties. See:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n\n  return {\n    top: clientRect.top,\n    right: clientRect.right,\n    bottom: clientRect.bottom,\n    left: clientRect.left,\n    width: clientRect.width,\n    height: clientRect.height,\n    x: clientRect.x,\n    y: clientRect.y\n  };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\n\n\nfunction isInsideClientRect(clientRect, x, y) {\n  const {\n    top,\n    bottom,\n    left,\n    right\n  } = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\n\n\nfunction adjustClientRect(clientRect, top, left) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\n\n\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n  const {\n    top,\n    right,\n    bottom,\n    left,\n    width,\n    height\n  } = rect;\n  const xThreshold = width * threshold;\n  const yThreshold = height * threshold;\n  return pointerY > top - yThreshold && pointerY < bottom + yThreshold && pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\n\n\nclass ParentPositionTracker {\n  constructor(_document) {\n    this._document = _document;\n    /** Cached positions of the scrollable parent elements. */\n\n    this.positions = new Map();\n  }\n  /** Clears the cached positions. */\n\n\n  clear() {\n    this.positions.clear();\n  }\n  /** Caches the positions. Should be called at the beginning of a drag sequence. */\n\n\n  cache(elements) {\n    this.clear();\n    this.positions.set(this._document, {\n      scrollPosition: this.getViewportScrollPosition()\n    });\n    elements.forEach(element => {\n      this.positions.set(element, {\n        scrollPosition: {\n          top: element.scrollTop,\n          left: element.scrollLeft\n        },\n        clientRect: getMutableClientRect(element)\n      });\n    });\n  }\n  /** Handles scrolling while a drag is taking place. */\n\n\n  handleScroll(event) {\n    const target = _getEventTarget(event);\n\n    const cachedPosition = this.positions.get(target);\n\n    if (!cachedPosition) {\n      return null;\n    }\n\n    const scrollPosition = cachedPosition.scrollPosition;\n    let newTop;\n    let newLeft;\n\n    if (target === this._document) {\n      const viewportScrollPosition = this.getViewportScrollPosition();\n      newTop = viewportScrollPosition.top;\n      newLeft = viewportScrollPosition.left;\n    } else {\n      newTop = target.scrollTop;\n      newLeft = target.scrollLeft;\n    }\n\n    const topDifference = scrollPosition.top - newTop;\n    const leftDifference = scrollPosition.left - newLeft; // Go through and update the cached positions of the scroll\n    // parents that are inside the element that was scrolled.\n\n    this.positions.forEach((position, node) => {\n      if (position.clientRect && target !== node && target.contains(node)) {\n        adjustClientRect(position.clientRect, topDifference, leftDifference);\n      }\n    });\n    scrollPosition.top = newTop;\n    scrollPosition.left = newLeft;\n    return {\n      top: topDifference,\n      left: leftDifference\n    };\n  }\n  /**\n   * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n   * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n   * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n   * if the element is offset by something like the `BlockScrollStrategy`.\n   */\n\n\n  getViewportScrollPosition() {\n    return {\n      top: window.scrollY,\n      left: window.scrollX\n    };\n  }\n\n}\n/** Creates a deep clone of an element. */\n\n\nfunction deepCloneNode(node) {\n  const clone = node.cloneNode(true);\n  const descendantsWithId = clone.querySelectorAll('[id]');\n  const nodeName = node.nodeName.toLowerCase(); // Remove the `id` to avoid having multiple elements with the same id on the page.\n\n  clone.removeAttribute('id');\n\n  for (let i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n\n  if (nodeName === 'canvas') {\n    transferCanvasData(node, clone);\n  } else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n    transferInputData(node, clone);\n  }\n\n  transferData('canvas', node, clone, transferCanvasData);\n  transferData('input, textarea, select', node, clone, transferInputData);\n  return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\n\n\nfunction transferData(selector, node, clone, callback) {\n  const descendantElements = node.querySelectorAll(selector);\n\n  if (descendantElements.length) {\n    const cloneElements = clone.querySelectorAll(selector);\n\n    for (let i = 0; i < descendantElements.length; i++) {\n      callback(descendantElements[i], cloneElements[i]);\n    }\n  }\n} // Counter for unique cloned radio button names.\n\n\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\n\nfunction transferInputData(source, clone) {\n  // Browsers throw an error when assigning the value of a file input programmatically.\n  if (clone.type !== 'file') {\n    clone.value = source.value;\n  } // Radio button `name` attributes must be unique for radio button groups\n  // otherwise original radio buttons can lose their checked state\n  // once the clone is inserted in the DOM.\n\n\n  if (clone.type === 'radio' && clone.name) {\n    clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n  }\n}\n/** Transfers the data of one canvas element to another. */\n\n\nfunction transferCanvasData(source, clone) {\n  const context = clone.getContext('2d');\n\n  if (context) {\n    // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n    // We can't do much about it so just ignore the error.\n    try {\n      context.drawImage(source, 0, 0);\n    } catch {}\n  }\n}\n/** Options that can be used to bind a passive event listener. */\n\n\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/** Options that can be used to bind an active event listener. */\n\nconst activeEventListenerOptions = normalizePassiveListenerOptions({\n  passive: false\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\n\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\n\nconst dragImportantProperties = new Set([// Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n'position']);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\n\nclass DragRef {\n  /** Whether starting to drag this element is disabled. */\n  get disabled() {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n\n  set disabled(value) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n\n      this._toggleNativeDragInteractions();\n\n      this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n    }\n  }\n\n  constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n    this._config = _config;\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._dragDropRegistry = _dragDropRegistry;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n\n    this._passiveTransform = {\n      x: 0,\n      y: 0\n    };\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     */\n\n    this._hasStartedDragging = false;\n    /** Emits when the item is being moved. */\n\n    this._moveEvents = new Subject();\n    /** Subscription to pointer movement events. */\n\n    this._pointerMoveSubscription = Subscription.EMPTY;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n\n    this._pointerUpSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being scrolled. */\n\n    this._scrollSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being resized. */\n\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Cached reference to the boundary element. */\n\n    this._boundaryElement = null;\n    /** Whether the native dragging interactions have been enabled on the root element. */\n\n    this._nativeInteractionsEnabled = true;\n    /** Elements that can be used to drag the draggable item. */\n\n    this._handles = [];\n    /** Registered handles that are currently disabled. */\n\n    this._disabledHandles = new Set();\n    /** Layout direction of the item. */\n\n    this._direction = 'ltr';\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n\n    this.dragStartDelay = 0;\n    this._disabled = false;\n    /** Emits as the drag sequence is being prepared. */\n\n    this.beforeStarted = new Subject();\n    /** Emits when the user starts dragging the item. */\n\n    this.started = new Subject();\n    /** Emits when the user has released a drag item, before any animations have started. */\n\n    this.released = new Subject();\n    /** Emits when the user stops dragging an item in the container. */\n\n    this.ended = new Subject();\n    /** Emits when the user has moved the item into a new container. */\n\n    this.entered = new Subject();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n\n    this.exited = new Subject();\n    /** Emits when the user drops the item inside a container. */\n\n    this.dropped = new Subject();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n\n    this.moved = this._moveEvents;\n    /** Handler for the `mousedown`/`touchstart` events. */\n\n    this._pointerDown = event => {\n      this.beforeStarted.next(); // Delegate the event based on whether it started from a handle or the element itself.\n\n      if (this._handles.length) {\n        const targetHandle = this._getTargetHandle(event);\n\n        if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n          this._initializeDragSequence(targetHandle, event);\n        }\n      } else if (!this.disabled) {\n        this._initializeDragSequence(this._rootElement, event);\n      }\n    };\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n\n\n    this._pointerMove = event => {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n\n      if (!this._hasStartedDragging) {\n        const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n        const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n        const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold; // Only start dragging after the user has moved more than the minimum distance in either\n        // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n        // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n        // per pixel of movement (e.g. if the user moves their pointer quickly).\n\n        if (isOverThreshold) {\n          const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n\n          const container = this._dropContainer;\n\n          if (!isDelayElapsed) {\n            this._endDragSequence(event);\n\n            return;\n          } // Prevent other drag sequences from starting while something in the container is still\n          // being dragged. This can happen while we're waiting for the drop animation to finish\n          // and can cause errors, because some elements might still be moving around.\n\n\n          if (!container || !container.isDragging() && !container.isReceiving()) {\n            // Prevent the default action as soon as the dragging sequence is considered as\n            // \"started\" since waiting for the next event can allow the device to begin scrolling.\n            event.preventDefault();\n            this._hasStartedDragging = true;\n\n            this._ngZone.run(() => this._startDragSequence(event));\n          }\n        }\n\n        return;\n      } // We prevent the default action down here so that we know that dragging has started. This is\n      // important for touch devices where doing this too early can unnecessarily block scrolling,\n      // if there's a dragging delay.\n\n\n      event.preventDefault();\n\n      const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n\n      this._hasMoved = true;\n      this._lastKnownPointerPosition = pointerPosition;\n\n      this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n      if (this._dropContainer) {\n        this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n      } else {\n        // If there's a position constraint function, we want the element's top/left to be at the\n        // specific position on the page. Use the initial position as a reference if that's the case.\n        const offset = this.constrainPosition ? this._initialClientRect : this._pickupPositionOnPage;\n        const activeTransform = this._activeTransform;\n        activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n        activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n\n        this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n      } // Since this event gets fired for every pixel while dragging, we only\n      // want to fire it if the consumer opted into it. Also we have to\n      // re-enter the zone because we run all of the events on the outside.\n\n\n      if (this._moveEvents.observers.length) {\n        this._ngZone.run(() => {\n          this._moveEvents.next({\n            source: this,\n            pointerPosition: constrainedPointerPosition,\n            event,\n            distance: this._getDragDistance(constrainedPointerPosition),\n            delta: this._pointerDirectionDelta\n          });\n        });\n      }\n    };\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n\n\n    this._pointerUp = event => {\n      this._endDragSequence(event);\n    };\n    /** Handles a native `dragstart` event. */\n\n\n    this._nativeDragStart = event => {\n      if (this._handles.length) {\n        const targetHandle = this._getTargetHandle(event);\n\n        if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n          event.preventDefault();\n        }\n      } else if (!this.disabled) {\n        // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n        // but some cases like dragging of links can slip through (see #24403).\n        event.preventDefault();\n      }\n    };\n\n    this.withRootElement(element).withParent(_config.parentDragRef || null);\n    this._parentPositions = new ParentPositionTracker(_document);\n\n    _dragDropRegistry.registerDragItem(this);\n  }\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n\n\n  getPlaceholderElement() {\n    return this._placeholder;\n  }\n  /** Returns the root draggable element. */\n\n\n  getRootElement() {\n    return this._rootElement;\n  }\n  /**\n   * Gets the currently-visible element that represents the drag item.\n   * While dragging this is the placeholder, otherwise it's the root element.\n   */\n\n\n  getVisibleElement() {\n    return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n  }\n  /** Registers the handles that can be used to drag the element. */\n\n\n  withHandles(handles) {\n    this._handles = handles.map(handle => coerceElement(handle));\n\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n\n    this._toggleNativeDragInteractions(); // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n    // the set, rather than iterate over it and filter out the destroyed handles, because while\n    // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n    // use an array internally which may throw an error.\n\n\n    const disabledHandles = new Set();\n\n    this._disabledHandles.forEach(handle => {\n      if (this._handles.indexOf(handle) > -1) {\n        disabledHandles.add(handle);\n      }\n    });\n\n    this._disabledHandles = disabledHandles;\n    return this;\n  }\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n\n\n  withPreviewTemplate(template) {\n    this._previewTemplate = template;\n    return this;\n  }\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n\n\n  withPlaceholderTemplate(template) {\n    this._placeholderTemplate = template;\n    return this;\n  }\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n\n\n  withRootElement(rootElement) {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n      });\n\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n      this._ownerSVGElement = this._rootElement.ownerSVGElement;\n    }\n\n    return this;\n  }\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n\n\n  withBoundaryElement(boundaryElement) {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n\n    this._resizeSubscription.unsubscribe();\n\n    if (boundaryElement) {\n      this._resizeSubscription = this._viewportRuler.change(10).subscribe(() => this._containInsideBoundaryOnResize());\n    }\n\n    return this;\n  }\n  /** Sets the parent ref that the ref is nested in.  */\n\n\n  withParent(parent) {\n    this._parentDragRef = parent;\n    return this;\n  }\n  /** Removes the dragging functionality from the DOM element. */\n\n\n  dispose() {\n    this._removeRootElementListeners(this._rootElement); // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n\n\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      this._rootElement?.remove();\n    }\n\n    this._anchor?.remove();\n\n    this._destroyPreview();\n\n    this._destroyPlaceholder();\n\n    this._dragDropRegistry.removeDragItem(this);\n\n    this._removeSubscriptions();\n\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n\n    this._moveEvents.complete();\n\n    this._handles = [];\n\n    this._disabledHandles.clear();\n\n    this._dropContainer = undefined;\n\n    this._resizeSubscription.unsubscribe();\n\n    this._parentPositions.clear();\n\n    this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate = this._previewTemplate = this._anchor = this._parentDragRef = null;\n  }\n  /** Checks whether the element is currently being dragged. */\n\n\n  isDragging() {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n  /** Resets a standalone drag item to its initial position. */\n\n\n  reset() {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    this._passiveTransform = {\n      x: 0,\n      y: 0\n    };\n  }\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n\n\n  disableHandle(handle) {\n    if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n\n      toggleNativeDragInteractions(handle, true);\n    }\n  }\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n\n\n  enableHandle(handle) {\n    if (this._disabledHandles.has(handle)) {\n      this._disabledHandles.delete(handle);\n\n      toggleNativeDragInteractions(handle, this.disabled);\n    }\n  }\n  /** Sets the layout direction of the draggable item. */\n\n\n  withDirection(direction) {\n    this._direction = direction;\n    return this;\n  }\n  /** Sets the container that the item is part of. */\n\n\n  _withDropContainer(container) {\n    this._dropContainer = container;\n  }\n  /**\n   * Gets the current position in pixels the draggable outside of a drop container.\n   */\n\n\n  getFreeDragPosition() {\n    const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n    return {\n      x: position.x,\n      y: position.y\n    };\n  }\n  /**\n   * Sets the current position in pixels the draggable outside of a drop container.\n   * @param value New position to be set.\n   */\n\n\n  setFreeDragPosition(value) {\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    this._passiveTransform.x = value.x;\n    this._passiveTransform.y = value.y;\n\n    if (!this._dropContainer) {\n      this._applyRootElementTransform(value.x, value.y);\n    }\n\n    return this;\n  }\n  /**\n   * Sets the container into which to insert the preview element.\n   * @param value Container into which to insert the preview.\n   */\n\n\n  withPreviewContainer(value) {\n    this._previewContainer = value;\n    return this;\n  }\n  /** Updates the item's sort order based on the last-known pointer position. */\n\n\n  _sortFromLastPointerPosition() {\n    const position = this._lastKnownPointerPosition;\n\n    if (position && this._dropContainer) {\n      this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n    }\n  }\n  /** Unsubscribes from the global subscriptions. */\n\n\n  _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n\n    this._pointerUpSubscription.unsubscribe();\n\n    this._scrollSubscription.unsubscribe();\n  }\n  /** Destroys the preview element and its ViewRef. */\n\n\n  _destroyPreview() {\n    this._preview?.remove();\n    this._previewRef?.destroy();\n    this._preview = this._previewRef = null;\n  }\n  /** Destroys the placeholder element and its ViewRef. */\n\n\n  _destroyPlaceholder() {\n    this._placeholder?.remove();\n    this._placeholderRef?.destroy();\n    this._placeholder = this._placeholderRef = null;\n  }\n  /**\n   * Clears subscriptions and stops the dragging sequence.\n   * @param event Browser event object that ended the sequence.\n   */\n\n\n  _endDragSequence(event) {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeSubscriptions();\n\n    this._dragDropRegistry.stopDragging(this);\n\n    this._toggleNativeDragInteractions();\n\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    this.released.next({\n      source: this,\n      event\n    });\n\n    if (this._dropContainer) {\n      // Stop scrolling immediately, instead of waiting for the animation to finish.\n      this._dropContainer._stopScrolling();\n\n      this._animatePreviewToPlaceholder().then(() => {\n        this._cleanupDragArtifacts(event);\n\n        this._cleanupCachedDimensions();\n\n        this._dragDropRegistry.stopDragging(this);\n      });\n    } else {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n\n      const pointerPosition = this._getPointerPositionOnPage(event);\n\n      this._passiveTransform.y = this._activeTransform.y;\n\n      this._ngZone.run(() => {\n        this.ended.next({\n          source: this,\n          distance: this._getDragDistance(pointerPosition),\n          dropPoint: pointerPosition,\n          event\n        });\n      });\n\n      this._cleanupCachedDimensions();\n\n      this._dragDropRegistry.stopDragging(this);\n    }\n  }\n  /** Starts the dragging sequence. */\n\n\n  _startDragSequence(event) {\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    this._toggleNativeDragInteractions();\n\n    const dropContainer = this._dropContainer;\n\n    if (dropContainer) {\n      const element = this._rootElement;\n      const parent = element.parentNode;\n\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      const anchor = this._anchor = this._anchor || this._document.createComment(''); // Needs to happen before the root element is moved.\n\n\n      const shadowRoot = this._getShadowRoot(); // Insert an anchor node so that we can restore the element's position in the DOM.\n\n\n      parent.insertBefore(anchor, element); // There's no risk of transforms stacking when inside a drop container so\n      // we can keep the initial transform up to date any time dragging starts.\n\n      this._initialTransform = element.style.transform || ''; // Create the preview after the initial transform has\n      // been cached, because it can be affected by the transform.\n\n      this._preview = this._createPreviewElement(); // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n\n      toggleVisibility(element, false, dragImportantProperties);\n\n      this._document.body.appendChild(parent.replaceChild(placeholder, element));\n\n      this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n\n      this.started.next({\n        source: this,\n        event\n      }); // Emit before notifying the container.\n\n      dropContainer.start();\n      this._initialContainer = dropContainer;\n      this._initialIndex = dropContainer.getItemIndex(this);\n    } else {\n      this.started.next({\n        source: this,\n        event\n      });\n      this._initialContainer = this._initialIndex = undefined;\n    } // Important to run after we've called `start` on the parent container\n    // so that it has had time to resolve its scrollable parents.\n\n\n    this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n  }\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n\n\n  _initializeDragSequence(referenceElement, event) {\n    // Stop propagation if the item is inside another\n    // draggable so we don't start multiple drag sequences.\n    if (this._parentDragRef) {\n      event.stopPropagation();\n    }\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n    const rootElement = this._rootElement;\n\n    const target = _getEventTarget(event);\n\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime && this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n    const isFakeEvent = isTouchSequence ? isFakeTouchstartFromScreenReader(event) : isFakeMousedownFromScreenReader(event); // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n\n    if (target && target.draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    } // Abort if the user is already dragging or is using a mouse button other than the primary one.\n\n\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n      return;\n    } // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n\n\n    if (this._handles.length) {\n      const rootStyles = rootElement.style;\n      this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n      rootStyles.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._hasStartedDragging = this._hasMoved = false; // Avoid multiple subscriptions and memory leaks when multi touch\n    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n\n    this._removeSubscriptions();\n\n    this._initialClientRect = this._rootElement.getBoundingClientRect();\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n\n    if (this._boundaryElement) {\n      this._boundaryRect = getMutableClientRect(this._boundaryElement);\n    } // If we have a custom preview we can't know ahead of time how large it'll be so we position\n    // it next to the cursor. The exception is when the consumer has opted into making the preview\n    // the same size as the root element, in which case we do know the size.\n\n\n    const previewTemplate = this._previewTemplate;\n    this._pickupPositionInElement = previewTemplate && previewTemplate.template && !previewTemplate.matchSize ? {\n      x: 0,\n      y: 0\n    } : this._getPointerPositionInElement(this._initialClientRect, referenceElement, event);\n\n    const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition = this._getPointerPositionOnPage(event);\n\n    this._pointerDirectionDelta = {\n      x: 0,\n      y: 0\n    };\n    this._pointerPositionAtLastDirectionChange = {\n      x: pointerPosition.x,\n      y: pointerPosition.y\n    };\n    this._dragStartTime = Date.now();\n\n    this._dragDropRegistry.startDragging(this, event);\n  }\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n\n\n  _cleanupDragArtifacts(event) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    toggleVisibility(this._rootElement, true, dragImportantProperties);\n\n    this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n\n    this._destroyPreview();\n\n    this._destroyPlaceholder();\n\n    this._initialClientRect = this._boundaryRect = this._previewRect = this._initialTransform = undefined; // Re-enter the NgZone since we bound `document` events on the outside.\n\n    this._ngZone.run(() => {\n      const container = this._dropContainer;\n      const currentIndex = container.getItemIndex(this);\n\n      const pointerPosition = this._getPointerPositionOnPage(event);\n\n      const distance = this._getDragDistance(pointerPosition);\n\n      const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n\n      this.ended.next({\n        source: this,\n        distance,\n        dropPoint: pointerPosition,\n        event\n      });\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialIndex,\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer,\n        distance,\n        dropPoint: pointerPosition,\n        event\n      });\n      container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n\n\n  _updateActiveDropContainer({\n    x,\n    y\n  }, {\n    x: rawX,\n    y: rawY\n  }) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y); // If we couldn't find a new container to move the item into, and the item has left its\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n\n\n    if (!newContainer && this._dropContainer !== this._initialContainer && this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({\n          item: this,\n          container: this._dropContainer\n        });\n\n        this._dropContainer.exit(this); // Notify the new container that the item has entered.\n\n\n        this._dropContainer = newContainer;\n\n        this._dropContainer.enter(this, x, y, newContainer === this._initialContainer && // If we're re-entering the initial container and sorting is disabled,\n        // put item the into its starting index to begin with.\n        newContainer.sortingDisabled ? this._initialIndex : undefined);\n\n        this.entered.next({\n          item: this,\n          container: newContainer,\n          currentIndex: newContainer.getItemIndex(this)\n        });\n      });\n    } // Dragging may have been interrupted as a result of the events above.\n\n\n    if (this.isDragging()) {\n      this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n\n      this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n\n      if (this.constrainPosition) {\n        this._applyPreviewTransform(x, y);\n      } else {\n        this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n      }\n    }\n  }\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n\n\n  _createPreviewElement() {\n    const previewConfig = this._previewTemplate;\n    const previewClass = this.previewClass;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview;\n\n    if (previewTemplate && previewConfig) {\n      // Measure the element before we've inserted the preview\n      // since the insertion could throw off the measurement.\n      const rootRect = previewConfig.matchSize ? this._initialClientRect : null;\n      const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n      viewRef.detectChanges();\n      preview = getRootNode(viewRef, this._document);\n      this._previewRef = viewRef;\n\n      if (previewConfig.matchSize) {\n        matchElementSize(preview, rootRect);\n      } else {\n        preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n      }\n    } else {\n      preview = deepCloneNode(this._rootElement);\n      matchElementSize(preview, this._initialClientRect);\n\n      if (this._initialTransform) {\n        preview.style.transform = this._initialTransform;\n      }\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      'pointer-events': 'none',\n      // We have to reset the margin, because it can throw off positioning relative to the viewport.\n      'margin': '0',\n      'position': 'fixed',\n      'top': '0',\n      'left': '0',\n      'z-index': `${this._config.zIndex || 1000}`\n    }, dragImportantProperties);\n    toggleNativeDragInteractions(preview, false);\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._direction);\n\n    if (previewClass) {\n      if (Array.isArray(previewClass)) {\n        previewClass.forEach(className => preview.classList.add(className));\n      } else {\n        preview.classList.add(previewClass);\n      }\n    }\n\n    return preview;\n  }\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n\n\n  _animatePreviewToPlaceholder() {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect(); // Apply the class that adds a transition to the preview.\n\n\n    this._preview.classList.add('cdk-drag-animating'); // Move the preview to the placeholder position.\n\n\n    this._applyPreviewTransform(placeholderRect.left, placeholderRect.top); // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n\n\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = event => {\n          if (!event || _getEventTarget(event) === this._preview && event.propertyName === 'transform') {\n            this._preview?.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }; // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n\n\n        const timeout = setTimeout(handler, duration * 1.5);\n\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n  /** Creates an element that will be shown instead of the current element while dragging. */\n\n\n  _createPlaceholderElement() {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder;\n\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n\n      this._placeholderRef.detectChanges();\n\n      placeholder = getRootNode(this._placeholderRef, this._document);\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    } // Stop pointer events on the preview so the user can't\n    // interact with it while the preview is animating.\n\n\n    placeholder.style.pointerEvents = 'none';\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n\n\n  _getPointerPositionInElement(elementRect, referenceElement, event) {\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n\n    const scrollPosition = this._getViewportScrollPosition();\n\n    const x = point.pageX - referenceRect.left - scrollPosition.left;\n    const y = point.pageY - referenceRect.top - scrollPosition.top;\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n  /** Determines the point of the page that was touched by the user. */\n\n\n  _getPointerPositionOnPage(event) {\n    const scrollPosition = this._getViewportScrollPosition();\n\n    const point = isTouchEvent(event) ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n    // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n    // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n    // throwing an error. The value returned here will be incorrect, but since this only\n    // breaks inside a developer tool and the value is only used for secondary information,\n    // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n    event.touches[0] || event.changedTouches[0] || {\n      pageX: 0,\n      pageY: 0\n    } : event;\n    const x = point.pageX - scrollPosition.left;\n    const y = point.pageY - scrollPosition.top; // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n    // coordinate system\n\n    if (this._ownerSVGElement) {\n      const svgMatrix = this._ownerSVGElement.getScreenCTM();\n\n      if (svgMatrix) {\n        const svgPoint = this._ownerSVGElement.createSVGPoint();\n\n        svgPoint.x = x;\n        svgPoint.y = y;\n        return svgPoint.matrixTransform(svgMatrix.inverse());\n      }\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n\n\n  _getConstrainedPointerPosition(point) {\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n    let {\n      x,\n      y\n    } = this.constrainPosition ? this.constrainPosition(point, this, this._initialClientRect, this._pickupPositionInElement) : point;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      y = this._pickupPositionOnPage.y - (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      x = this._pickupPositionOnPage.x - (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n    }\n\n    if (this._boundaryRect) {\n      // If not using a custom constrain we need to account for the pickup position in the element\n      // otherwise we do not need to do this, as it has already been accounted for\n      const {\n        x: pickupX,\n        y: pickupY\n      } = !this.constrainPosition ? this._pickupPositionInElement : {\n        x: 0,\n        y: 0\n      };\n      const boundaryRect = this._boundaryRect;\n\n      const {\n        width: previewWidth,\n        height: previewHeight\n      } = this._getPreviewRect();\n\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewWidth - pickupX);\n      x = clamp$1(x, minX, maxX);\n      y = clamp$1(y, minY, maxY);\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n\n\n  _updatePointerDirectionDelta(pointerPositionOnPage) {\n    const {\n      x,\n      y\n    } = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange; // Amount of pixels the user has dragged since the last time the direction changed.\n\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y); // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n\n\n  _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this._handles.length > 0 || !this.isDragging();\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n  /** Removes the manually-added event listeners from the root element. */\n\n\n  _removeRootElementListeners(element) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n  }\n  /**\n   * Applies a `transform` to the root element, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n\n\n  _applyRootElementTransform(x, y) {\n    const transform = getTransform(x, y);\n    const styles = this._rootElement.style; // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    // Should be excluded none because none + translate3d(x, y, x) is invalid css\n\n    if (this._initialTransform == null) {\n      this._initialTransform = styles.transform && styles.transform != 'none' ? styles.transform : '';\n    } // Preserve the previous `transform` value, if there was one. Note that we apply our own\n    // transform before the user's, because things like rotation can affect which direction\n    // the element will be translated towards.\n\n\n    styles.transform = combineTransforms(transform, this._initialTransform);\n  }\n  /**\n   * Applies a `transform` to the preview, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n\n\n  _applyPreviewTransform(x, y) {\n    // Only apply the initial transform if the preview is a clone of the original element, otherwise\n    // it could be completely different and the transform might not make sense anymore.\n    const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n    const transform = getTransform(x, y);\n    this._preview.style.transform = combineTransforms(transform, initialTransform);\n  }\n  /**\n   * Gets the distance that the user has dragged during the current drag sequence.\n   * @param currentPosition Current position of the user's pointer.\n   */\n\n\n  _getDragDistance(currentPosition) {\n    const pickupPosition = this._pickupPositionOnPage;\n\n    if (pickupPosition) {\n      return {\n        x: currentPosition.x - pickupPosition.x,\n        y: currentPosition.y - pickupPosition.y\n      };\n    }\n\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n\n\n  _cleanupCachedDimensions() {\n    this._boundaryRect = this._previewRect = undefined;\n\n    this._parentPositions.clear();\n  }\n  /**\n   * Checks whether the element is still inside its boundary after the viewport has been resized.\n   * If not, the position is adjusted so that the element fits again.\n   */\n\n\n  _containInsideBoundaryOnResize() {\n    let {\n      x,\n      y\n    } = this._passiveTransform;\n\n    if (x === 0 && y === 0 || this.isDragging() || !this._boundaryElement) {\n      return;\n    } // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n\n\n    const elementRect = this._rootElement.getBoundingClientRect();\n\n    const boundaryRect = this._boundaryElement.getBoundingClientRect(); // It's possible that the element got hidden away after dragging (e.g. by switching to a\n    // different tab). Don't do anything in this case so we don't clear the user's position.\n\n\n    if (boundaryRect.width === 0 && boundaryRect.height === 0 || elementRect.width === 0 && elementRect.height === 0) {\n      return;\n    }\n\n    const leftOverflow = boundaryRect.left - elementRect.left;\n    const rightOverflow = elementRect.right - boundaryRect.right;\n    const topOverflow = boundaryRect.top - elementRect.top;\n    const bottomOverflow = elementRect.bottom - boundaryRect.bottom; // If the element has become wider than the boundary, we can't\n    // do much to make it fit so we just anchor it to the left.\n\n    if (boundaryRect.width > elementRect.width) {\n      if (leftOverflow > 0) {\n        x += leftOverflow;\n      }\n\n      if (rightOverflow > 0) {\n        x -= rightOverflow;\n      }\n    } else {\n      x = 0;\n    } // If the element has become taller than the boundary, we can't\n    // do much to make it fit so we just anchor it to the top.\n\n\n    if (boundaryRect.height > elementRect.height) {\n      if (topOverflow > 0) {\n        y += topOverflow;\n      }\n\n      if (bottomOverflow > 0) {\n        y -= bottomOverflow;\n      }\n    } else {\n      y = 0;\n    }\n\n    if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n      this.setFreeDragPosition({\n        y,\n        x\n      });\n    }\n  }\n  /** Gets the drag start delay, based on the event type. */\n\n\n  _getDragStartDelay(event) {\n    const value = this.dragStartDelay;\n\n    if (typeof value === 'number') {\n      return value;\n    } else if (isTouchEvent(event)) {\n      return value.touch;\n    }\n\n    return value ? value.mouse : 0;\n  }\n  /** Updates the internal state of the draggable element when scrolling has occurred. */\n\n\n  _updateOnScroll(event) {\n    const scrollDifference = this._parentPositions.handleScroll(event);\n\n    if (scrollDifference) {\n      const target = _getEventTarget(event); // ClientRect dimensions are based on the scroll position of the page and its parent\n      // node so we have to update the cached boundary ClientRect if the user has scrolled.\n\n\n      if (this._boundaryRect && target !== this._boundaryElement && target.contains(this._boundaryElement)) {\n        adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n      }\n\n      this._pickupPositionOnPage.x += scrollDifference.left;\n      this._pickupPositionOnPage.y += scrollDifference.top; // If we're in free drag mode, we have to update the active transform, because\n      // it isn't relative to the viewport like the preview inside a drop list.\n\n      if (!this._dropContainer) {\n        this._activeTransform.x -= scrollDifference.left;\n        this._activeTransform.y -= scrollDifference.top;\n\n        this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n      }\n    }\n  }\n  /** Gets the scroll position of the viewport. */\n\n\n  _getViewportScrollPosition() {\n    return this._parentPositions.positions.get(this._document)?.scrollPosition || this._parentPositions.getViewportScrollPosition();\n  }\n  /**\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n   * than saving it in property directly on init, because we want to resolve it as late as possible\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n   */\n\n\n  _getShadowRoot() {\n    if (this._cachedShadowRoot === undefined) {\n      this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n    }\n\n    return this._cachedShadowRoot;\n  }\n  /** Gets the element into which the drag preview should be inserted. */\n\n\n  _getPreviewInsertionPoint(initialParent, shadowRoot) {\n    const previewContainer = this._previewContainer || 'global';\n\n    if (previewContainer === 'parent') {\n      return initialParent;\n    }\n\n    if (previewContainer === 'global') {\n      const documentRef = this._document; // We can't use the body if the user is in fullscreen mode,\n      // because the preview will render under the fullscreen element.\n      // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n\n      return shadowRoot || documentRef.fullscreenElement || documentRef.webkitFullscreenElement || documentRef.mozFullScreenElement || documentRef.msFullscreenElement || documentRef.body;\n    }\n\n    return coerceElement(previewContainer);\n  }\n  /** Lazily resolves and returns the dimensions of the preview. */\n\n\n  _getPreviewRect() {\n    // Cache the preview element rect if we haven't cached it already or if\n    // we cached it too early before the element dimensions were computed.\n    if (!this._previewRect || !this._previewRect.width && !this._previewRect.height) {\n      this._previewRect = this._preview ? this._preview.getBoundingClientRect() : this._initialClientRect;\n    }\n\n    return this._previewRect;\n  }\n  /** Gets a handle that is the target of an event. */\n\n\n  _getTargetHandle(event) {\n    return this._handles.find(handle => {\n      return event.target && (event.target === handle || handle.contains(event.target));\n    });\n  }\n\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\n\n\nfunction getTransform(x, y) {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\n\n\nfunction clamp$1(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\n\n\nfunction isTouchEvent(event) {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\n\n\nfunction getRootNode(viewRef, _document) {\n  const rootNodes = viewRef.rootNodes;\n\n  if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n    return rootNodes[0];\n  }\n\n  const wrapper = _document.createElement('div');\n\n  rootNodes.forEach(node => wrapper.appendChild(node));\n  return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\n\n\nfunction matchElementSize(target, sourceRect) {\n  target.style.width = `${sourceRect.width}px`;\n  target.style.height = `${sourceRect.height}px`;\n  target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\n\n\nfunction moveItemInArray(array, fromIndex, toIndex) {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\n\n\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\n\n\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n/** Clamps a number between zero and a maximum. */\n\n\nfunction clamp(value, max) {\n  return Math.max(0, Math.min(max, value));\n}\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\n\n\nclass SingleAxisSortStrategy {\n  constructor(_element, _dragDropRegistry) {\n    this._element = _element;\n    this._dragDropRegistry = _dragDropRegistry;\n    /** Cache of the dimensions of all the items inside the container. */\n\n    this._itemPositions = [];\n    /** Direction in which the list is oriented. */\n\n    this.orientation = 'vertical';\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n\n    this._previousSwap = {\n      drag: null,\n      delta: 0,\n      overlaps: false\n    };\n  }\n  /**\n   * To be called when the drag sequence starts.\n   * @param items Items that are currently in the list.\n   */\n\n\n  start(items) {\n    this.withItems(items);\n  }\n  /**\n   * To be called when an item is being sorted.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n\n\n  sort(item, pointerX, pointerY, pointerDelta) {\n    const siblings = this._itemPositions;\n\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return null;\n    }\n\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1; // How many pixels the item's placeholder should be offset.\n\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta); // How many pixels all the other items should be offset.\n\n\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta); // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n\n\n    const oldOrder = siblings.slice(); // Shuffle the array in place.\n\n    moveItemInArray(siblings, currentIndex, newIndex);\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() : sibling.drag.getRootElement(); // Update the offset to reflect the new position.\n\n      sibling.offset += offset; // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    }); // Note that it's important that we do this after the client rects have been adjusted.\n\n    this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    return {\n      previousIndex: currentIndex,\n      currentIndex: newIndex\n    };\n  }\n  /**\n   * Called when an item is being moved into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\n   *   out automatically.\n   */\n\n\n  enter(item, pointerX, pointerY, index) {\n    const newIndex = index == null || index < 0 ? // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    this._getItemIndexFromPointerPosition(item, pointerX, pointerY) : index;\n    const activeDraggables = this._activeDraggables;\n    const currentIndex = activeDraggables.indexOf(item);\n    const placeholder = item.getPlaceholderElement();\n    let newPositionReference = activeDraggables[newIndex]; // If the item at the new position is the same as the item that is being dragged,\n    // it means that we're trying to restore the item to its initial position. In this\n    // case we should use the next item from the list as the reference.\n\n    if (newPositionReference === item) {\n      newPositionReference = activeDraggables[newIndex + 1];\n    } // If we didn't find a new position reference, it means that either the item didn't start off\n    // in this container, or that the item requested to be inserted at the end of the list.\n\n\n    if (!newPositionReference && (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) && this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n      newPositionReference = activeDraggables[0];\n    } // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n\n\n    if (currentIndex > -1) {\n      activeDraggables.splice(currentIndex, 1);\n    } // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n\n\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement.insertBefore(placeholder, element);\n      activeDraggables.splice(newIndex, 0, item);\n    } else {\n      coerceElement(this._element).appendChild(placeholder);\n      activeDraggables.push(item);\n    } // The transform needs to be cleared so it doesn't throw off the measurements.\n\n\n    placeholder.style.transform = ''; // Note that usually `start` is called together with `enter` when an item goes into a new\n    // container. This will cache item positions, but we need to refresh them since the amount\n    // of items has changed.\n\n    this._cacheItemPositions();\n  }\n  /** Sets the items that are currently part of the list. */\n\n\n  withItems(items) {\n    this._activeDraggables = items.slice();\n\n    this._cacheItemPositions();\n  }\n  /** Assigns a sort predicate to the strategy. */\n\n\n  withSortPredicate(predicate) {\n    this._sortPredicate = predicate;\n  }\n  /** Resets the strategy to its initial state before dragging was started. */\n\n\n  reset() {\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => {\n      const rootElement = item.getRootElement();\n\n      if (rootElement) {\n        const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n        rootElement.style.transform = initialTransform || '';\n      }\n    });\n\n    this._itemPositions = [];\n    this._activeDraggables = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n    this._previousSwap.overlaps = false;\n  }\n  /**\n   * Gets a snapshot of items currently in the list.\n   * Can include items that we dragged in from another list.\n   */\n\n\n  getActiveItemsSnapshot() {\n    return this._activeDraggables;\n  }\n  /** Gets the index of a specific item. */\n\n\n  getItemIndex(item) {\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this.orientation === 'horizontal' && this.direction === 'rtl' ? this._itemPositions.slice().reverse() : this._itemPositions;\n    return items.findIndex(currentItem => currentItem.drag === item);\n  }\n  /** Used to notify the strategy that the scroll position has changed. */\n\n\n  updateOnScroll(topDifference, leftDifference) {\n    // Since we know the amount that the user has scrolled we can shift all of the\n    // client rectangles ourselves. This is cheaper than re-measuring everything and\n    // we can avoid inconsistent behavior where we might be measuring the element before\n    // its position has changed.\n    this._itemPositions.forEach(({\n      clientRect\n    }) => {\n      adjustClientRect(clientRect, topDifference, leftDifference);\n    }); // We need two loops for this, because we want all of the cached\n    // positions to be up-to-date before we re-sort the item.\n\n\n    this._itemPositions.forEach(({\n      drag\n    }) => {\n      if (this._dragDropRegistry.isDragging(drag)) {\n        // We need to re-sort the item manually, because the pointer move\n        // events won't be dispatched while the user is scrolling.\n        drag._sortFromLastPointerPosition();\n      }\n    });\n  }\n  /** Refreshes the position cache of the items and sibling containers. */\n\n\n  _cacheItemPositions() {\n    const isHorizontal = this.orientation === 'horizontal';\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = drag.getVisibleElement();\n      return {\n        drag,\n        offset: 0,\n        initialTransform: elementToMeasure.style.transform || '',\n        clientRect: getMutableClientRect(elementToMeasure)\n      };\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left : a.clientRect.top - b.clientRect.top;\n    });\n  }\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n\n\n  _getItemOffsetPx(currentPosition, newPosition, delta) {\n    const isHorizontal = this.orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left : newPosition.top - currentPosition.top; // Account for differences in the item width/height.\n\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width : newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n\n\n  _getSiblingOffsetPx(currentIndex, siblings, delta) {\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom'; // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n  /**\n   * Checks if pointer is entering in the first position\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   */\n\n\n  _shouldEnterAsFirstChild(pointerX, pointerY) {\n    if (!this._activeDraggables.length) {\n      return false;\n    }\n\n    const itemPositions = this._itemPositions;\n    const isHorizontal = this.orientation === 'horizontal'; // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n    // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n\n    const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n\n    if (reversed) {\n      const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n      return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n    } else {\n      const firstItemRect = itemPositions[0].clientRect;\n      return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n    }\n  }\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n\n\n  _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n    const isHorizontal = this.orientation === 'horizontal';\n\n    const index = this._itemPositions.findIndex(({\n      drag,\n      clientRect\n    }) => {\n      // Skip the item itself.\n      if (drag === item) {\n        return false;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y; // If the user is still hovering over the same item as last time, their cursor hasn't left\n        // the item after we made the swap, and they didn't change the direction in which they're\n        // dragging, we don't consider it a direction swap.\n\n        if (drag === this._previousSwap.drag && this._previousSwap.overlaps && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ? // Round these down since most browsers report client rects with\n      // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n      pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n    });\n\n    return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n  }\n\n}\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\n\n\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\n\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\n\nclass DropListRef {\n  constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n    this._dragDropRegistry = _dragDropRegistry;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    /** Whether starting a dragging sequence from this container is disabled. */\n\n    this.disabled = false;\n    /** Whether sorting items within the list is disabled. */\n\n    this.sortingDisabled = false;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     */\n\n    this.autoScrollDisabled = false;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n\n    this.autoScrollStep = 2;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n\n    this.enterPredicate = () => true;\n    /** Function that is used to determine whether an item can be sorted into a particular index. */\n\n\n    this.sortPredicate = () => true;\n    /** Emits right before dragging has started. */\n\n\n    this.beforeStarted = new Subject();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n\n    this.entered = new Subject();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n\n    this.exited = new Subject();\n    /** Emits when the user drops an item inside the container. */\n\n    this.dropped = new Subject();\n    /** Emits as the user is swapping items while actively dragging. */\n\n    this.sorted = new Subject();\n    /** Emits when a dragging sequence is started in a list connected to the current one. */\n\n    this.receivingStarted = new Subject();\n    /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n\n    this.receivingStopped = new Subject();\n    /** Whether an item in the list is being dragged. */\n\n    this._isDragging = false;\n    /** Draggable items in the container. */\n\n    this._draggables = [];\n    /** Drop lists that are connected to the current one. */\n\n    this._siblings = [];\n    /** Connected siblings that currently have a dragged item. */\n\n    this._activeSiblings = new Set();\n    /** Subscription to the window being scrolled. */\n\n    this._viewportScrollSubscription = Subscription.EMPTY;\n    /** Vertical direction in which the list is currently scrolling. */\n\n    this._verticalScrollDirection = 0\n    /* AutoScrollVerticalDirection.NONE */\n    ;\n    /** Horizontal direction in which the list is currently scrolling. */\n\n    this._horizontalScrollDirection = 0\n    /* AutoScrollHorizontalDirection.NONE */\n    ;\n    /** Used to signal to the current auto-scroll sequence when to stop. */\n\n    this._stopScrollTimers = new Subject();\n    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n\n    this._cachedShadowRoot = null;\n    /** Starts the interval that'll auto-scroll the element. */\n\n    this._startScrollInterval = () => {\n      this._stopScrolling();\n\n      interval(0, animationFrameScheduler).pipe(takeUntil(this._stopScrollTimers)).subscribe(() => {\n        const node = this._scrollNode;\n        const scrollStep = this.autoScrollStep;\n\n        if (this._verticalScrollDirection === 1\n        /* AutoScrollVerticalDirection.UP */\n        ) {\n          node.scrollBy(0, -scrollStep);\n        } else if (this._verticalScrollDirection === 2\n        /* AutoScrollVerticalDirection.DOWN */\n        ) {\n          node.scrollBy(0, scrollStep);\n        }\n\n        if (this._horizontalScrollDirection === 1\n        /* AutoScrollHorizontalDirection.LEFT */\n        ) {\n          node.scrollBy(-scrollStep, 0);\n        } else if (this._horizontalScrollDirection === 2\n        /* AutoScrollHorizontalDirection.RIGHT */\n        ) {\n          node.scrollBy(scrollStep, 0);\n        }\n      });\n    };\n\n    this.element = coerceElement(element);\n    this._document = _document;\n    this.withScrollableParents([this.element]);\n\n    _dragDropRegistry.registerDropContainer(this);\n\n    this._parentPositions = new ParentPositionTracker(_document);\n    this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\n\n    this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n  }\n  /** Removes the drop list functionality from the DOM element. */\n\n\n  dispose() {\n    this._stopScrolling();\n\n    this._stopScrollTimers.complete();\n\n    this._viewportScrollSubscription.unsubscribe();\n\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this.receivingStarted.complete();\n    this.receivingStopped.complete();\n\n    this._activeSiblings.clear();\n\n    this._scrollNode = null;\n\n    this._parentPositions.clear();\n\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n  /** Whether an item from this list is currently being dragged. */\n\n\n  isDragging() {\n    return this._isDragging;\n  }\n  /** Starts dragging an item. */\n\n\n  start() {\n    this._draggingStarted();\n\n    this._notifyReceivingSiblings();\n  }\n  /**\n   * Attempts to move an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\n   *   out automatically.\n   */\n\n\n  enter(item, pointerX, pointerY, index) {\n    this._draggingStarted(); // If sorting is disabled, we want the item to return to its starting\n    // position if the user is returning it to its initial container.\n\n\n    if (index == null && this.sortingDisabled) {\n      index = this._draggables.indexOf(item);\n    }\n\n    this._sortStrategy.enter(item, pointerX, pointerY, index); // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n    // can change when the sort strategy moves the item around inside `enter`.\n\n\n    this._cacheParentPositions(); // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n\n\n    this._notifyReceivingSiblings();\n\n    this.entered.next({\n      item,\n      container: this,\n      currentIndex: this.getItemIndex(item)\n    });\n  }\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n\n\n  exit(item) {\n    this._reset();\n\n    this.exited.next({\n      item,\n      container: this\n    });\n  }\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousIndex Index of the item when dragging started.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   * @param distance Distance the user has dragged since the start of the dragging sequence.\n   * @param event Event that triggered the dropping sequence.\n   *\n   * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n   */\n\n\n  drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n    this._reset();\n\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex,\n      container: this,\n      previousContainer,\n      isPointerOverContainer,\n      distance,\n      dropPoint,\n      event\n    });\n  }\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n\n\n  withItems(items) {\n    const previousItems = this._draggables;\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n\n    if (this.isDragging()) {\n      const draggedItems = previousItems.filter(item => item.isDragging()); // If all of the items being dragged were removed\n      // from the list, abort the current drag sequence.\n\n      if (draggedItems.every(item => items.indexOf(item) === -1)) {\n        this._reset();\n      } else {\n        this._sortStrategy.withItems(this._draggables);\n      }\n    }\n\n    return this;\n  }\n  /** Sets the layout direction of the drop list. */\n\n\n  withDirection(direction) {\n    this._sortStrategy.direction = direction;\n    return this;\n  }\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n\n\n  connectedTo(connectedTo) {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n\n\n  withOrientation(orientation) {\n    // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\n    // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\n    this._sortStrategy.orientation = orientation;\n    return this;\n  }\n  /**\n   * Sets which parent elements are can be scrolled while the user is dragging.\n   * @param elements Elements that can be scrolled.\n   */\n\n\n  withScrollableParents(elements) {\n    const element = coerceElement(this.element); // We always allow the current element to be scrollable\n    // so we need to ensure that it's in the array.\n\n    this._scrollableElements = elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n    return this;\n  }\n  /** Gets the scrollable parents that are registered with this drop container. */\n\n\n  getScrollableParents() {\n    return this._scrollableElements;\n  }\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n\n\n  getItemIndex(item) {\n    return this._isDragging ? this._sortStrategy.getItemIndex(item) : this._draggables.indexOf(item);\n  }\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n\n\n  isReceiving() {\n    return this._activeSiblings.size > 0;\n  }\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n\n\n  _sortItem(item, pointerX, pointerY, pointerDelta) {\n    // Don't sort the item if sorting is disabled or it's out of range.\n    if (this.sortingDisabled || !this._clientRect || !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n      return;\n    }\n\n    const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n\n    if (result) {\n      this.sorted.next({\n        previousIndex: result.previousIndex,\n        currentIndex: result.currentIndex,\n        container: this,\n        item\n      });\n    }\n  }\n  /**\n   * Checks whether the user's pointer is close to the edges of either the\n   * viewport or the drop list and starts the auto-scroll sequence.\n   * @param pointerX User's pointer position along the x axis.\n   * @param pointerY User's pointer position along the y axis.\n   */\n\n\n  _startScrollingIfNecessary(pointerX, pointerY) {\n    if (this.autoScrollDisabled) {\n      return;\n    }\n\n    let scrollNode;\n    let verticalScrollDirection = 0\n    /* AutoScrollVerticalDirection.NONE */\n    ;\n    let horizontalScrollDirection = 0\n    /* AutoScrollHorizontalDirection.NONE */\n    ; // Check whether we should start scrolling any of the parent containers.\n\n    this._parentPositions.positions.forEach((position, element) => {\n      // We have special handling for the `document` below. Also this would be\n      // nicer with a  for...of loop, but it requires changing a compiler flag.\n      if (element === this._document || !position.clientRect || scrollNode) {\n        return;\n      }\n\n      if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n        [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n\n        if (verticalScrollDirection || horizontalScrollDirection) {\n          scrollNode = element;\n        }\n      }\n    }); // Otherwise check if we can start scrolling the viewport.\n\n\n    if (!verticalScrollDirection && !horizontalScrollDirection) {\n      const {\n        width,\n        height\n      } = this._viewportRuler.getViewportSize();\n\n      const clientRect = {\n        width,\n        height,\n        top: 0,\n        right: width,\n        bottom: height,\n        left: 0\n      };\n      verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n      horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n      scrollNode = window;\n    }\n\n    if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection || horizontalScrollDirection !== this._horizontalScrollDirection || scrollNode !== this._scrollNode)) {\n      this._verticalScrollDirection = verticalScrollDirection;\n      this._horizontalScrollDirection = horizontalScrollDirection;\n      this._scrollNode = scrollNode;\n\n      if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n        this._ngZone.runOutsideAngular(this._startScrollInterval);\n      } else {\n        this._stopScrolling();\n      }\n    }\n  }\n  /** Stops any currently-running auto-scroll sequences. */\n\n\n  _stopScrolling() {\n    this._stopScrollTimers.next();\n  }\n  /** Starts the dragging sequence within the list. */\n\n\n  _draggingStarted() {\n    const styles = coerceElement(this.element).style;\n    this.beforeStarted.next();\n    this._isDragging = true; // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n    // scrolling. The browser seems to round the value based on the snapping points which means\n    // that we can't increment/decrement the scroll position.\n\n    this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n    styles.scrollSnapType = styles.msScrollSnapType = 'none';\n\n    this._sortStrategy.start(this._draggables);\n\n    this._cacheParentPositions();\n\n    this._viewportScrollSubscription.unsubscribe();\n\n    this._listenToScrollEvents();\n  }\n  /** Caches the positions of the configured scrollable parents. */\n\n\n  _cacheParentPositions() {\n    const element = coerceElement(this.element);\n\n    this._parentPositions.cache(this._scrollableElements); // The list element is always in the `scrollableElements`\n    // so we can take advantage of the cached `ClientRect`.\n\n\n    this._clientRect = this._parentPositions.positions.get(element).clientRect;\n  }\n  /** Resets the container to its initial state. */\n\n\n  _reset() {\n    this._isDragging = false;\n    const styles = coerceElement(this.element).style;\n    styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n\n    this._sortStrategy.reset();\n\n    this._stopScrolling();\n\n    this._viewportScrollSubscription.unsubscribe();\n\n    this._parentPositions.clear();\n  }\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n\n\n  _isOverContainer(x, y) {\n    return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n  }\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n\n\n  _getSiblingContainerFromPosition(item, x, y) {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n\n\n  _canReceive(item, x, y) {\n    if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n      return false;\n    }\n\n    const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y); // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n\n\n    if (!elementFromPoint) {\n      return false;\n    }\n\n    const nativeElement = coerceElement(this.element); // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n\n    return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n  }\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n\n\n  _startReceiving(sibling, items) {\n    const activeSiblings = this._activeSiblings;\n\n    if (!activeSiblings.has(sibling) && items.every(item => {\n      // Note that we have to add an exception to the `enterPredicate` for items that started off\n      // in this drop list. The drag ref has logic that allows an item to return to its initial\n      // container, if it has left the initial container and none of the connected containers\n      // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n      return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n    })) {\n      activeSiblings.add(sibling);\n\n      this._cacheParentPositions();\n\n      this._listenToScrollEvents();\n\n      this.receivingStarted.next({\n        initiator: sibling,\n        receiver: this,\n        items\n      });\n    }\n  }\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n\n\n  _stopReceiving(sibling) {\n    this._activeSiblings.delete(sibling);\n\n    this._viewportScrollSubscription.unsubscribe();\n\n    this.receivingStopped.next({\n      initiator: sibling,\n      receiver: this\n    });\n  }\n  /**\n   * Starts listening to scroll events on the viewport.\n   * Used for updating the internal state of the list.\n   */\n\n\n  _listenToScrollEvents() {\n    this._viewportScrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(event => {\n      if (this.isDragging()) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n\n        if (scrollDifference) {\n          this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n        }\n      } else if (this.isReceiving()) {\n        this._cacheParentPositions();\n      }\n    });\n  }\n  /**\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n   * than saving it in property directly on init, because we want to resolve it as late as possible\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n   */\n\n\n  _getShadowRoot() {\n    if (!this._cachedShadowRoot) {\n      const shadowRoot = _getShadowRoot(coerceElement(this.element));\n\n      this._cachedShadowRoot = shadowRoot || this._document;\n    }\n\n    return this._cachedShadowRoot;\n  }\n  /** Notifies any siblings that may potentially receive the item. */\n\n\n  _notifyReceivingSiblings() {\n    const draggedItems = this._sortStrategy.getActiveItemsSnapshot().filter(item => item.isDragging());\n\n    this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n  }\n\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\n\n\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n  const {\n    top,\n    bottom,\n    height\n  } = clientRect;\n  const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n    return 1\n    /* AutoScrollVerticalDirection.UP */\n    ;\n  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n    return 2\n    /* AutoScrollVerticalDirection.DOWN */\n    ;\n  }\n\n  return 0\n  /* AutoScrollVerticalDirection.NONE */\n  ;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\n\n\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n  const {\n    left,\n    right,\n    width\n  } = clientRect;\n  const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n    return 1\n    /* AutoScrollHorizontalDirection.LEFT */\n    ;\n  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n    return 2\n    /* AutoScrollHorizontalDirection.RIGHT */\n    ;\n  }\n\n  return 0\n  /* AutoScrollHorizontalDirection.NONE */\n  ;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\n\n\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n  const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n  const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n  let verticalScrollDirection = 0\n  /* AutoScrollVerticalDirection.NONE */\n  ;\n  let horizontalScrollDirection = 0\n  /* AutoScrollHorizontalDirection.NONE */\n  ; // Note that we here we do some extra checks for whether the element is actually scrollable in\n  // a certain direction and we only assign the scroll direction if it is. We do this so that we\n  // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n  // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n\n  if (computedVertical) {\n    const scrollTop = element.scrollTop;\n\n    if (computedVertical === 1\n    /* AutoScrollVerticalDirection.UP */\n    ) {\n      if (scrollTop > 0) {\n        verticalScrollDirection = 1\n        /* AutoScrollVerticalDirection.UP */\n        ;\n      }\n    } else if (element.scrollHeight - scrollTop > element.clientHeight) {\n      verticalScrollDirection = 2\n      /* AutoScrollVerticalDirection.DOWN */\n      ;\n    }\n  }\n\n  if (computedHorizontal) {\n    const scrollLeft = element.scrollLeft;\n\n    if (computedHorizontal === 1\n    /* AutoScrollHorizontalDirection.LEFT */\n    ) {\n      if (scrollLeft > 0) {\n        horizontalScrollDirection = 1\n        /* AutoScrollHorizontalDirection.LEFT */\n        ;\n      }\n    } else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n      horizontalScrollDirection = 2\n      /* AutoScrollHorizontalDirection.RIGHT */\n      ;\n    }\n  }\n\n  return [verticalScrollDirection, horizontalScrollDirection];\n}\n/** Event options that can be used to bind an active, capturing event. */\n\n\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n\nclass DragDropRegistry {\n  constructor(_ngZone, _document) {\n    this._ngZone = _ngZone;\n    /** Registered drop container instances. */\n\n    this._dropInstances = new Set();\n    /** Registered drag item instances. */\n\n    this._dragInstances = new Set();\n    /** Drag item instances that are currently being dragged. */\n\n    this._activeDragInstances = [];\n    /** Keeps track of the event listeners that we've bound to the `document`. */\n\n    this._globalListeners = new Map();\n    /**\n     * Predicate function to check if an item is being dragged.  Moved out into a property,\n     * because it'll be called a lot and we don't want to create a new function every time.\n     */\n\n    this._draggingPredicate = item => item.isDragging();\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n\n\n    this.pointerMove = new Subject();\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n\n    this.pointerUp = new Subject();\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n     * @breaking-change 13.0.0\n     */\n\n    this.scroll = new Subject();\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * @param event Event whose default action should be prevented.\n     */\n\n    this._preventDefaultWhileDragging = event => {\n      if (this._activeDragInstances.length > 0) {\n        event.preventDefault();\n      }\n    };\n    /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n\n\n    this._persistentTouchmoveListener = event => {\n      if (this._activeDragInstances.length > 0) {\n        // Note that we only want to prevent the default action after dragging has actually started.\n        // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n        // but it could be pushed back if the user has set up a drag delay or threshold.\n        if (this._activeDragInstances.some(this._draggingPredicate)) {\n          event.preventDefault();\n        }\n\n        this.pointerMove.next(event);\n      }\n    };\n\n    this._document = _document;\n  }\n  /** Adds a drop container to the registry. */\n\n\n  registerDropContainer(drop) {\n    if (!this._dropInstances.has(drop)) {\n      this._dropInstances.add(drop);\n    }\n  }\n  /** Adds a drag item instance to the registry. */\n\n\n  registerDragItem(drag) {\n    this._dragInstances.add(drag); // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n\n\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n      });\n    }\n  }\n  /** Removes a drop container from the registry. */\n\n\n  removeDropContainer(drop) {\n    this._dropInstances.delete(drop);\n  }\n  /** Removes a drag item instance from the registry. */\n\n\n  removeDragItem(drag) {\n    this._dragInstances.delete(drag);\n\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n    }\n  }\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n\n\n  startDragging(drag, event) {\n    // Do not process the same drag twice to avoid memory leaks and redundant listeners\n    if (this._activeDragInstances.indexOf(drag) > -1) {\n      return;\n    }\n\n    this._activeDragInstances.push(drag);\n\n    if (this._activeDragInstances.length === 1) {\n      const isTouchEvent = event.type.startsWith('touch'); // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n\n      this._globalListeners.set(isTouchEvent ? 'touchend' : 'mouseup', {\n        handler: e => this.pointerUp.next(e),\n        options: true\n      }).set('scroll', {\n        handler: e => this.scroll.next(e),\n        // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n        // the document. See https://github.com/angular/components/issues/17144.\n        options: true\n      }) // Preventing the default action on `mousemove` isn't enough to disable text selection\n      // on Safari so we need to prevent the selection event as well. Alternatively this can\n      // be done by setting `user-select: none` on the `body`, however it has causes a style\n      // recalculation which can be expensive on pages with a lot of elements.\n      .set('selectstart', {\n        handler: this._preventDefaultWhileDragging,\n        options: activeCapturingEventOptions\n      }); // We don't have to bind a move event for touch drag sequences, because\n      // we already have a persistent global one bound from `registerDragItem`.\n\n\n      if (!isTouchEvent) {\n        this._globalListeners.set('mousemove', {\n          handler: e => this.pointerMove.next(e),\n          options: activeCapturingEventOptions\n        });\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n  /** Stops dragging a drag item instance. */\n\n\n  stopDragging(drag) {\n    const index = this._activeDragInstances.indexOf(drag);\n\n    if (index > -1) {\n      this._activeDragInstances.splice(index, 1);\n\n      if (this._activeDragInstances.length === 0) {\n        this._clearGlobalListeners();\n      }\n    }\n  }\n  /** Gets whether a drag item instance is currently being dragged. */\n\n\n  isDragging(drag) {\n    return this._activeDragInstances.indexOf(drag) > -1;\n  }\n  /**\n   * Gets a stream that will emit when any element on the page is scrolled while an item is being\n   * dragged.\n   * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n   *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n   *   be used to include an additional top-level listener at the shadow root level.\n   */\n\n\n  scrolled(shadowRoot) {\n    const streams = [this.scroll];\n\n    if (shadowRoot && shadowRoot !== this._document) {\n      // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n      // because we want to guarantee that the event is bound outside of the `NgZone`. With\n      // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n      streams.push(new Observable(observer => {\n        return this._ngZone.runOutsideAngular(() => {\n          const eventOptions = true;\n\n          const callback = event => {\n            if (this._activeDragInstances.length) {\n              observer.next(event);\n            }\n          };\n\n          shadowRoot.addEventListener('scroll', callback, eventOptions);\n          return () => {\n            shadowRoot.removeEventListener('scroll', callback, eventOptions);\n          };\n        });\n      }));\n    }\n\n    return merge(...streams);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n\n    this._clearGlobalListeners();\n\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n  /** Clears out the global event listeners from the `document`. */\n\n\n  _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n\n}\n\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) {\n  return new (t || DragDropRegistry)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT));\n};\n\nDragDropRegistry.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DragDropRegistry,\n  factory: DragDropRegistry.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DragDropRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/** Default configuration to be used when creating a `DragRef`. */\n\n\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n\nclass DragDrop {\n  constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._dragDropRegistry = _dragDropRegistry;\n  }\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n\n\n  createDrag(element, config = DEFAULT_CONFIG) {\n    return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n  }\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n\n\n  createDropList(element) {\n    return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n  }\n\n}\n\nDragDrop.ɵfac = function DragDrop_Factory(t) {\n  return new (t || DragDrop)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(DragDropRegistry));\n};\n\nDragDrop.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DragDrop,\n  factory: DragDrop.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DragDrop, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1.ViewportRuler\n    }, {\n      type: DragDropRegistry\n    }];\n  }, null);\n})();\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\n\n\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\n\nfunction assertElementNode(node, name) {\n  if (node.nodeType !== 1) {\n    throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n  }\n}\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\n\nclass CdkDragHandle {\n  /** Whether starting to drag through this handle is disabled. */\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    this._stateChanges.next(this);\n  }\n\n  constructor(element, parentDrag) {\n    this.element = element;\n    /** Emits when the state of the handle has changed. */\n\n    this._stateChanges = new Subject();\n    this._disabled = false;\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      assertElementNode(element.nativeElement, 'cdkDragHandle');\n    }\n\n    this._parentDrag = parentDrag;\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n}\n\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) {\n  return new (t || CdkDragHandle)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n};\n\nCdkDragHandle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDragHandle,\n  selectors: [[\"\", \"cdkDragHandle\", \"\"]],\n  hostAttrs: [1, \"cdk-drag-handle\"],\n  inputs: {\n    disabled: [\"cdkDragHandleDisabled\", \"disabled\"]\n  },\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_HANDLE,\n    useExisting: CdkDragHandle\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDragHandle, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDragHandle]',\n      standalone: true,\n      host: {\n        'class': 'cdk-drag-handle'\n      },\n      providers: [{\n        provide: CDK_DRAG_HANDLE,\n        useExisting: CdkDragHandle\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_DRAG_PARENT]\n      }, {\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, {\n    disabled: [{\n      type: Input,\n      args: ['cdkDragHandleDisabled']\n    }]\n  });\n})();\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n\nclass CdkDragPlaceholder {\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n\n}\n\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) {\n  return new (t || CdkDragPlaceholder)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nCdkDragPlaceholder.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDragPlaceholder,\n  selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]],\n  inputs: {\n    data: \"data\"\n  },\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_PLACEHOLDER,\n    useExisting: CdkDragPlaceholder\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkDragPlaceholder]',\n      standalone: true,\n      providers: [{\n        provide: CDK_DRAG_PLACEHOLDER,\n        useExisting: CdkDragPlaceholder\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n\nclass CdkDragPreview {\n  /** Whether the preview should preserve the same size as the item that is being dragged. */\n  get matchSize() {\n    return this._matchSize;\n  }\n\n  set matchSize(value) {\n    this._matchSize = coerceBooleanProperty(value);\n  }\n\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n    this._matchSize = false;\n  }\n\n}\n\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) {\n  return new (t || CdkDragPreview)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nCdkDragPreview.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDragPreview,\n  selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]],\n  inputs: {\n    data: \"data\",\n    matchSize: \"matchSize\"\n  },\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_PREVIEW,\n    useExisting: CdkDragPreview\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDragPreview, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkDragPreview]',\n      standalone: true,\n      providers: [{\n        provide: CDK_DRAG_PREVIEW,\n        useExisting: CdkDragPreview\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    matchSize: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\n\n\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\n\nclass CdkDrag {\n  /** Whether starting to drag this element is disabled. */\n  get disabled() {\n    return this._disabled || this.dropContainer && this.dropContainer.disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n\n  constructor(\n  /** Element that the draggable is attached to. */\n  element,\n  /** Droppable container that the draggable is a part of. */\n  dropContainer,\n  /**\n   * @deprecated `_document` parameter no longer being used and will be removed.\n   * @breaking-change 12.0.0\n   */\n  _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n    this.element = element;\n    this.dropContainer = dropContainer;\n    this._ngZone = _ngZone;\n    this._viewContainerRef = _viewContainerRef;\n    this._dir = _dir;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._selfHandle = _selfHandle;\n    this._parentDrag = _parentDrag;\n    this._destroyed = new Subject();\n    /** Emits when the user starts dragging the item. */\n\n    this.started = new EventEmitter();\n    /** Emits when the user has released a drag item, before any animations have started. */\n\n    this.released = new EventEmitter();\n    /** Emits when the user stops dragging an item in the container. */\n\n    this.ended = new EventEmitter();\n    /** Emits when the user has moved the item into a new container. */\n\n    this.entered = new EventEmitter();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n\n    this.exited = new EventEmitter();\n    /** Emits when the user drops the item inside a container. */\n\n    this.dropped = new EventEmitter();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n\n    this.moved = new Observable(observer => {\n      const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n        source: this,\n        pointerPosition: movedEvent.pointerPosition,\n        event: movedEvent.event,\n        delta: movedEvent.delta,\n        distance: movedEvent.distance\n      }))).subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n      };\n    });\n    this._dragRef = dragDrop.createDrag(element, {\n      dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n      pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ? config.pointerDirectionChangeThreshold : 5,\n      zIndex: config?.zIndex\n    });\n    this._dragRef.data = this; // We have to keep track of the drag instances in order to be able to match an element to\n    // a drag instance. We can't go through the global registry of `DragRef`, because the root\n    // element could be different.\n\n    CdkDrag._dragInstances.push(this);\n\n    if (config) {\n      this._assignDefaults(config);\n    } // Note that usually the container is assigned when the drop list is picks up the item, but in\n    // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n    // where there are no items on the first change detection pass, but the items get picked up as\n    // soon as the user triggers another pass by dragging. This is a problem, because the item would\n    // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n    // is too late since the two modes save different kinds of information. We work around it by\n    // assigning the drop container both from here and the list.\n\n\n    if (dropContainer) {\n      this._dragRef._withDropContainer(dropContainer._dropListRef);\n\n      dropContainer.addItem(this);\n    }\n\n    this._syncInputs(this._dragRef);\n\n    this._handleEvents(this._dragRef);\n  }\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n\n\n  getPlaceholderElement() {\n    return this._dragRef.getPlaceholderElement();\n  }\n  /** Returns the root draggable element. */\n\n\n  getRootElement() {\n    return this._dragRef.getRootElement();\n  }\n  /** Resets a standalone drag item to its initial position. */\n\n\n  reset() {\n    this._dragRef.reset();\n  }\n  /**\n   * Gets the pixel coordinates of the draggable outside of a drop container.\n   */\n\n\n  getFreeDragPosition() {\n    return this._dragRef.getFreeDragPosition();\n  }\n  /**\n   * Sets the current position in pixels the draggable outside of a drop container.\n   * @param value New position to be set.\n   */\n\n\n  setFreeDragPosition(value) {\n    this._dragRef.setFreeDragPosition(value);\n  }\n\n  ngAfterViewInit() {\n    // Normally this isn't in the zone, but it can cause major performance regressions for apps\n    // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n    this._ngZone.runOutsideAngular(() => {\n      // We need to wait for the zone to stabilize, in order for the reference\n      // element to be in the proper place in the DOM. This is mostly relevant\n      // for draggable elements inside portals since they get stamped out in\n      // their original DOM position and then they get transferred to the portal.\n      this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n        this._updateRootElement();\n\n        this._setupHandlesListener();\n\n        if (this.freeDragPosition) {\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n      });\n    });\n  }\n\n  ngOnChanges(changes) {\n    const rootSelectorChange = changes['rootElementSelector'];\n    const positionChange = changes['freeDragPosition']; // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    } // Skip the first change since it's being handled in `ngAfterViewInit`.\n\n\n    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n      this._dragRef.setFreeDragPosition(this.freeDragPosition);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.dropContainer) {\n      this.dropContainer.removeItem(this);\n    }\n\n    const index = CdkDrag._dragInstances.indexOf(this);\n\n    if (index > -1) {\n      CdkDrag._dragInstances.splice(index, 1);\n    } // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n\n\n    this._ngZone.runOutsideAngular(() => {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._dragRef.dispose();\n    });\n  }\n  /** Syncs the root element with the `DragRef`. */\n\n\n  _updateRootElement() {\n    const element = this.element.nativeElement;\n    let rootElement = element;\n\n    if (this.rootElementSelector) {\n      rootElement = element.closest !== undefined ? element.closest(this.rootElementSelector) : // Comment tag doesn't have closest method, so use parent's one.\n      element.parentElement?.closest(this.rootElementSelector);\n    }\n\n    if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      assertElementNode(rootElement, 'cdkDrag');\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n  /** Gets the boundary element, based on the `boundaryElement` value. */\n\n\n  _getBoundaryElement() {\n    const boundary = this.boundaryElement;\n\n    if (!boundary) {\n      return null;\n    }\n\n    if (typeof boundary === 'string') {\n      return this.element.nativeElement.closest(boundary);\n    }\n\n    return coerceElement(boundary);\n  }\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n\n\n  _syncInputs(ref) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const dragStartDelay = this.dragStartDelay;\n        const placeholder = this._placeholderTemplate ? {\n          template: this._placeholderTemplate.templateRef,\n          context: this._placeholderTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n        const preview = this._previewTemplate ? {\n          template: this._previewTemplate.templateRef,\n          context: this._previewTemplate.data,\n          matchSize: this._previewTemplate.matchSize,\n          viewContainer: this._viewContainerRef\n        } : null;\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.dragStartDelay = typeof dragStartDelay === 'object' && dragStartDelay ? dragStartDelay : coerceNumberProperty(dragStartDelay);\n        ref.constrainPosition = this.constrainPosition;\n        ref.previewClass = this.previewClass;\n        ref.withBoundaryElement(this._getBoundaryElement()).withPlaceholderTemplate(placeholder).withPreviewTemplate(preview).withPreviewContainer(this.previewContainer || 'global');\n\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    }); // This only needs to be resolved once.\n\n    ref.beforeStarted.pipe(take(1)).subscribe(() => {\n      // If we managed to resolve a parent through DI, use it.\n      if (this._parentDrag) {\n        ref.withParent(this._parentDrag._dragRef);\n        return;\n      } // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n      // the item was projected into another item by something like `ngTemplateOutlet`.\n\n\n      let parent = this.element.nativeElement.parentElement;\n\n      while (parent) {\n        if (parent.classList.contains(DRAG_HOST_CLASS)) {\n          ref.withParent(CdkDrag._dragInstances.find(drag => {\n            return drag.element.nativeElement === parent;\n          })?._dragRef || null);\n          break;\n        }\n\n        parent = parent.parentElement;\n      }\n    });\n  }\n  /** Handles the events from the underlying `DragRef`. */\n\n\n  _handleEvents(ref) {\n    ref.started.subscribe(startEvent => {\n      this.started.emit({\n        source: this,\n        event: startEvent.event\n      }); // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.released.subscribe(releaseEvent => {\n      this.released.emit({\n        source: this,\n        event: releaseEvent.event\n      });\n    });\n    ref.ended.subscribe(endEvent => {\n      this.ended.emit({\n        source: this,\n        distance: endEvent.distance,\n        dropPoint: endEvent.dropPoint,\n        event: endEvent.event\n      }); // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.entered.subscribe(enterEvent => {\n      this.entered.emit({\n        container: enterEvent.container.data,\n        item: this,\n        currentIndex: enterEvent.currentIndex\n      });\n    });\n    ref.exited.subscribe(exitEvent => {\n      this.exited.emit({\n        container: exitEvent.container.data,\n        item: this\n      });\n    });\n    ref.dropped.subscribe(dropEvent => {\n      this.dropped.emit({\n        previousIndex: dropEvent.previousIndex,\n        currentIndex: dropEvent.currentIndex,\n        previousContainer: dropEvent.previousContainer.data,\n        container: dropEvent.container.data,\n        isPointerOverContainer: dropEvent.isPointerOverContainer,\n        item: this,\n        distance: dropEvent.distance,\n        dropPoint: dropEvent.dropPoint,\n        event: dropEvent.event\n      });\n    });\n  }\n  /** Assigns the default input values based on a provided config object. */\n\n\n  _assignDefaults(config) {\n    const {\n      lockAxis,\n      dragStartDelay,\n      constrainPosition,\n      previewClass,\n      boundaryElement,\n      draggingDisabled,\n      rootElementSelector,\n      previewContainer\n    } = config;\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\n    this.dragStartDelay = dragStartDelay || 0;\n\n    if (lockAxis) {\n      this.lockAxis = lockAxis;\n    }\n\n    if (constrainPosition) {\n      this.constrainPosition = constrainPosition;\n    }\n\n    if (previewClass) {\n      this.previewClass = previewClass;\n    }\n\n    if (boundaryElement) {\n      this.boundaryElement = boundaryElement;\n    }\n\n    if (rootElementSelector) {\n      this.rootElementSelector = rootElementSelector;\n    }\n\n    if (previewContainer) {\n      this.previewContainer = previewContainer;\n    }\n  }\n  /** Sets up the listener that syncs the handles with the drag ref. */\n\n\n  _setupHandlesListener() {\n    // Listen for any newly-added handles.\n    this._handles.changes.pipe(startWith(this._handles), // Sync the new handles with the DragRef.\n    tap(handles => {\n      const childHandleElements = handles.filter(handle => handle._parentDrag === this).map(handle => handle.element); // Usually handles are only allowed to be a descendant of the drag element, but if\n      // the consumer defined a different drag root, we should allow the drag element\n      // itself to be a handle too.\n\n      if (this._selfHandle && this.rootElementSelector) {\n        childHandleElements.push(this.element);\n      }\n\n      this._dragRef.withHandles(childHandleElements);\n    }), // Listen if the state of any of the handles changes.\n    switchMap(handles => {\n      return merge(...handles.map(item => {\n        return item._stateChanges.pipe(startWith(item));\n      }));\n    }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n      // Enabled/disable the handle that changed in the DragRef.\n      const dragRef = this._dragRef;\n      const handle = handleInstance.element.nativeElement;\n      handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n    });\n  }\n\n}\n\nCdkDrag._dragInstances = [];\n\nCdkDrag.ɵfac = function CdkDrag_Factory(t) {\n  return new (t || CdkDrag)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), i0.ɵɵdirectiveInject(i1$1.Directionality, 8), i0.ɵɵdirectiveInject(DragDrop), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), i0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n};\n\nCdkDrag.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDrag,\n  selectors: [[\"\", \"cdkDrag\", \"\"]],\n  contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 5);\n      i0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 5);\n      i0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._handles = _t);\n    }\n  },\n  hostAttrs: [1, \"cdk-drag\"],\n  hostVars: 4,\n  hostBindings: function CdkDrag_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    }\n  },\n  inputs: {\n    data: [\"cdkDragData\", \"data\"],\n    lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"],\n    rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"],\n    boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"],\n    dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"],\n    freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"],\n    disabled: [\"cdkDragDisabled\", \"disabled\"],\n    constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"],\n    previewClass: [\"cdkDragPreviewClass\", \"previewClass\"],\n    previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"]\n  },\n  outputs: {\n    started: \"cdkDragStarted\",\n    released: \"cdkDragReleased\",\n    ended: \"cdkDragEnded\",\n    entered: \"cdkDragEntered\",\n    exited: \"cdkDragExited\",\n    dropped: \"cdkDragDropped\",\n    moved: \"cdkDragMoved\"\n  },\n  exportAs: [\"cdkDrag\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_PARENT,\n    useExisting: CdkDrag\n  }]), i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDrag, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDrag]',\n      exportAs: 'cdkDrag',\n      standalone: true,\n      host: {\n        'class': DRAG_HOST_CLASS,\n        '[class.cdk-drag-disabled]': 'disabled',\n        '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n      },\n      providers: [{\n        provide: CDK_DRAG_PARENT,\n        useExisting: CdkDrag\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_DROP_LIST]\n      }, {\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_CONFIG]\n      }]\n    }, {\n      type: i1$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: DragDrop\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: CdkDragHandle,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_HANDLE]\n      }]\n    }, {\n      type: CdkDrag,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_PARENT]\n      }]\n    }];\n  }, {\n    _handles: [{\n      type: ContentChildren,\n      args: [CDK_DRAG_HANDLE, {\n        descendants: true\n      }]\n    }],\n    _previewTemplate: [{\n      type: ContentChild,\n      args: [CDK_DRAG_PREVIEW]\n    }],\n    _placeholderTemplate: [{\n      type: ContentChild,\n      args: [CDK_DRAG_PLACEHOLDER]\n    }],\n    data: [{\n      type: Input,\n      args: ['cdkDragData']\n    }],\n    lockAxis: [{\n      type: Input,\n      args: ['cdkDragLockAxis']\n    }],\n    rootElementSelector: [{\n      type: Input,\n      args: ['cdkDragRootElement']\n    }],\n    boundaryElement: [{\n      type: Input,\n      args: ['cdkDragBoundary']\n    }],\n    dragStartDelay: [{\n      type: Input,\n      args: ['cdkDragStartDelay']\n    }],\n    freeDragPosition: [{\n      type: Input,\n      args: ['cdkDragFreeDragPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkDragDisabled']\n    }],\n    constrainPosition: [{\n      type: Input,\n      args: ['cdkDragConstrainPosition']\n    }],\n    previewClass: [{\n      type: Input,\n      args: ['cdkDragPreviewClass']\n    }],\n    previewContainer: [{\n      type: Input,\n      args: ['cdkDragPreviewContainer']\n    }],\n    started: [{\n      type: Output,\n      args: ['cdkDragStarted']\n    }],\n    released: [{\n      type: Output,\n      args: ['cdkDragReleased']\n    }],\n    ended: [{\n      type: Output,\n      args: ['cdkDragEnded']\n    }],\n    entered: [{\n      type: Output,\n      args: ['cdkDragEntered']\n    }],\n    exited: [{\n      type: Output,\n      args: ['cdkDragExited']\n    }],\n    dropped: [{\n      type: Output,\n      args: ['cdkDragDropped']\n    }],\n    moved: [{\n      type: Output,\n      args: ['cdkDragMoved']\n    }]\n  });\n})();\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n\nclass CdkDropListGroup {\n  constructor() {\n    /** Drop lists registered inside the group. */\n    this._items = new Set();\n    this._disabled = false;\n  }\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n\n}\n\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) {\n  return new (t || CdkDropListGroup)();\n};\n\nCdkDropListGroup.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDropListGroup,\n  selectors: [[\"\", \"cdkDropListGroup\", \"\"]],\n  inputs: {\n    disabled: [\"cdkDropListGroupDisabled\", \"disabled\"]\n  },\n  exportAs: [\"cdkDropListGroup\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_DROP_LIST_GROUP,\n    useExisting: CdkDropListGroup\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDropListGroup, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDropListGroup]',\n      exportAs: 'cdkDropListGroup',\n      standalone: true,\n      providers: [{\n        provide: CDK_DROP_LIST_GROUP,\n        useExisting: CdkDropListGroup\n      }]\n    }]\n  }], null, {\n    disabled: [{\n      type: Input,\n      args: ['cdkDropListGroupDisabled']\n    }]\n  });\n})();\n/** Counter used to generate unique ids for drop zones. */\n\n\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\n\nclass CdkDropList {\n  /** Keeps track of the drop lists that are currently on the page. */\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  get disabled() {\n    return this._disabled || !!this._group && this._group.disabled;\n  }\n\n  set disabled(value) {\n    // Usually we sync the directive and ref state right before dragging starts, in order to have\n    // a single point of failure and to avoid having to use setters for everything. `disabled` is\n    // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n    // the user in a disabled state, so we also need to sync it as it's being set.\n    this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n  }\n\n  constructor(\n  /** Element that the drop list is attached to. */\n  element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n    this.element = element;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._dir = _dir;\n    this._group = _group;\n    /** Emits when the list has been destroyed. */\n\n    this._destroyed = new Subject();\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     */\n\n    this.connectedTo = [];\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     */\n\n    this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n\n    this.enterPredicate = () => true;\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n\n\n    this.sortPredicate = () => true;\n    /** Emits when the user drops an item inside the container. */\n\n\n    this.dropped = new EventEmitter();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n\n    this.entered = new EventEmitter();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n\n    this.exited = new EventEmitter();\n    /** Emits as the user is swapping items while actively dragging. */\n\n    this.sorted = new EventEmitter();\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     */\n\n    this._unsortedItems = new Set();\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      assertElementNode(element.nativeElement, 'cdkDropList');\n    }\n\n    this._dropListRef = dragDrop.createDropList(element);\n    this._dropListRef.data = this;\n\n    if (config) {\n      this._assignDefaults(config);\n    }\n\n    this._dropListRef.enterPredicate = (drag, drop) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n\n    this._dropListRef.sortPredicate = (index, drag, drop) => {\n      return this.sortPredicate(index, drag.data, drop.data);\n    };\n\n    this._setupInputSyncSubscription(this._dropListRef);\n\n    this._handleEvents(this._dropListRef);\n\n    CdkDropList._dropLists.push(this);\n\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n  /** Registers an items with the drop list. */\n\n\n  addItem(item) {\n    this._unsortedItems.add(item);\n\n    if (this._dropListRef.isDragging()) {\n      this._syncItemsWithRef();\n    }\n  }\n  /** Removes an item from the drop list. */\n\n\n  removeItem(item) {\n    this._unsortedItems.delete(item);\n\n    if (this._dropListRef.isDragging()) {\n      this._syncItemsWithRef();\n    }\n  }\n  /** Gets the registered items in the list, sorted by their position in the DOM. */\n\n\n  getSortedItems() {\n    return Array.from(this._unsortedItems).sort((a, b) => {\n      const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement()); // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n      // tslint:disable-next-line:no-bitwise\n\n\n      return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n    });\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n\n    this._unsortedItems.clear();\n\n    this._dropListRef.dispose();\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n  }\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n\n\n  _setupInputSyncSubscription(ref) {\n    if (this._dir) {\n      this._dir.change.pipe(startWith(this._dir.value), takeUntil(this._destroyed)).subscribe(value => ref.withDirection(value));\n    }\n\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        if (typeof drop === 'string') {\n          const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n\n          if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n          }\n\n          return correspondingDropList;\n        }\n\n        return drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      } // Note that we resolve the scrollable parents here so that we delay the resolution\n      // as long as possible, ensuring that the element is in its final place in the DOM.\n\n\n      if (!this._scrollableParentsResolved) {\n        const scrollableParents = this._scrollDispatcher.getAncestorScrollContainers(this.element).map(scrollable => scrollable.getElementRef().nativeElement);\n\n        this._dropListRef.withScrollableParents(scrollableParents); // Only do this once since it involves traversing the DOM and the parents\n        // shouldn't be able to change without the drop list being destroyed.\n\n\n        this._scrollableParentsResolved = true;\n      }\n\n      ref.disabled = this.disabled;\n      ref.lockAxis = this.lockAxis;\n      ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n      ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n      ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n      ref.connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef)).withOrientation(this.orientation);\n    });\n  }\n  /** Handles events from the underlying DropListRef. */\n\n\n  _handleEvents(ref) {\n    ref.beforeStarted.subscribe(() => {\n      this._syncItemsWithRef();\n\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data,\n        currentIndex: event.currentIndex\n      });\n    });\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n    ref.dropped.subscribe(dropEvent => {\n      this.dropped.emit({\n        previousIndex: dropEvent.previousIndex,\n        currentIndex: dropEvent.currentIndex,\n        previousContainer: dropEvent.previousContainer.data,\n        container: dropEvent.container.data,\n        item: dropEvent.item.data,\n        isPointerOverContainer: dropEvent.isPointerOverContainer,\n        distance: dropEvent.distance,\n        dropPoint: dropEvent.dropPoint,\n        event: dropEvent.event\n      }); // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n\n      this._changeDetectorRef.markForCheck();\n    });\n    merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n  /** Assigns the default input values based on a provided config object. */\n\n\n  _assignDefaults(config) {\n    const {\n      lockAxis,\n      draggingDisabled,\n      sortingDisabled,\n      listAutoScrollDisabled,\n      listOrientation\n    } = config;\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\n    this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n    this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n    this.orientation = listOrientation || 'vertical';\n\n    if (lockAxis) {\n      this.lockAxis = lockAxis;\n    }\n  }\n  /** Syncs up the registered drag items with underlying drop list ref. */\n\n\n  _syncItemsWithRef() {\n    this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n  }\n\n}\n\nCdkDropList._dropLists = [];\n\nCdkDropList.ɵfac = function CdkDropList_Factory(t) {\n  return new (t || CdkDropList)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DragDrop), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.ScrollDispatcher), i0.ɵɵdirectiveInject(i1$1.Directionality, 8), i0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), i0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8));\n};\n\nCdkDropList.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDropList,\n  selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]],\n  hostAttrs: [1, \"cdk-drop-list\"],\n  hostVars: 7,\n  hostBindings: function CdkDropList_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx.id);\n      i0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    }\n  },\n  inputs: {\n    connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"],\n    data: [\"cdkDropListData\", \"data\"],\n    orientation: [\"cdkDropListOrientation\", \"orientation\"],\n    id: \"id\",\n    lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"],\n    disabled: [\"cdkDropListDisabled\", \"disabled\"],\n    sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"],\n    enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"],\n    sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"],\n    autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"],\n    autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"]\n  },\n  outputs: {\n    dropped: \"cdkDropListDropped\",\n    entered: \"cdkDropListEntered\",\n    exited: \"cdkDropListExited\",\n    sorted: \"cdkDropListSorted\"\n  },\n  exportAs: [\"cdkDropList\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([// Prevent child drop lists from picking up the same group as their parent.\n  {\n    provide: CDK_DROP_LIST_GROUP,\n    useValue: undefined\n  }, {\n    provide: CDK_DROP_LIST,\n    useExisting: CdkDropList\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDropList, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDropList], cdk-drop-list',\n      exportAs: 'cdkDropList',\n      standalone: true,\n      providers: [// Prevent child drop lists from picking up the same group as their parent.\n      {\n        provide: CDK_DROP_LIST_GROUP,\n        useValue: undefined\n      }, {\n        provide: CDK_DROP_LIST,\n        useExisting: CdkDropList\n      }],\n      host: {\n        'class': 'cdk-drop-list',\n        '[attr.id]': 'id',\n        '[class.cdk-drop-list-disabled]': 'disabled',\n        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: DragDrop\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.ScrollDispatcher\n    }, {\n      type: i1$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: CdkDropListGroup,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CDK_DROP_LIST_GROUP]\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_CONFIG]\n      }]\n    }];\n  }, {\n    connectedTo: [{\n      type: Input,\n      args: ['cdkDropListConnectedTo']\n    }],\n    data: [{\n      type: Input,\n      args: ['cdkDropListData']\n    }],\n    orientation: [{\n      type: Input,\n      args: ['cdkDropListOrientation']\n    }],\n    id: [{\n      type: Input\n    }],\n    lockAxis: [{\n      type: Input,\n      args: ['cdkDropListLockAxis']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkDropListDisabled']\n    }],\n    sortingDisabled: [{\n      type: Input,\n      args: ['cdkDropListSortingDisabled']\n    }],\n    enterPredicate: [{\n      type: Input,\n      args: ['cdkDropListEnterPredicate']\n    }],\n    sortPredicate: [{\n      type: Input,\n      args: ['cdkDropListSortPredicate']\n    }],\n    autoScrollDisabled: [{\n      type: Input,\n      args: ['cdkDropListAutoScrollDisabled']\n    }],\n    autoScrollStep: [{\n      type: Input,\n      args: ['cdkDropListAutoScrollStep']\n    }],\n    dropped: [{\n      type: Output,\n      args: ['cdkDropListDropped']\n    }],\n    entered: [{\n      type: Output,\n      args: ['cdkDropListEntered']\n    }],\n    exited: [{\n      type: Output,\n      args: ['cdkDropListExited']\n    }],\n    sorted: [{\n      type: Output,\n      args: ['cdkDropListSorted']\n    }]\n  });\n})();\n\nconst DRAG_DROP_DIRECTIVES = [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder];\n\nclass DragDropModule {}\n\nDragDropModule.ɵfac = function DragDropModule_Factory(t) {\n  return new (t || DragDropModule)();\n};\n\nDragDropModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: DragDropModule\n});\nDragDropModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [DragDrop],\n  imports: [CdkScrollableModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DragDropModule, [{\n    type: NgModule,\n    args: [{\n      imports: DRAG_DROP_DIRECTIVES,\n      exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n      providers: [DragDrop]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };","map":{"version":3,"names":["i0","Injectable","Inject","InjectionToken","Directive","Optional","SkipSelf","Input","EventEmitter","Self","ContentChildren","ContentChild","Output","NgModule","DOCUMENT","i1","CdkScrollableModule","_getEventTarget","normalizePassiveListenerOptions","_getShadowRoot","coerceBooleanProperty","coerceElement","coerceNumberProperty","coerceArray","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","Subject","Subscription","interval","animationFrameScheduler","Observable","merge","takeUntil","map","take","startWith","tap","switchMap","i1$1","extendStyles","dest","source","importantProperties","key","hasOwnProperty","value","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","x","y","isInsideClientRect","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","constructor","_document","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","event","target","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","window","scrollY","scrollX","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","dragImportantProperties","Set","DragRef","disabled","_disabled","_dropContainer","newValue","_toggleNativeDragInteractions","_handles","handle","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","_direction","dragStartDelay","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","_getTargetHandle","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","offset","constrainPosition","_initialClientRect","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","disabledHandles","add","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","parent","_parentDragRef","dispose","remove","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_preview","_previewRef","destroy","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","insertBefore","_createPreviewElement","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","previewConfig","previewClass","preview","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","zIndex","classList","setAttribute","Array","isArray","className","Promise","resolve","placeholderRect","duration","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","minX","maxX","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","SingleAxisSortStrategy","_element","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","parentElement","push","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","elementToMeasure","a","b","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","floor","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","pipe","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","_sortStrategy","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","draggedItems","filter","every","connectedTo","withOrientation","_scrollableElements","size","_clientRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","elementFromPoint","nativeElement","_startReceiving","activeSiblings","initiator","receiver","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","e","options","config","_clearGlobalListeners","streams","observer","eventOptions","ngOnDestroy","instance","ɵfac","NgZone","ɵprov","args","providedIn","decorators","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","ViewportRuler","CDK_DRAG_PARENT","assertElementNode","Error","CDK_DRAG_HANDLE","CdkDragHandle","_stateChanges","parentDrag","ngDevMode","_parentDrag","ElementRef","ɵdir","provide","useExisting","standalone","host","providers","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","TemplateRef","data","CDK_DRAG_PREVIEW","CdkDragPreview","_matchSize","CDK_DRAG_CONFIG","DRAG_HOST_CLASS","CDK_DROP_LIST","CdkDrag","_dragRef","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_selfHandle","_destroyed","subscription","movedEvent","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","onStable","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","positionChange","firstChange","removeItem","rootElementSelector","closest","_getBoundaryElement","boundary","ref","dir","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","childHandleElements","handleInstance","dragRef","ViewContainerRef","Directionality","ChangeDetectorRef","exportAs","descendants","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","_uniqueIdCounter","CdkDropList","_group","_scrollDispatcher","id","_unsortedItems","_setupInputSyncSubscription","_dropLists","_syncItemsWithRef","getSortedItems","documentPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","correspondingDropList","list","console","warn","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","listAutoScrollDisabled","listOrientation","ScrollDispatcher","useValue","DRAG_DROP_DIRECTIVES","DragDropModule","ɵmod","ɵinj","imports","exports"],"sources":["C:/Users/Henry/Desktop/New folder/Atomas2/node_modules/@angular/cdk/fesm2022/drag-drop.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Optional, SkipSelf, Input, EventEmitter, Self, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, map, take, startWith, tap, switchMap } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height,\n        x: clientRect.x,\n        y: clientRect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialClientRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.remove();\n        this._previewRef?.destroy();\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._initialClientRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialClientRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialClientRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialClientRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialClientRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`,\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialClientRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary ClientRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialClientRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_element, _dragDropRegistry) {\n        this._element = _element;\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this._element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* AutoScrollVerticalDirection.UP */) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* AutoScrollVerticalDirection.DOWN */) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === 2 /* AutoScrollHorizontalDirection.RIGHT */) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n        this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._sortStrategy.direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\n        // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\n        this._sortStrategy.orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect ||\n            !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* AutoScrollVerticalDirection.UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* AutoScrollVerticalDirection.DOWN */;\n    }\n    return 0 /* AutoScrollVerticalDirection.NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* AutoScrollHorizontalDirection.LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* AutoScrollHorizontalDirection.RIGHT */;\n    }\n    return 0 /* AutoScrollHorizontalDirection.NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n    let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* AutoScrollVerticalDirection.UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* AutoScrollVerticalDirection.UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* AutoScrollVerticalDirection.DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* AutoScrollHorizontalDirection.LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* AutoScrollHorizontalDirection.RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }]; } });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; }, propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDragHandleDisabled']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() {\n        return this._matchSize;\n    }\n    set matchSize(value) {\n        this._matchSize = coerceBooleanProperty(value);\n    }\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: \"matchSize\" }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles.changes\n            .pipe(startWith(this._handles), \n        // Sync the new handles with the DragRef.\n        tap((handles) => {\n            const childHandleElements = handles\n                .filter(handle => handle._parentDrag === this)\n                .map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                childHandleElements.push(this.element);\n            }\n            this._dragRef.withHandles(childHandleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => {\n                return item._stateChanges.pipe(startWith(item));\n            }));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i1$1.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], queries: [{ propertyName: \"_previewTemplate\", first: true, predicate: CDK_DRAG_PREVIEW, descendants: true }, { propertyName: \"_placeholderTemplate\", first: true, predicate: CDK_DRAG_PLACEHOLDER, descendants: true }, { propertyName: \"_handles\", predicate: CDK_DRAG_HANDLE, descendants: true }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }]; }, propDecorators: { _handles: [{\n                type: ContentChildren,\n                args: [CDK_DRAG_HANDLE, { descendants: true }]\n            }], _previewTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PREVIEW]\n            }], _placeholderTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PLACEHOLDER]\n            }], data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDragDisabled']\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDropListGroupDisabled']\n            }] } });\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i1$1.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }]; }, propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDropListDisabled']\n            }], sortingDisabled: [{\n                type: Input,\n                args: ['cdkDropListSortingDisabled']\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollDisabled']\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}