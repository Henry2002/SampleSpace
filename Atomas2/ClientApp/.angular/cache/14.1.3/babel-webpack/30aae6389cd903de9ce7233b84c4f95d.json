{"ast":null,"code":"import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, ElementRef, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\nconst _c0 = [\"input\"];\n\nconst _c1 = function () {\n  return {\n    enterDuration: 150\n  };\n};\n\nconst _c2 = [\"*\"];\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    color: 'accent'\n  };\n} // Increasing integer for generating unique ids for radio components.\n\n\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\n\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\n\nclass MatRadioChange {\n  constructor(\n  /** The MatRadioButton that emits the change event. */\n  source,\n  /** The value of the MatRadioButton. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\n\n\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\n\nclass _MatRadioGroupBase {\n  constructor(_changeDetector) {\n    this._changeDetector = _changeDetector;\n    /** Selected value for the radio group. */\n\n    this._value = null;\n    /** The HTML name attribute applied to radio buttons in this group. */\n\n    this._name = `mat-radio-group-${nextUniqueId++}`;\n    /** The currently selected radio button. Should match value. */\n\n    this._selected = null;\n    /** Whether the `value` has been set to its initial value. */\n\n    this._isInitialized = false;\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n\n    this._labelPosition = 'after';\n    /** Whether the radio group is disabled. */\n\n    this._disabled = false;\n    /** Whether the radio group is required. */\n\n    this._required = false;\n    /** The method to be called in order to update ngModel */\n\n    this._controlValueAccessorChangeFn = () => {};\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n\n\n    this.onTouched = () => {};\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n\n\n    this.change = new EventEmitter();\n  }\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n\n\n  get name() {\n    return this._name;\n  }\n\n  set name(value) {\n    this._name = value;\n\n    this._updateRadioButtonNames();\n  }\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n\n\n  get labelPosition() {\n    return this._labelPosition;\n  }\n\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n\n    this._markRadiosForCheck();\n  }\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(newValue) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n\n\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(selected) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    this._checkSelectedRadioButton();\n  }\n  /** Whether the radio group is disabled */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    this._markRadiosForCheck();\n  }\n  /** Whether the radio group is required */\n\n\n  get required() {\n    return this._required;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n\n    this._markRadiosForCheck();\n  }\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n\n\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n\n\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  _updateRadioButtonNames() {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n\n        radio._markForCheck();\n      });\n    }\n  }\n  /** Updates the `selected` radio button from the internal _value state. */\n\n\n  _updateSelectedRadioFromValue() {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n  /** Dispatch change event with current selection and group value. */\n\n\n  _emitChangeEvent() {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n\n\n  writeValue(value) {\n    this.value = value;\n\n    this._changeDetector.markForCheck();\n  }\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n\n\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n\n    this._changeDetector.markForCheck();\n  }\n\n}\n\n_MatRadioGroupBase.ɵfac = function _MatRadioGroupBase_Factory(t) {\n  return new (t || _MatRadioGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\n_MatRadioGroupBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _MatRadioGroupBase,\n  inputs: {\n    name: \"name\",\n    labelPosition: \"labelPosition\",\n    value: \"value\",\n    selected: \"selected\",\n    disabled: \"disabled\",\n    required: \"required\",\n    color: \"color\"\n  },\n  outputs: {\n    change: \"change\"\n  }\n});\n\n_MatRadioGroupBase.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}];\n\n_MatRadioGroupBase.propDecorators = {\n  change: [{\n    type: Output\n  }],\n  color: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioGroupBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    change: [{\n      type: Output\n    }],\n    name: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n\n\nclass MatRadioGroup extends _MatRadioGroupBase {}\n\nMatRadioGroup.ɵfac = /*@__PURE__*/function () {\n  let ɵMatRadioGroup_BaseFactory;\n  return function MatRadioGroup_Factory(t) {\n    return (ɵMatRadioGroup_BaseFactory || (ɵMatRadioGroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRadioGroup)))(t || MatRadioGroup);\n  };\n}();\n\nMatRadioGroup.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatRadioGroup,\n  selectors: [[\"mat-radio-group\"]],\n  contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"],\n  exportAs: [\"matRadioGroup\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, {\n    provide: MAT_RADIO_GROUP,\n    useExisting: MatRadioGroup\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatRadioGroup.propDecorators = {\n  _radios: [{\n    type: ContentChildren,\n    args: [forwardRef(() => MatRadioButton), {\n      descendants: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-radio-group',\n      exportAs: 'matRadioGroup',\n      providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, {\n        provide: MAT_RADIO_GROUP,\n        useExisting: MatRadioGroup\n      }],\n      host: {\n        'role': 'radiogroup',\n        'class': 'mat-radio-group'\n      }\n    }]\n  }], null, {\n    _radios: [{\n      type: ContentChildren,\n      args: [forwardRef(() => MatRadioButton), {\n        descendants: true\n      }]\n    }]\n  });\n})(); // Boilerplate for applying mixins to MatRadioButton.\n\n/** @docs-private */\n\n\nclass MatRadioButtonBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n} // As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\n\n\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\n\n\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n  constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride, tabIndex) {\n    super(elementRef);\n    this._changeDetector = _changeDetector;\n    this._focusMonitor = _focusMonitor;\n    this._radioDispatcher = _radioDispatcher;\n    this._animationMode = _animationMode;\n    this._providerOverride = _providerOverride;\n    this._uniqueId = `mat-radio-${++nextUniqueId}`;\n    /** The unique ID for the radio button. */\n\n    this.id = this._uniqueId;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n\n    this.change = new EventEmitter();\n    /** Whether this radio is checked. */\n\n    this._checked = false;\n    /** Value assigned to this radio. */\n\n    this._value = null;\n    /** Unregister function for _radioDispatcher */\n\n    this._removeUniqueSelectionListener = () => {}; // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n\n    this.radioGroup = radioGroup;\n\n    if (tabIndex) {\n      this.tabIndex = coerceNumberProperty(tabIndex, 0);\n    }\n\n    this._removeUniqueSelectionListener = _radioDispatcher.listen((id, name) => {\n      if (id !== this.id && name === this.name) {\n        this.checked = false;\n      }\n    });\n  }\n  /** Whether this radio button is checked. */\n\n\n  get checked() {\n    return this._checked;\n  }\n\n  set checked(value) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n\n      this._changeDetector.markForCheck();\n    }\n  }\n  /** The value of this radio button. */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    if (this._value !== value) {\n      this._value = value;\n\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n\n\n  get labelPosition() {\n    return this._labelPosition || this.radioGroup && this.radioGroup.labelPosition || 'after';\n  }\n\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  /** Whether the radio button is disabled. */\n\n\n  get disabled() {\n    return this._disabled || this.radioGroup !== null && this.radioGroup.disabled;\n  }\n\n  set disabled(value) {\n    this._setDisabled(coerceBooleanProperty(value));\n  }\n  /** Whether the radio button is required. */\n\n\n  get required() {\n    return this._required || this.radioGroup && this.radioGroup.required;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /** Theme color of the radio button. */\n\n\n  get color() {\n    return this._color || this.radioGroup && this.radioGroup.color || this._providerOverride && this._providerOverride.color || 'accent';\n  }\n\n  set color(newValue) {\n    this._color = newValue;\n  }\n  /** ID of the native input element inside `<mat-radio-button>` */\n\n\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  /** Focuses the radio button. */\n\n\n  focus(options, origin) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n\n\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n\n      if (this.checked) {\n        this.radioGroup.selected = this;\n      } // Copy name from parent radio group\n\n\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin && this.radioGroup) {\n        this.radioGroup._touch();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    this._removeUniqueSelectionListener();\n  }\n  /** Dispatch change event with current value. */\n\n\n  _emitChangeEvent() {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n\n\n  _onInputChange(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n  /** Sets the disabled state and marks for check if a change occurred. */\n\n\n  _setDisabled(value) {\n    if (this._disabled !== value) {\n      this._disabled = value;\n\n      this._changeDetector.markForCheck();\n    }\n  }\n\n}\n\n_MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) {\n  return new (t || _MatRadioButtonBase)(ɵngcc0.ɵɵdirectiveInject(_MatRadioGroupBase), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(String), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(String));\n};\n\n_MatRadioButtonBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _MatRadioButtonBase,\n  viewQuery: function _MatRadioButtonBase_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    checked: \"checked\",\n    value: \"value\",\n    labelPosition: \"labelPosition\",\n    disabled: \"disabled\",\n    required: \"required\",\n    color: \"color\",\n    name: \"name\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"]\n  },\n  outputs: {\n    change: \"change\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\n_MatRadioButtonBase.ctorParameters = () => [{\n  type: _MatRadioGroupBase\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: FocusMonitor\n}, {\n  type: UniqueSelectionDispatcher\n}, {\n  type: String\n}, {\n  type: undefined\n}, {\n  type: String\n}];\n\n_MatRadioButtonBase.propDecorators = {\n  id: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  ariaDescribedby: [{\n    type: Input,\n    args: ['aria-describedby']\n  }],\n  checked: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  color: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioButtonBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: _MatRadioGroupBase\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc2.UniqueSelectionDispatcher\n    }, {\n      type: String\n    }, {\n      type: undefined\n    }, {\n      type: String\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    checked: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }]\n  });\n})();\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n\n\nclass MatRadioButton extends _MatRadioButtonBase {\n  constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n    super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n  }\n\n}\n\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) {\n  return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatRadioButton.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatRadioButton,\n  selectors: [[\"mat-radio-button\"]],\n  hostAttrs: [1, \"mat-radio-button\"],\n  hostVars: 17,\n  hostBindings: function MatRadioButton_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() {\n        return ctx._inputElement.nativeElement.focus();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matRadioButton\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 13,\n  vars: 19,\n  consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]],\n  template: function MatRadioButton_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"span\", 2);\n      ɵngcc0.ɵɵelement(3, \"span\", 3)(4, \"span\", 4);\n      ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\n      ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) {\n        return ctx._onInputChange($event);\n      })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(7, \"span\", 7);\n      ɵngcc0.ɵɵelement(8, \"span\", 8);\n      ɵngcc0.ɵɵelementEnd()();\n      ɵngcc0.ɵɵelementStart(9, \"span\", 9)(10, \"span\", 10);\n      ɵngcc0.ɵɵtext(11, \"\\u00A0\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(12);\n      ɵngcc0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      const _r0 = ɵngcc0.ɵɵreference(1);\n\n      ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n      ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(18, _c1));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    }\n  },\n  dependencies: [ɵngcc3.MatRipple],\n  styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatRadioButton.ctorParameters = () => [{\n  type: MatRadioGroup,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RADIO_GROUP]\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: FocusMonitor\n}, {\n  type: UniqueSelectionDispatcher\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RADIO_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n    type: Component,\n    args: [{\n      selector: 'mat-radio-button',\n      template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n      inputs: ['disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matRadioButton',\n      host: {\n        'class': 'mat-radio-button',\n        '[class.mat-radio-checked]': 'checked',\n        '[class.mat-radio-disabled]': 'disabled',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n        '[class.mat-primary]': 'color === \"primary\"',\n        '[class.mat-accent]': 'color === \"accent\"',\n        '[class.mat-warn]': 'color === \"warn\"',\n        // Needs to be removed since it causes some a11y issues (see #21266).\n        '[attr.tabindex]': 'null',\n        '[attr.id]': 'id',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[attr.aria-describedby]': 'null',\n        // Note: under normal conditions focus shouldn't land on this element, however it may be\n        // programmatically set, for example inside of a focus trap, in this case we want to forward\n        // the focus to the native element.\n        '(focus)': '_inputElement.nativeElement.focus()'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatRadioGroup,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RADIO_GROUP]\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc2.UniqueSelectionDispatcher\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RADIO_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatRadioModule {}\n\nMatRadioModule.ɵfac = function MatRadioModule_Factory(t) {\n  return new (t || MatRadioModule)();\n};\n\nMatRadioModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatRadioModule\n});\nMatRadioModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [MatRippleModule, MatCommonModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatRippleModule, MatCommonModule],\n      exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n      declarations: [MatRadioGroup, MatRadioButton]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, {\n    declarations: function () {\n      return [MatRadioGroup, MatRadioButton];\n    },\n    imports: function () {\n      return [MatRippleModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatRadioGroup, MatRadioButton, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };","map":{"version":3,"names":["InjectionToken","forwardRef","EventEmitter","Directive","ChangeDetectorRef","Output","Input","ContentChildren","ElementRef","ViewChild","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Inject","Attribute","NgModule","mixinDisableRipple","mixinTabIndex","MatRippleModule","MatCommonModule","FocusMonitor","coerceBooleanProperty","coerceNumberProperty","UniqueSelectionDispatcher","NG_VALUE_ACCESSOR","ANIMATION_MODULE_TYPE","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","enterDuration","_c2","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","color","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatRadioGroup","multi","MatRadioChange","constructor","source","value","MAT_RADIO_GROUP","_MatRadioGroupBase","_changeDetector","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","name","_updateRadioButtonNames","labelPosition","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","disabled","required","ngAfterContentInit","_touch","_radios","forEach","radio","_markForCheck","isAlreadySelected","_emitChangeEvent","emit","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","ɵfac","_MatRadioGroupBase_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","inputs","outputs","ctorParameters","propDecorators","ngDevMode","ɵsetClassMetadata","ɵMatRadioGroup_BaseFactory","MatRadioGroup_Factory","ɵɵgetInheritedFactory","selectors","contentQueries","MatRadioGroup_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","MatRadioButton","_t","ɵɵqueryRefresh","ɵɵloadQuery","hostAttrs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","args","descendants","selector","providers","host","MatRadioButtonBase","_elementRef","_MatRadioButtonMixinBase","_MatRadioButtonBase","radioGroup","elementRef","_focusMonitor","_radioDispatcher","_animationMode","_providerOverride","tabIndex","_uniqueId","id","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","_setDisabled","_color","inputId","focus","options","origin","focusVia","_inputElement","nativeElement","ngOnInit","ngAfterViewInit","monitor","subscribe","focusOrigin","ngOnDestroy","stopMonitoring","_isRippleDisabled","disableRipple","_onInputClick","event","stopPropagation","_onInputChange","groupValueChanged","_MatRadioButtonBase_Factory","String","undefined","viewQuery","_MatRadioButtonBase_Query","ɵɵviewQuery","first","ariaLabel","ariaLabelledby","ariaDescribedby","changeDetector","focusMonitor","radioDispatcher","animationMode","providerOverride","MatRadioButton_Factory","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","hostVars","hostBindings","MatRadioButton_HostBindings","ɵɵlistener","MatRadioButton_focus_HostBindingHandler","ɵɵattribute","ɵɵclassProp","ngContentSelectors","decls","vars","consts","template","MatRadioButton_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵelement","MatRadioButton_Template_input_change_5_listener","$event","MatRadioButton_Template_input_click_5_listener","ɵɵelementEnd","ɵɵtext","ɵɵprojection","_r0","ɵɵreference","ɵɵadvance","ɵɵproperty","ɵɵpureFunction0","dependencies","MatRipple","styles","encapsulation","changeDetection","decorators","None","OnPush","MatRadioModule","MatRadioModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Users/Henry/Desktop/New folder/Atomas2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/radio.js"],"sourcesContent":["import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, ElementRef, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nclass MatRadioChange {\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source, \n    /** The value of the MatRadioButton. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\nclass _MatRadioGroupBase {\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /** Selected value for the radio group. */\n        this._value = null;\n        /** The HTML name attribute applied to radio buttons in this group. */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /** The currently selected radio button. Should match value. */\n        this._selected = null;\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this._labelPosition = 'after';\n        /** Whether the radio group is disabled. */\n        this._disabled = false;\n        /** Whether the radio group is required. */\n        this._required = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * @docs-private\n         */\n        this.onTouched = () => { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() { return this._value; }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() { return this._selected; }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\n_MatRadioGroupBase.ɵfac = function _MatRadioGroupBase_Factory(t) { return new (t || _MatRadioGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_MatRadioGroupBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatRadioGroupBase, inputs: { name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: \"disabled\", required: \"required\", color: \"color\" }, outputs: { change: \"change\" } });\n_MatRadioGroupBase.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n_MatRadioGroupBase.propDecorators = {\n    change: [{ type: Output }],\n    color: [{ type: Input }],\n    name: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    value: [{ type: Input }],\n    selected: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioGroupBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { change: [{\n            type: Output\n        }], name: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }] }); })();\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup extends _MatRadioGroupBase {\n}\nMatRadioGroup.ɵfac = /*@__PURE__*/ function () { let ɵMatRadioGroup_BaseFactory; return function MatRadioGroup_Factory(t) { return (ɵMatRadioGroup_BaseFactory || (ɵMatRadioGroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRadioGroup)))(t || MatRadioGroup); }; }();\nMatRadioGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatRadioGroup, selectors: [[\"mat-radio-group\"]], contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    } }, hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"], exportAs: [\"matRadioGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n            { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatRadioGroup.propDecorators = {\n    _radios: [{ type: ContentChildren, args: [forwardRef(() => MatRadioButton), { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [\n                    MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                    { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                ],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group'\n                }\n            }]\n    }], null, { _radios: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatRadioButton), { descendants: true }]\n        }] }); })();\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride, tabIndex) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._animationMode = _animationMode;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /** The unique ID for the radio button. */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /** Whether this radio is checked. */\n        this._checked = false;\n        /** Value assigned to this radio. */\n        this._value = null;\n        /** Unregister function for _radioDispatcher */\n        this._removeUniqueSelectionListener = () => { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        if (tabIndex) {\n            this.tabIndex = coerceNumberProperty(tabIndex, 0);\n        }\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n    /** Whether this radio button is checked. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() { return this._value; }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Theme color of the radio button. */\n    get color() {\n        return this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    set color(newValue) { this._color = newValue; }\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /** Focuses the radio button. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            if (this.checked) {\n                this.radioGroup.selected = this;\n            }\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     */\n    _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n}\n_MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) { return new (t || _MatRadioButtonBase)(ɵngcc0.ɵɵdirectiveInject(_MatRadioGroupBase), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(String), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(String)); };\n_MatRadioButtonBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatRadioButtonBase, viewQuery: function _MatRadioButtonBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, inputs: { id: \"id\", checked: \"checked\", value: \"value\", labelPosition: \"labelPosition\", disabled: \"disabled\", required: \"required\", color: \"color\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { change: \"change\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatRadioButtonBase.ctorParameters = () => [\n    { type: _MatRadioGroupBase },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String },\n    { type: undefined },\n    { type: String }\n];\n_MatRadioButtonBase.propDecorators = {\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    checked: [{ type: Input }],\n    value: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }],\n    color: [{ type: Input }],\n    change: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioButtonBase, [{\n        type: Directive\n    }], function () { return [{ type: _MatRadioGroupBase }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String }, { type: undefined }, { type: String }]; }, { id: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], checked: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonBase {\n    constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n        super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n    }\n}\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) { return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatRadioButton.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatRadioButton, selectors: [[\"mat-radio-button\"]], hostAttrs: [1, \"mat-radio-button\"], hostVars: 17, hostBindings: function MatRadioButton_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() { return ctx._inputElement.nativeElement.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n    } }, inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matRadioButton\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 13, vars: 19, consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]], template: function MatRadioButton_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"span\", 2);\n        ɵngcc0.ɵɵelement(3, \"span\", 3)(4, \"span\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) { return ctx._onInputChange($event); })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"span\", 7);\n        ɵngcc0.ɵɵelement(8, \"span\", 8);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(9, \"span\", 9)(10, \"span\", 10);\n        ɵngcc0.ɵɵtext(11, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(12);\n        ɵngcc0.ɵɵelementEnd()();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(18, _c1));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    } }, dependencies: [ɵngcc3.MatRipple], styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatRadioButton.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_GROUP,] }] },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n        type: Component,\n        args: [{ selector: 'mat-radio-button', template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", inputs: ['disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, exportAs: 'matRadioButton', host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be removed since it causes some a11y issues (see #21266).\n                    '[attr.tabindex]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()'\n                }, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"] }]\n    }], function () { return [{ type: MatRadioGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_GROUP]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRadioModule {\n}\nMatRadioModule.ɵfac = function MatRadioModule_Factory(t) { return new (t || MatRadioModule)(); };\nMatRadioModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatRadioModule });\nMatRadioModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [MatRippleModule, MatCommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, { declarations: function () { return [MatRadioGroup, MatRadioButton]; }, imports: function () { return [MatRippleModule, MatCommonModule]; }, exports: function () { return [MatRadioGroup, MatRadioButton, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}