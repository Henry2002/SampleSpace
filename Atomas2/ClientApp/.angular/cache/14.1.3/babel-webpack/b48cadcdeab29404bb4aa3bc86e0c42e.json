{"ast":null,"code":"import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Event object emitted by MatChip when selected or deselected. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\nconst _c0 = [\"*\"];\n\nclass MatChipSelectionChange {\n  constructor(\n  /** Reference to the chip that emitted the event. */\n  source,\n  /** Whether the chip that emitted the event is selected. */\n  selected,\n  /** Whether the selection change was a result of a user interaction. */\n  isUserInput = false) {\n    this.source = source;\n    this.selected = selected;\n    this.isUserInput = isUserInput;\n  }\n\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon'); // Boilerplate for applying mixins to MatChip.\n\n/** @docs-private */\n\nclass MatChipBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n\n\nclass MatChipAvatar {}\n\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) {\n  return new (t || MatChipAvatar)();\n};\n\nMatChipAvatar.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipAvatar,\n  selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-chip-avatar\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_AVATAR,\n    useExisting: MatChipAvatar\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-avatar, [matChipAvatar]',\n      host: {\n        'class': 'mat-chip-avatar'\n      },\n      providers: [{\n        provide: MAT_CHIP_AVATAR,\n        useExisting: MatChipAvatar\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n\n\nclass MatChipTrailingIcon {}\n\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) {\n  return new (t || MatChipTrailingIcon)();\n};\n\nMatChipTrailingIcon.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipTrailingIcon,\n  selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n  hostAttrs: [1, \"mat-chip-trailing-icon\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_TRAILING_ICON,\n    useExisting: MatChipTrailingIcon\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n      host: {\n        'class': 'mat-chip-trailing-icon'\n      },\n      providers: [{\n        provide: MAT_CHIP_TRAILING_ICON,\n        useExisting: MatChipTrailingIcon\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n\n\nclass MatChip extends _MatChipMixinBase {\n  constructor(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n    super(elementRef);\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Whether the chip has focus. */\n\n    this._hasFocus = false;\n    /** Whether the chip list is selectable */\n\n    this.chipListSelectable = true;\n    /** Whether the chip list is in multi-selection mode. */\n\n    this._chipListMultiple = false;\n    /** Whether the chip list as a whole is disabled. */\n\n    this._chipListDisabled = false;\n    this._selected = false;\n    this._selectable = true;\n    this._disabled = false;\n    this._removable = true;\n    /** Emits when the chip is focused. */\n\n    this._onFocus = new Subject();\n    /** Emits when the chip is blured. */\n\n    this._onBlur = new Subject();\n    /** Emitted when the chip is selected or deselected. */\n\n    this.selectionChange = new EventEmitter();\n    /** Emitted when the chip is destroyed. */\n\n    this.destroyed = new EventEmitter();\n    /** Emitted when a chip is to be removed. */\n\n    this.removed = new EventEmitter();\n\n    this._addHostClassName(); // Dynamically create the ripple target, append it within the chip, and use it as the\n    // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n    // the proper styles.\n\n\n    this._chipRippleTarget = _document.createElement('div');\n\n    this._chipRippleTarget.classList.add('mat-chip-ripple');\n\n    this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n\n    this._chipRipple.setupTriggerEvents(elementRef);\n\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n    this.tabIndex = tabIndex != null ? parseInt(tabIndex) || -1 : -1;\n  }\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n\n\n  get rippleDisabled() {\n    return this.disabled || this.disableRipple || this._animationsDisabled || !!this.rippleConfig.disabled;\n  }\n  /** Whether the chip is selected. */\n\n\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(value) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n\n      this._dispatchSelectionChange();\n    }\n  }\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n\n\n  get value() {\n    return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n  }\n\n  set value(value) {\n    this._value = value;\n  }\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n\n\n  get selectable() {\n    return this._selectable && this.chipListSelectable;\n  }\n\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  /** Whether the chip is disabled. */\n\n\n  get disabled() {\n    return this._chipListDisabled || this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n\n\n  get removable() {\n    return this._removable;\n  }\n\n  set removable(value) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  /** The ARIA selected applied to the chip. */\n\n\n  get ariaSelected() {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement;\n\n    if (element.hasAttribute(basicChipAttrName) || element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({\n      chip: this\n    });\n\n    this._chipRipple._removeTriggerEvents();\n  }\n  /** Selects the chip. */\n\n\n  select() {\n    if (!this._selected) {\n      this._selected = true;\n\n      this._dispatchSelectionChange();\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Deselects the chip. */\n\n\n  deselect() {\n    if (this._selected) {\n      this._selected = false;\n\n      this._dispatchSelectionChange();\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Select this chip and emit selected event */\n\n\n  selectViaInteraction() {\n    if (!this._selected) {\n      this._selected = true;\n\n      this._dispatchSelectionChange(true);\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Toggles the current selected state of this chip. */\n\n\n  toggleSelected(isUserInput = false) {\n    this._selected = !this.selected;\n\n    this._dispatchSelectionChange(isUserInput);\n\n    this._changeDetectorRef.markForCheck();\n\n    return this.selected;\n  }\n  /** Allows for programmatic focusing of the chip. */\n\n\n  focus() {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n\n      this._onFocus.next({\n        chip: this\n      });\n    }\n\n    this._hasFocus = true;\n  }\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n\n\n  remove() {\n    if (this.removable) {\n      this.removed.emit({\n        chip: this\n      });\n    }\n  }\n  /** Handles click events on the chip. */\n\n\n  _handleClick(event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n  /** Handle custom key presses. */\n\n\n  _handleKeydown(event) {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove(); // Always prevent so page navigation does not occur\n\n        event.preventDefault();\n        break;\n\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        } // Always prevent space from scrolling the page since the list has focus\n\n\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur() {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      this._ngZone.run(() => {\n        this._hasFocus = false;\n\n        this._onBlur.next({\n          chip: this\n        });\n      });\n    });\n  }\n\n  _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n\n}\n\nMatChip.ɵfac = function MatChip_Factory(t) {\n  return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatChip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChip,\n  selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n  contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"],\n  hostVars: 14,\n  hostBindings: function MatChip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatChip_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChip_blur_HostBindingHandler() {\n        return ctx._blur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    selected: \"selected\",\n    value: \"value\",\n    selectable: \"selectable\",\n    disabled: \"disabled\",\n    removable: \"removable\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    destroyed: \"destroyed\",\n    removed: \"removed\"\n  },\n  exportAs: [\"matChip\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nMatChip.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n  }]\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\n\nMatChip.propDecorators = {\n  avatar: [{\n    type: ContentChild,\n    args: [MAT_CHIP_AVATAR]\n  }],\n  trailingIcon: [{\n    type: ContentChild,\n    args: [MAT_CHIP_TRAILING_ICON]\n  }],\n  removeIcon: [{\n    type: ContentChild,\n    args: [MAT_CHIP_REMOVE]\n  }],\n  selected: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selectable: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  removable: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  destroyed: [{\n    type: Output\n  }],\n  removed: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n    type: Directive,\n    args: [{\n      selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n      inputs: ['color', 'disableRipple', 'tabIndex'],\n      exportAs: 'matChip',\n      host: {\n        'class': 'mat-chip mat-focus-indicator',\n        '[attr.tabindex]': 'disabled ? null : tabIndex',\n        'role': 'option',\n        '[class.mat-chip-selected]': 'selected',\n        '[class.mat-chip-with-avatar]': 'avatar',\n        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mat-chip-disabled]': 'disabled',\n        '[class._mat-animation-noopable]': '_animationsDisabled',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-selected]': 'ariaSelected',\n        '(click)': '_handleClick($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    selectionChange: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    removed: [{\n      type: Output\n    }],\n    selected: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    removable: [{\n      type: Input\n    }],\n    avatar: [{\n      type: ContentChild,\n      args: [MAT_CHIP_AVATAR]\n    }],\n    trailingIcon: [{\n      type: ContentChild,\n      args: [MAT_CHIP_TRAILING_ICON]\n    }],\n    removeIcon: [{\n      type: ContentChild,\n      args: [MAT_CHIP_REMOVE]\n    }]\n  });\n})();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n\n\nclass MatChipRemove {\n  constructor(_parentChip, elementRef) {\n    this._parentChip = _parentChip;\n\n    if (elementRef.nativeElement.nodeName === 'BUTTON') {\n      elementRef.nativeElement.setAttribute('type', 'button');\n    }\n  }\n  /** Calls the parent chip's public `remove()` method if applicable. */\n\n\n  _handleClick(event) {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    } // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n\n\n    event.stopPropagation();\n  }\n\n}\n\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) {\n  return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatChipRemove.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipRemove,\n  selectors: [[\"\", \"matChipRemove\", \"\"]],\n  hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"],\n  hostBindings: function MatChipRemove_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      });\n    }\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_REMOVE,\n    useExisting: MatChipRemove\n  }])]\n});\n\nMatChipRemove.ctorParameters = () => [{\n  type: MatChip\n}, {\n  type: ElementRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n    type: Directive,\n    args: [{\n      selector: '[matChipRemove]',\n      host: {\n        'class': 'mat-chip-remove mat-chip-trailing-icon',\n        '(click)': '_handleClick($event)'\n      },\n      providers: [{\n        provide: MAT_CHIP_REMOVE,\n        useExisting: MatChipRemove\n      }]\n    }]\n  }], function () {\n    return [{\n      type: MatChip\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for the chips module. */\n\n\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n\n/** @docs-private */\n\nconst _MatChipListBase = mixinErrorState(class {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /** @docs-private */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n}); // Increasing integer for generating unique ids for chip-list components.\n\n\nlet nextUniqueId$1 = 0;\n/** Change event object that is emitted when the chip list value has changed. */\n\nclass MatChipListChange {\n  constructor(\n  /** Chip list that emitted the event. */\n  source,\n  /** Value of the chip list when the event was emitted. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n\n\nclass MatChipList extends _MatChipListBase {\n  constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    this.controlType = 'mat-chip-list';\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n\n    this._lastDestroyedChipIndex = null;\n    /** Subject that emits when the component has been destroyed. */\n\n    this._destroyed = new Subject();\n    /** Uid of the chip list */\n\n    this._uid = `mat-chip-list-${nextUniqueId$1++}`;\n    /** Tab index for the chip list. */\n\n    this._tabIndex = 0;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n\n    this._userTabIndex = null;\n    /** Function when touched */\n\n    this._onTouched = () => {};\n    /** Function when changed */\n\n\n    this._onChange = () => {};\n\n    this._multiple = false;\n\n    this._compareWith = (o1, o2) => o1 === o2;\n\n    this._required = false;\n    this._disabled = false;\n    /** Orientation of the chip list. */\n\n    this.ariaOrientation = 'horizontal';\n    this._selectable = true;\n    /** Event emitted when the selected chip list value has been changed by the user. */\n\n    this.change = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n\n    this.valueChange = new EventEmitter();\n\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n  /** The array of selected chips inside chip list. */\n\n\n  get selected() {\n    var _a, _b;\n\n    return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n  }\n  /** The ARIA role applied to the chip list. */\n\n\n  get role() {\n    return this.empty ? null : 'listbox';\n  }\n  /** Whether the user should be allowed to select multiple chips. */\n\n\n  get multiple() {\n    return this._multiple;\n  }\n\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n\n    this._syncChipsState();\n  }\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n\n\n  get compareWith() {\n    return this._compareWith;\n  }\n\n  set compareWith(fn) {\n    this._compareWith = fn;\n\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get id() {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get required() {\n    return this._required;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n\n\n  get focused() {\n    return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get empty() {\n    return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get shouldLabelFloat() {\n    return !this.empty || this.focused;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get disabled() {\n    return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    this._syncChipsState();\n  }\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n\n\n  get selectable() {\n    return this._selectable;\n  }\n\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n\n  set tabIndex(value) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n  /** Combined stream of all of the child chips' selection change events. */\n\n\n  get chipSelectionChanges() {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n  /** Combined stream of all of the child chips' focus change events. */\n\n\n  get chipFocusChanges() {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n  /** Combined stream of all of the child chips' blur change events. */\n\n\n  get chipBlurChanges() {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n  /** Combined stream of all of the child chips' remove change events. */\n\n\n  get chipRemoveChanges() {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHomeAndEnd().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    }); // When the list changes, re-subscribe\n\n\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips(); // Reset chips selected/deselected status\n\n\n      this._initializeSelection(); // Check to see if we need to update our tab index\n\n\n      this._updateTabIndex(); // Check to see if we have a destroyed chip and need to refocus\n\n\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n\n      if (this.ngControl.disabled !== this._disabled) {\n        this.disabled = !!this.ngControl.disabled;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n  /** Associates an HTML input element with this chip list. */\n\n\n  registerInput(inputElement) {\n    this._chipInput = inputElement; // We use this attribute to match the chip list to its input in test harnesses.\n    // Set the attribute directly here to avoid \"changed after checked\" errors.\n\n    this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  } // Implemented as part of ControlValueAccessor.\n\n\n  writeValue(value) {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  onContainerClick(event) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n\n\n  focus(options) {\n    if (this.disabled) {\n      return;\n    } // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n\n\n    if (this._chipInput && this._chipInput.focused) {// do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n\n      this.stateChanges.next();\n    }\n  }\n  /** Attempt to focus an input if we have one. */\n\n\n  _focusInput(options) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n\n\n  _keydown(event) {\n    const target = event.target;\n\n    if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n\n\n  _updateTabIndex() {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n\n\n  _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n\n\n  _isValidIndex(index) {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  _setSelectionByValue(value, isUserInput = true) {\n    this._clearSelection();\n\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput); // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n\n\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n\n\n  _selectValue(value, isUserInput = true) {\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value, value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n\n        this.stateChanges.next();\n      }\n    });\n  }\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n\n\n  _clearSelection(skip) {\n    this._selectionModel.clear();\n\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n\n\n  _sortValues() {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n  /** Emits change event to set the model value. */\n\n\n  _propagateChanges(fallbackValue) {\n    let valueToEmit = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n\n    this._onChange(valueToEmit);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n\n\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n  /** Mark the field as touched */\n\n\n  _markAsTouched() {\n    this._onTouched();\n\n    this._changeDetectorRef.markForCheck();\n\n    this.stateChanges.next();\n  }\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n\n\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  _resetChips() {\n    this._dropSubscriptions();\n\n    this._listenToChipsFocus();\n\n    this._listenToChipsSelection();\n\n    this._listenToChipsRemoved();\n  }\n\n  _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n\n      this._chipRemoveSubscription = null;\n    }\n  }\n  /** Listens to user-generated selection events on each chip. */\n\n\n  _listenToChipsSelection() {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected ? this._selectionModel.select(event.source) : this._selectionModel.deselect(event.source); // For single selection chip list, make sure the deselected value is unselected.\n\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n  /** Listens to user-generated selection events on each chip. */\n\n\n  _listenToChipsFocus() {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItem(chipIndex);\n      }\n\n      this.stateChanges.next();\n    });\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n\n      this.stateChanges.next();\n    });\n  }\n\n  _listenToChipsRemoved() {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip); // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n  /** Checks whether an event comes from inside a chip element. */\n\n\n  _originatesFromChip(event) {\n    let currentElement = event.target;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n  /** Checks whether any of the chips is focused. */\n\n\n  _hasFocusedChip() {\n    return this.chips && this.chips.some(chip => chip._hasFocus);\n  }\n  /** Syncs the list's state with the individual chips. */\n\n\n  _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip._chipListDisabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n\n}\n\nMatChipList.ɵfac = function MatChipList_Factory(t) {\n  return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10));\n};\n\nMatChipList.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatChipList,\n  selectors: [[\"mat-chip-list\"]],\n  contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-chip-list\"],\n  hostVars: 15,\n  hostBindings: function MatChipList_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChipList_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    }\n  },\n  inputs: {\n    ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"],\n    multiple: \"multiple\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    required: \"required\",\n    placeholder: \"placeholder\",\n    disabled: \"disabled\",\n    selectable: \"selectable\",\n    tabIndex: \"tabIndex\",\n    errorStateMatcher: \"errorStateMatcher\"\n  },\n  outputs: {\n    change: \"change\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matChipList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatChipList\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-chip-list-wrapper\"]],\n  template: function MatChipList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatChipList.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }]\n}];\n\nMatChipList.propDecorators = {\n  errorStateMatcher: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  ariaOrientation: [{\n    type: Input,\n    args: ['aria-orientation']\n  }],\n  selectable: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  chips: [{\n    type: ContentChildren,\n    args: [MatChip, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-chip-list',\n      template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n      exportAs: 'matChipList',\n      host: {\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-required]': 'role ? required : null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.role]': 'role',\n        '[class.mat-chip-list-disabled]': 'disabled',\n        '[class.mat-chip-list-invalid]': 'errorState',\n        '[class.mat-chip-list-required]': 'required',\n        '[attr.aria-orientation]': 'ariaOrientation',\n        'class': 'mat-chip-list',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()',\n        '(keydown)': '_keydown($event)',\n        '[id]': '_uid'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatChipList\n      }],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.ErrorStateMatcher\n    }, {\n      type: ɵngcc3.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }];\n  }, {\n    ariaOrientation: [{\n      type: Input,\n      args: ['aria-orientation']\n    }],\n    change: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    multiple: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    chips: [{\n      type: ContentChildren,\n      args: [MatChip, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\n\n\nlet nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n\nclass MatChipInput {\n  constructor(_elementRef, _defaultOptions) {\n    this._elementRef = _elementRef;\n    this._defaultOptions = _defaultOptions;\n    /** Whether the control is focused. */\n\n    this.focused = false;\n    this._addOnBlur = false;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n\n    this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n    /** Emitted when a chip is to be added. */\n\n    this.chipEnd = new EventEmitter();\n    /** The input's placeholder text. */\n\n    this.placeholder = '';\n    /** Unique id for the input. */\n\n    this.id = `mat-chip-list-input-${nextUniqueId++}`;\n    this._disabled = false;\n    this.inputElement = this._elementRef.nativeElement;\n  }\n  /** Register input for chip list */\n\n\n  set chipList(value) {\n    if (value) {\n      this._chipList = value;\n\n      this._chipList.registerInput(this);\n    }\n  }\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n\n\n  get addOnBlur() {\n    return this._addOnBlur;\n  }\n\n  set addOnBlur(value) {\n    this._addOnBlur = coerceBooleanProperty(value);\n  }\n  /** Whether the input is disabled. */\n\n\n  get disabled() {\n    return this._disabled || this._chipList && this._chipList.disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** Whether the input is empty. */\n\n\n  get empty() {\n    return !this.inputElement.value;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.chipEnd.complete();\n  }\n\n  ngAfterContentInit() {\n    this._focusLastChipOnBackspace = this.empty;\n  }\n  /** Utility method to make host definition/tests more clear. */\n\n\n  _keydown(event) {\n    if (event) {\n      // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n      // want to do this when going backwards, because focus should go back to the first chip.\n      if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n        this._chipList._allowFocusEscape();\n      } // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n      // We focus the last chip on backspace only after the user has released the backspace button,\n      // and the input is empty (see behaviour in _keyup)\n\n\n      if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n        this._chipList._keyManager.setLastItemActive();\n\n        event.preventDefault();\n        return;\n      } else {\n        this._focusLastChipOnBackspace = false;\n      }\n    }\n\n    this._emitChipEnd(event);\n  }\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n\n\n  _keyup(event) {\n    // Allow user to move focus to chips next time he presses backspace\n    if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n      this._focusLastChipOnBackspace = true;\n      event.preventDefault();\n    }\n  }\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n\n\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n\n    this.focused = false; // Blur the chip list if it is not focused\n\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._focusLastChipOnBackspace = this.empty;\n\n    this._chipList.stateChanges.next();\n  }\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n\n\n  _emitChipEnd(event) {\n    if (!this.inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({\n        input: this.inputElement,\n        value: this.inputElement.value,\n        chipInput: this\n      });\n      event === null || event === void 0 ? void 0 : event.preventDefault();\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n  /** Focuses the input. */\n\n\n  focus(options) {\n    this.inputElement.focus(options);\n  }\n  /** Clears the input */\n\n\n  clear() {\n    this.inputElement.value = '';\n    this._focusLastChipOnBackspace = true;\n  }\n  /** Checks whether a keycode is one of the configured separators. */\n\n\n  _isSeparatorKey(event) {\n    return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n  }\n\n}\n\nMatChipInput.ɵfac = function MatChipInput_Factory(t) {\n  return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS));\n};\n\nMatChipInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatChipInput,\n  selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n  hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"],\n  hostVars: 5,\n  hostBindings: function MatChipInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      })(\"keyup\", function MatChipInput_keyup_HostBindingHandler($event) {\n        return ctx._keyup($event);\n      })(\"blur\", function MatChipInput_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"focus\", function MatChipInput_focus_HostBindingHandler() {\n        return ctx._focus();\n      })(\"input\", function MatChipInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    }\n  },\n  inputs: {\n    separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n    placeholder: \"placeholder\",\n    id: \"id\",\n    chipList: [\"matChipInputFor\", \"chipList\"],\n    addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"],\n    disabled: \"disabled\"\n  },\n  outputs: {\n    chipEnd: \"matChipInputTokenEnd\"\n  },\n  exportAs: [\"matChipInput\", \"matChipInputFor\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nMatChipInput.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_CHIPS_DEFAULT_OPTIONS]\n  }]\n}];\n\nMatChipInput.propDecorators = {\n  chipList: [{\n    type: Input,\n    args: ['matChipInputFor']\n  }],\n  addOnBlur: [{\n    type: Input,\n    args: ['matChipInputAddOnBlur']\n  }],\n  separatorKeyCodes: [{\n    type: Input,\n    args: ['matChipInputSeparatorKeyCodes']\n  }],\n  chipEnd: [{\n    type: Output,\n    args: ['matChipInputTokenEnd']\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matChipInputFor]',\n      exportAs: 'matChipInput, matChipInputFor',\n      host: {\n        'class': 'mat-chip-input mat-input-element',\n        '(keydown)': '_keydown($event)',\n        '(keyup)': '_keyup($event)',\n        '(blur)': '_blur()',\n        '(focus)': '_focus()',\n        '(input)': '_onInput()',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n        '[attr.aria-required]': '_chipList && _chipList.required || null'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_CHIPS_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    separatorKeyCodes: [{\n      type: Input,\n      args: ['matChipInputSeparatorKeyCodes']\n    }],\n    chipEnd: [{\n      type: Output,\n      args: ['matChipInputTokenEnd']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    chipList: [{\n      type: Input,\n      args: ['matChipInputFor']\n    }],\n    addOnBlur: [{\n      type: Input,\n      args: ['matChipInputAddOnBlur']\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst CHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\nconst ɵ0 = {\n  separatorKeyCodes: [ENTER]\n};\n\nclass MatChipsModule {}\n\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) {\n  return new (t || MatChipsModule)();\n};\n\nMatChipsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatChipsModule\n});\nMatChipsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher, {\n    provide: MAT_CHIPS_DEFAULT_OPTIONS,\n    useValue: ɵ0\n  }],\n  imports: [MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: CHIP_DECLARATIONS,\n      declarations: CHIP_DECLARATIONS,\n      providers: [ErrorStateMatcher, {\n        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n        useValue: ɵ0\n      }]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, {\n    declarations: function () {\n      return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\n    },\n    imports: function () {\n      return [MatCommonModule];\n    },\n    exports: function () {\n      return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };","map":{"version":3,"names":["SPACE","BACKSPACE","DELETE","TAB","hasModifierKey","ENTER","InjectionToken","Directive","EventEmitter","ElementRef","NgZone","Optional","Inject","ChangeDetectorRef","Attribute","ContentChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Self","ContentChildren","NgModule","mixinTabIndex","mixinColor","mixinDisableRipple","RippleRenderer","MAT_RIPPLE_GLOBAL_OPTIONS","mixinErrorState","ErrorStateMatcher","MatCommonModule","coerceBooleanProperty","Platform","DOCUMENT","ANIMATION_MODULE_TYPE","Subject","merge","take","takeUntil","startWith","FocusKeyManager","Directionality","SelectionModel","NgForm","FormGroupDirective","NgControl","MatFormFieldControl","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","_c0","MatChipSelectionChange","constructor","source","selected","isUserInput","MAT_CHIP_REMOVE","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","MatChipBase","_elementRef","_MatChipMixinBase","MatChipAvatar","ɵfac","MatChipAvatar_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","features","ɵɵProvidersFeature","provide","useExisting","ngDevMode","ɵsetClassMetadata","args","selector","host","providers","MatChipTrailingIcon","MatChipTrailingIcon_Factory","MatChip","elementRef","_ngZone","platform","globalRippleOptions","_changeDetectorRef","_document","animationMode","tabIndex","_hasFocus","chipListSelectable","_chipListMultiple","_chipListDisabled","_selected","_selectable","_disabled","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRippleTarget","createElement","classList","add","nativeElement","appendChild","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","parseInt","rippleDisabled","disabled","disableRipple","value","coercedValue","_dispatchSelectionChange","_value","undefined","textContent","selectable","removable","ariaSelected","toString","basicChipAttrName","element","hasAttribute","tagName","toLowerCase","ngOnDestroy","emit","chip","_removeTriggerEvents","select","markForCheck","deselect","selectViaInteraction","toggleSelected","focus","next","remove","_handleClick","event","preventDefault","stopPropagation","_handleKeydown","keyCode","_blur","onStable","pipe","subscribe","run","MatChip_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","contentQueries","MatChip_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","avatar","first","trailingIcon","removeIcon","hostVars","hostBindings","MatChip_HostBindings","ɵɵlistener","MatChip_click_HostBindingHandler","$event","MatChip_keydown_HostBindingHandler","MatChip_focus_HostBindingHandler","MatChip_blur_HostBindingHandler","ɵɵattribute","ɵɵclassProp","inputs","color","outputs","exportAs","ɵɵInheritDefinitionFeature","ctorParameters","decorators","String","propDecorators","MatChipRemove","_parentChip","nodeName","setAttribute","parentChip","MatChipRemove_Factory","MatChipRemove_HostBindings","MatChipRemove_click_HostBindingHandler","MAT_CHIPS_DEFAULT_OPTIONS","_MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","nextUniqueId$1","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","ariaOrientation","change","valueChange","valueAccessor","_a","_b","multiple","_selectionModel","role","empty","_syncChipsState","compareWith","fn","_initializeSelection","writeValue","id","_chipInput","required","stateChanges","placeholder","_placeholder","focused","_hasFocusedChip","chips","length","shouldLabelFloat","forEach","chipSelectionChanges","map","chipFocusChanges","chipBlurChanges","chipRemoveChanges","ngAfterContentInit","_keyManager","withWrap","withVerticalOrientation","withHomeAndEnd","withHorizontalOrientation","dir","tabOut","_allowFocusEscape","changes","Promise","resolve","then","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","ngOnInit","ngDoCheck","updateErrorState","complete","_dropSubscriptions","registerInput","inputElement","setDescribedByIds","ids","_ariaDescribedby","join","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onContainerClick","_originatesFromChip","options","setFirstItemActive","_focusInput","_keydown","target","contains","onKeydown","newChipIndex","Math","min","setActiveItem","_isValidIndex","index","_clearSelection","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","skip","clear","_propagateChanges","fallbackValue","valueToEmit","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","isSelected","chipIndex","toArray","indexOf","updateActiveItem","currentElement","parentElement","some","MatChipList_Factory","ɵcmp","ɵɵdefineComponent","MatChipList_ContentQueries","MatChipList_HostBindings","MatChipList_focus_HostBindingHandler","MatChipList_blur_HostBindingHandler","MatChipList_keydown_HostBindingHandler","ɵɵhostProperty","errorState","errorStateMatcher","ngContentSelectors","decls","vars","consts","template","MatChipList_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","styles","encapsulation","changeDetection","descendants","None","OnPush","nextUniqueId","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","chipList","_chipList","addOnBlur","ngOnChanges","_focusLastChipOnBackspace","setLastItemActive","_emitChipEnd","_keyup","_focus","_isSeparatorKey","input","chipInput","_onInput","Set","has","MatChipInput_Factory","MatChipInput_HostBindings","MatChipInput_keydown_HostBindingHandler","MatChipInput_keyup_HostBindingHandler","MatChipInput_blur_HostBindingHandler","MatChipInput_focus_HostBindingHandler","MatChipInput_input_HostBindingHandler","invalid","ɵɵNgOnChangesFeature","CHIP_DECLARATIONS","ɵ0","MatChipsModule","MatChipsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useValue","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Users/Henry/Desktop/New folder/Atomas2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/chips.js"],"sourcesContent":["import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event object emitted by MatChip when selected or deselected. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\n\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) { return new (t || MatChipAvatar)(); };\nMatChipAvatar.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipAvatar, selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]], hostAttrs: [1, \"mat-chip-avatar\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' },\n                providers: [{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }]\n            }]\n    }], null, null); })();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) { return new (t || MatChipTrailingIcon)(); };\nMatChipTrailingIcon.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipTrailingIcon, selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]], hostAttrs: [1, \"mat-chip-trailing-icon\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }])] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' },\n                providers: [{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }]\n            }]\n    }], null, null); })();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    constructor(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n        super(elementRef);\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        this._chipListMultiple = false;\n        /** Whether the chip list as a whole is disabled. */\n        this._chipListDisabled = false;\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /** Emits when the chip is focused. */\n        this._onFocus = new Subject();\n        /** Emits when the chip is blured. */\n        this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = _document.createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || this._animationsDisabled ||\n            !!this.rippleConfig.disabled;\n    }\n    /** Whether the chip is selected. */\n    get selected() { return this._selected; }\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n    get disabled() { return this._chipListDisabled || this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    get removable() { return this._removable; }\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    _addHostClassName() {\n        const basicChipAttrName = 'mat-basic-chip';\n        const element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Deselects the chip. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Select this chip and emit selected event */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._changeDetectorRef.markForCheck();\n        return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /** Handles click events on the chip. */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /** Handle custom key presses. */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\nMatChip.ɵfac = function MatChip_Factory(t) { return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatChip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChip, selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]], contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    } }, hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"], hostVars: 14, hostBindings: function MatChip_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) { return ctx._handleClick($event); })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatChip_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChip_blur_HostBindingHandler() { return ctx._blur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    } }, inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", selected: \"selected\", value: \"value\", selectable: \"selectable\", disabled: \"disabled\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, exportAs: [\"matChip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MAT_CHIP_AVATAR,] }],\n    trailingIcon: [{ type: ContentChild, args: [MAT_CHIP_TRAILING_ICON,] }],\n    removeIcon: [{ type: ContentChild, args: [MAT_CHIP_REMOVE,] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    disabled: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChip, [{\n        type: Directive,\n        args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disableRipple', 'tabIndex'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip mat-focus-indicator',\n                    '[attr.tabindex]': 'disabled ? null : tabIndex',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], removed: [{\n            type: Output\n        }], selected: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], removable: [{\n            type: Input\n        }], avatar: [{\n            type: ContentChild,\n            args: [MAT_CHIP_AVATAR]\n        }], trailingIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_TRAILING_ICON]\n        }], removeIcon: [{\n            type: ContentChild,\n            args: [MAT_CHIP_REMOVE]\n        }] }); })();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    constructor(_parentChip, elementRef) {\n        this._parentChip = _parentChip;\n        if (elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event) {\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) { return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatChipRemove.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipRemove, selectors: [[\"\", \"matChipRemove\", \"\"]], hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"], hostBindings: function MatChipRemove_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) { return ctx._handleClick($event); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }])] });\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n        type: Directive,\n        args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)'\n                },\n                providers: [{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }]\n            }]\n    }], function () { return [{ type: MatChip }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nconst _MatChipListBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId$1 = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListBase {\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Uid of the chip list */\n        this._uid = `mat-chip-list-${nextUniqueId$1++}`;\n        /** Tab index for the chip list. */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /** Function when touched */\n        this._onTouched = () => { };\n        /** Function when changed */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._required = false;\n        this._disabled = false;\n        /** Orientation of the chip list. */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /** The array of selected chips inside chip list. */\n    get selected() {\n        var _a, _b;\n        return this.multiple ? (((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || []) :\n            (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n    get role() { return this.empty ? null : 'listbox'; }\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._value; }\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    get selectable() { return this._selectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n        }\n    }\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHomeAndEnd()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._allowFocusEscape();\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n        // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /** Attempt to focus an input if we have one. */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event) {\n        const target = event.target;\n        if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n        let currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n        return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            });\n        }\n    }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) { return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10)); };\nMatChipList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatChipList, selectors: [[\"mat-chip-list\"]], contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    } }, hostAttrs: [1, \"mat-chip-list\"], hostVars: 15, hostBindings: function MatChipList_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() { return ctx.focus(); })(\"blur\", function MatChipList_blur_HostBindingHandler() { return ctx._blur(); })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n        ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    } }, inputs: { ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", selectable: \"selectable\", tabIndex: \"tabIndex\", errorStateMatcher: \"errorStateMatcher\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, exportAs: [\"matChipList\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatChipList }]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-chip-list-wrapper\"]], template: function MatChipList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n        type: Component,\n        args: [{ selector: 'mat-chip-list', template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`, exportAs: 'matChipList', host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid'\n                }, providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }]; }, { ariaOrientation: [{\n            type: Input,\n            args: ['aria-orientation']\n        }], change: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], multiple: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], selectable: [{\n            type: Input\n        }], tabIndex: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], chips: [{\n            type: ContentChildren,\n            args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = `mat-chip-list-input-${nextUniqueId++}`;\n        this._disabled = false;\n        this.inputElement = this._elementRef.nativeElement;\n    }\n    /** Register input for chip list */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /** Whether the input is disabled. */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Whether the input is empty. */\n    get empty() { return !this.inputElement.value; }\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.chipEnd.complete();\n    }\n    ngAfterContentInit() {\n        this._focusLastChipOnBackspace = this.empty;\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n        if (event) {\n            // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n            // want to do this when going backwards, because focus should go back to the first chip.\n            if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n                this._chipList._allowFocusEscape();\n            }\n            // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n            // We focus the last chip on backspace only after the user has released the backspace button,\n            // and the input is empty (see behaviour in _keyup)\n            if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n                this._chipList._keyManager.setLastItemActive();\n                event.preventDefault();\n                return;\n            }\n            else {\n                this._focusLastChipOnBackspace = false;\n            }\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keyup(event) {\n        // Allow user to move focus to chips next time he presses backspace\n        if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n            this._focusLastChipOnBackspace = true;\n            event.preventDefault();\n        }\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    _focus() {\n        this.focused = true;\n        this._focusLastChipOnBackspace = this.empty;\n        this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n        if (!this.inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({\n                input: this.inputElement,\n                value: this.inputElement.value,\n                chipInput: this,\n            });\n            event === null || event === void 0 ? void 0 : event.preventDefault();\n        }\n    }\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this.inputElement.focus(options);\n    }\n    /** Clears the input */\n    clear() {\n        this.inputElement.value = '';\n        this._focusLastChipOnBackspace = true;\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) { return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS)); };\nMatChipInput.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatChipInput, selectors: [[\"input\", \"matChipInputFor\", \"\"]], hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"], hostVars: 5, hostBindings: function MatChipInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) { return ctx._keydown($event); })(\"keyup\", function MatChipInput_keyup_HostBindingHandler($event) { return ctx._keyup($event); })(\"blur\", function MatChipInput_blur_HostBindingHandler() { return ctx._blur(); })(\"focus\", function MatChipInput_focus_HostBindingHandler() { return ctx._focus(); })(\"input\", function MatChipInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    } }, inputs: { separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(keyup)': '_keyup($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_CHIPS_DEFAULT_OPTIONS]\n            }] }]; }, { separatorKeyCodes: [{\n            type: Input,\n            args: ['matChipInputSeparatorKeyCodes']\n        }], chipEnd: [{\n            type: Output,\n            args: ['matChipInputTokenEnd']\n        }], placeholder: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], chipList: [{\n            type: Input,\n            args: ['matChipInputFor']\n        }], addOnBlur: [{\n            type: Input,\n            args: ['matChipInputAddOnBlur']\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = {\n    separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {\n}\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) { return new (t || MatChipsModule)(); };\nMatChipsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatChipsModule });\nMatChipsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: ɵ0\n        }\n    ], imports: [MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ɵ0\n                    }\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, { declarations: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}