{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Optional, Input, Directive, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, inject, ChangeDetectorRef, Self, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, merge, Subscription, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil, filter, delay } from 'rxjs/operators';\nimport * as i3 from '@angular/material/core';\nimport { mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3$1 from '@angular/cdk/bidi';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\n\nconst _c0 = [\"mat-menu-item\", \"\"];\n\nfunction MatMenuItem__svg_svg_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 3);\n    i0.ɵɵelement(1, \"polygon\", 4);\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c1 = [[[\"mat-icon\"], [\"\", \"matMenuItemIcon\", \"\"]], \"*\"];\nconst _c2 = [\"mat-icon, [matMenuItemIcon]\", \"*\"];\n\nfunction MatMenu_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 0);\n    i0.ɵɵlistener(\"keydown\", function MatMenu_ng_template_0_Template_div_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._handleKeydown($event));\n    })(\"click\", function MatMenu_ng_template_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.closed.emit(\"click\"));\n    })(\"@transformMenu.start\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4._onAnimationStart($event));\n    })(\"@transformMenu.done\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5._onAnimationDone($event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 1);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r0.panelId)(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0.ariaLabelledby || null)(\"aria-describedby\", ctx_r0.ariaDescribedby || null);\n  }\n}\n\nconst _c3 = [\"*\"];\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL'); // Boilerplate for applying mixins to MatMenuItem.\n\n/** @docs-private */\n\nconst _MatMenuItemBase = mixinDisableRipple(mixinDisabled(class {}));\n/**\n * Single item inside a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\n\n\nclass MatMenuItem extends _MatMenuItemBase {\n  constructor(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {\n    super();\n    this._elementRef = _elementRef;\n    this._document = _document;\n    this._focusMonitor = _focusMonitor;\n    this._parentMenu = _parentMenu;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** ARIA role for the menu item. */\n\n    this.role = 'menuitem';\n    /** Stream that emits when the menu item is hovered. */\n\n    this._hovered = new Subject();\n    /** Stream that emits when the menu item is focused. */\n\n    this._focused = new Subject();\n    /** Whether the menu item is highlighted. */\n\n    this._highlighted = false;\n    /** Whether the menu item acts as a trigger for a sub-menu. */\n\n    this._triggersSubmenu = false;\n    _parentMenu?.addItem?.(this);\n  }\n  /** Focuses the menu item. */\n\n\n  focus(origin, options) {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n\n    this._focused.next(this);\n  }\n\n  ngAfterViewInit() {\n    if (this._focusMonitor) {\n      // Start monitoring the element, so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      this._focusMonitor.monitor(this._elementRef, false);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n\n    this._focused.complete();\n  }\n  /** Used to set the `tabindex`. */\n\n\n  _getTabIndex() {\n    return this.disabled ? '-1' : '0';\n  }\n  /** Returns the host DOM element. */\n\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n  /** Prevents the default element actions if it is disabled. */\n\n\n  _checkDisabled(event) {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n  /** Emits to the hover stream. */\n\n\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n  /** Gets the label to be used when determining whether the option should be focused. */\n\n\n  getLabel() {\n    const clone = this._elementRef.nativeElement.cloneNode(true);\n\n    const icons = clone.querySelectorAll('mat-icon, .material-icons'); // Strip away icons, so they don't show up in the text.\n\n    for (let i = 0; i < icons.length; i++) {\n      icons[i].remove();\n    }\n\n    return clone.textContent?.trim() || '';\n  }\n\n  _setHighlighted(isHighlighted) {\n    // We need to mark this for check for the case where the content is coming from a\n    // `matMenuContent` whose change detection tree is at the declaration position,\n    // not the insertion position. See #23175.\n    // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n    this._highlighted = isHighlighted;\n    this._changeDetectorRef?.markForCheck();\n  }\n\n  _setTriggersSubmenu(triggersSubmenu) {\n    // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n    this._triggersSubmenu = triggersSubmenu;\n    this._changeDetectorRef?.markForCheck();\n  }\n\n  _hasFocus() {\n    return this._document && this._document.activeElement === this._getHostElement();\n  }\n\n}\n\nMatMenuItem.ɵfac = function MatMenuItem_Factory(t) {\n  return new (t || MatMenuItem)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nMatMenuItem.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatMenuItem,\n  selectors: [[\"\", \"mat-menu-item\", \"\"]],\n  hostAttrs: [1, \"mat-mdc-menu-item\", \"mat-mdc-focus-indicator\"],\n  hostVars: 8,\n  hostBindings: function MatMenuItem_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) {\n        return ctx._checkDisabled($event);\n      })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() {\n        return ctx._handleMouseEnter();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled)(\"disabled\", ctx.disabled || null);\n      i0.ɵɵclassProp(\"mat-mdc-menu-item-highlighted\", ctx._highlighted)(\"mat-mdc-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    role: \"role\"\n  },\n  exportAs: [\"matMenuItem\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  attrs: _c0,\n  ngContentSelectors: _c2,\n  decls: 5,\n  vars: 3,\n  consts: [[1, \"mat-mdc-menu-item-text\"], [\"matRipple\", \"\", 1, \"mat-mdc-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"], [\"class\", \"mat-mdc-menu-submenu-icon\", \"viewBox\", \"0 0 5 10\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"viewBox\", \"0 0 5 10\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 1, \"mat-mdc-menu-submenu-icon\"], [\"points\", \"0,0 5,5 0,10\"]],\n  template: function MatMenuItem_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c1);\n      i0.ɵɵprojection(0);\n      i0.ɵɵelementStart(1, \"span\", 0);\n      i0.ɵɵprojection(2, 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"div\", 1);\n      i0.ɵɵtemplate(4, MatMenuItem__svg_svg_4_Template, 2, 0, \"svg\", 2);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx._triggersSubmenu);\n    }\n  },\n  dependencies: [i2.NgIf, i3.MatRipple],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuItem, [{\n    type: Component,\n    args: [{\n      selector: '[mat-menu-item]',\n      exportAs: 'matMenuItem',\n      inputs: ['disabled', 'disableRipple'],\n      host: {\n        '[attr.role]': 'role',\n        'class': 'mat-mdc-menu-item mat-mdc-focus-indicator',\n        '[class.mat-mdc-menu-item-highlighted]': '_highlighted',\n        '[class.mat-mdc-menu-item-submenu-trigger]': '_triggersSubmenu',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_checkDisabled($event)',\n        '(mouseenter)': '_handleMouseEnter()'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-mdc-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"\\n  aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_PANEL]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\n\n\nfunction throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\n\n\nfunction throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\n\n\nfunction throwMatMenuRecursiveError() {\n  throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` + `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\n\nclass _MatMenuContentBase {\n  constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n    this._template = _template;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n    this._injector = _injector;\n    this._viewContainerRef = _viewContainerRef;\n    this._document = _document;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Emits when the menu content has been attached. */\n\n    this._attached = new Subject();\n  }\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n\n\n  attach(context = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element = this._template.elementRef.nativeElement; // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n\n    element.parentNode.insertBefore(this._outlet.outletElement, element); // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    // @breaking-change 9.0.0 Make change detector ref required\n\n    this._changeDetectorRef?.markForCheck();\n\n    this._portal.attach(this._outlet, context);\n\n    this._attached.next();\n  }\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n\n\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n\n}\n\n_MatMenuContentBase.ɵfac = function _MatMenuContentBase_Factory(t) {\n  return new (t || _MatMenuContentBase)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ApplicationRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\n_MatMenuContentBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatMenuContentBase\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatMenuContentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.ApplicationRef\n    }, {\n      type: i0.Injector\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n/** Menu content that will be rendered lazily once the menu is opened. */\n\n\nclass MatMenuContent extends _MatMenuContentBase {}\n\nMatMenuContent.ɵfac = /* @__PURE__ */function () {\n  let ɵMatMenuContent_BaseFactory;\n  return function MatMenuContent_Factory(t) {\n    return (ɵMatMenuContent_BaseFactory || (ɵMatMenuContent_BaseFactory = i0.ɵɵgetInheritedFactory(MatMenuContent)))(t || MatMenuContent);\n  };\n}();\n\nMatMenuContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatMenuContent,\n  selectors: [[\"ng-template\", \"matMenuContent\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_MENU_CONTENT,\n    useExisting: MatMenuContent\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuContent, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matMenuContent]',\n      providers: [{\n        provide: MAT_MENU_CONTENT,\n        useExisting: MatMenuContent\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\n\n\nconst matMenuAnimations = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [state('void', style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 1,\n    transform: 'scale(1)'\n  }))), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))]),\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [// TODO(crisbeto): this is inside the `transformMenu`\n  // now. Remove next time we do breaking changes.\n  state('showing', style({\n    opacity: 1\n  })), transition('void => *', [style({\n    opacity: 0\n  }), animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\n\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\n\nconst transformMenu = matMenuAnimations.transformMenu;\nlet menuPanelUid = 0;\n/** Injection token to be used to override the default options for `mat-menu`. */\n\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n  providedIn: 'root',\n  factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop'\n  };\n}\n/** Base class with all of the `MatMenu` functionality. */\n\n\nclass _MatMenuBase {\n  /** Position of the menu in the X axis. */\n  get xPosition() {\n    return this._xPosition;\n  }\n\n  set xPosition(value) {\n    if (value !== 'before' && value !== 'after' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionX();\n    }\n\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n  /** Position of the menu in the Y axis. */\n\n\n  get yPosition() {\n    return this._yPosition;\n  }\n\n  set yPosition(value) {\n    if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionY();\n    }\n\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n  /** Whether the menu should overlap its trigger. */\n\n\n  get overlapTrigger() {\n    return this._overlapTrigger;\n  }\n\n  set overlapTrigger(value) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  /** Whether the menu has a backdrop. */\n\n\n  get hasBackdrop() {\n    return this._hasBackdrop;\n  }\n\n  set hasBackdrop(value) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n\n\n  set panelClass(classes) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach(className => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach(className => {\n        this._classList[className] = true;\n      });\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n\n\n  get classList() {\n    return this.panelClass;\n  }\n\n  set classList(classes) {\n    this.panelClass = classes;\n  }\n\n  constructor(_elementRef, _ngZone, defaultOptions, // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n  _changeDetectorRef) {\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Only the direct descendant menu items. */\n\n    this._directDescendantItems = new QueryList();\n    /** Config object to be passed into the menu's ngClass */\n\n    this._classList = {};\n    /** Current state of the panel animation. */\n\n    this._panelAnimationState = 'void';\n    /** Emits whenever an animation on the menu completes. */\n\n    this._animationDone = new Subject();\n    /** Event emitted when the menu is closed. */\n\n    this.closed = new EventEmitter();\n    /**\n     * Event emitted when the menu is closed.\n     * @deprecated Switch to `closed` instead\n     * @breaking-change 8.0.0\n     */\n\n    this.close = this.closed;\n    this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n    this.overlayPanelClass = defaultOptions.overlayPanelClass || '';\n    this._xPosition = defaultOptions.xPosition;\n    this._yPosition = defaultOptions.yPosition;\n    this.backdropClass = defaultOptions.backdropClass;\n    this._overlapTrigger = defaultOptions.overlapTrigger;\n    this._hasBackdrop = defaultOptions.hasBackdrop;\n  }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n\n    this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead().withHomeAndEnd();\n\n    this._keyManager.tabOut.subscribe(() => this.closed.emit('tab')); // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n    // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n    // is internal and we know that it gets completed on destroy.\n\n\n    this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map(item => item._focused)))).subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n\n    this._directDescendantItems.changes.subscribe(itemsList => {\n      // Move focus to another item, if the active item is removed from the list.\n      // We need to debounce the callback, because multiple items might be removed\n      // in quick succession.\n      const manager = this._keyManager;\n\n      if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n        const items = itemsList.toArray();\n        const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n\n        if (items[index] && !items[index].disabled) {\n          manager.setActiveItem(index);\n        } else {\n          manager.setNextItemActive();\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._keyManager?.destroy();\n\n    this._directDescendantItems.destroy();\n\n    this.closed.complete();\n    this._firstItemFocusSubscription?.unsubscribe();\n  }\n  /** Stream that emits whenever the hovered menu item changes. */\n\n\n  _hovered() {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes;\n    return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map(item => item._hovered))));\n  }\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n\n\n  addItem(_item) {}\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n\n\n  removeItem(_item) {}\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n\n\n  _handleKeydown(event) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n\n        break;\n\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n\n        break;\n\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n\n        break;\n\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n        return;\n    } // Don't allow the event to propagate if we've already handled it, or it may\n    // end up reaching other overlays that were opened earlier (see #22694).\n\n\n    event.stopPropagation();\n  }\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n\n\n  focusFirstItem(origin = 'program') {\n    // Wait for `onStable` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n    this._firstItemFocusSubscription?.unsubscribe();\n    this._firstItemFocusSubscription = this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      let menuPanel = null;\n\n      if (this._directDescendantItems.length) {\n        // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n        // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n        // because the panel is inside an `ng-template`. We work around it by starting from one of\n        // the items and walking up the DOM.\n        menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n      } // If an item in the menuPanel is already focused, avoid overriding the focus.\n\n\n      if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n        const manager = this._keyManager;\n        manager.setFocusOrigin(origin).setFirstItemActive(); // If there's no active item at this point, it means that all the items are disabled.\n        // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n        // give _some_ feedback to screen readers.\n\n        if (!manager.activeItem && menuPanel) {\n          menuPanel.focus();\n        }\n      }\n    });\n  }\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n\n\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n\n\n  setElevation(depth) {\n    // The elevation starts at the base and increases by one for each level.\n    // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n    const elevation = Math.min(this._baseElevation + depth, 24);\n    const newElevation = `${this._elevationPrefix}${elevation}`;\n    const customElevation = Object.keys(this._classList).find(className => {\n      return className.startsWith(this._elevationPrefix);\n    });\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n\n\n  setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below'; // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n\n    this._changeDetectorRef?.markForCheck();\n  }\n  /** Starts the enter animation. */\n\n\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n  /** Resets the panel animation to its initial state. */\n\n\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n  /** Callback that is invoked when the panel animation completes. */\n\n\n  _onAnimationDone(event) {\n    this._animationDone.next(event);\n\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event) {\n    this._isAnimating = true; // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n\n\n  _updateDirectDescendants() {\n    this._allItems.changes.pipe(startWith(this._allItems)).subscribe(items => {\n      this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n\n      this._directDescendantItems.notifyOnChanges();\n    });\n  }\n\n}\n\n_MatMenuBase.ɵfac = function _MatMenuBase_Factory(t) {\n  return new (t || _MatMenuBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\n_MatMenuBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatMenuBase,\n  contentQueries: function _MatMenuBase_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MAT_MENU_CONTENT, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatMenuItem, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatMenuItem, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._allItems = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.items = _t);\n    }\n  },\n  viewQuery: function _MatMenuBase_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(TemplateRef, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n    }\n  },\n  inputs: {\n    backdropClass: \"backdropClass\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"],\n    xPosition: \"xPosition\",\n    yPosition: \"yPosition\",\n    overlapTrigger: \"overlapTrigger\",\n    hasBackdrop: \"hasBackdrop\",\n    panelClass: [\"class\", \"panelClass\"],\n    classList: \"classList\"\n  },\n  outputs: {\n    closed: \"closed\",\n    close: \"close\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatMenuBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    _allItems: [{\n      type: ContentChildren,\n      args: [MatMenuItem, {\n        descendants: true\n      }]\n    }],\n    backdropClass: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    xPosition: [{\n      type: Input\n    }],\n    yPosition: [{\n      type: Input\n    }],\n    templateRef: [{\n      type: ViewChild,\n      args: [TemplateRef]\n    }],\n    items: [{\n      type: ContentChildren,\n      args: [MatMenuItem, {\n        descendants: false\n      }]\n    }],\n    lazyContent: [{\n      type: ContentChild,\n      args: [MAT_MENU_CONTENT]\n    }],\n    overlapTrigger: [{\n      type: Input\n    }],\n    hasBackdrop: [{\n      type: Input\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['class']\n    }],\n    classList: [{\n      type: Input\n    }],\n    closed: [{\n      type: Output\n    }],\n    close: [{\n      type: Output\n    }]\n  });\n})();\n\nclass MatMenu extends _MatMenuBase {\n  constructor(_elementRef, _ngZone, _defaultOptions, changeDetectorRef) {\n    super(_elementRef, _ngZone, _defaultOptions, changeDetectorRef);\n    this._elevationPrefix = 'mat-elevation-z';\n    this._baseElevation = 8;\n  }\n\n}\n\nMatMenu.ɵfac = function MatMenu_Factory(t) {\n  return new (t || MatMenu)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nMatMenu.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatMenu,\n  selectors: [[\"mat-menu\"]],\n  hostAttrs: [\"ngSkipHydration\", \"\"],\n  hostVars: 3,\n  hostBindings: function MatMenu_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n    }\n  },\n  exportAs: [\"matMenu\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_MENU_PANEL,\n    useExisting: MatMenu\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c3,\n  decls: 1,\n  vars: 0,\n  consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-mdc-menu-panel\", \"mat-mdc-elevation-specific\", 3, \"id\", \"ngClass\", \"keydown\", \"click\"], [1, \"mat-mdc-menu-content\"]],\n  template: function MatMenu_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, MatMenu_ng_template_0_Template, 3, 6, \"ng-template\");\n    }\n  },\n  dependencies: [i2.NgClass],\n  styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;list-style-type:none}.mat-mdc-menu-content:focus{outline:none}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;white-space:normal;font-family:var(--mat-menu-item-label-text-font);line-height:var(--mat-menu-item-label-text-line-height);font-size:var(--mat-menu-item-label-text-size);letter-spacing:var(--mat-menu-item-label-text-tracking);font-weight:var(--mat-menu-item-label-text-weight)}.mat-mdc-menu-panel{--mat-menu-container-shape:4px;min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape);background-color:var(--mat-menu-container-color);will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;align-items:center;min-height:48px}.mat-mdc-menu-item:focus{outline:none}[dir=rtl] .mat-mdc-menu-item,.mat-mdc-menu-item[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color)}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color)}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:16px}.mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-mdc-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenu, [{\n    type: Component,\n    args: [{\n      selector: 'mat-menu',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matMenu',\n      host: {\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[attr.aria-describedby]': 'null',\n        'ngSkipHydration': ''\n      },\n      animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems],\n      providers: [{\n        provide: MAT_MENU_PANEL,\n        useExisting: MatMenu\n      }],\n      template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel mat-mdc-elevation-specific\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n      styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;list-style-type:none}.mat-mdc-menu-content:focus{outline:none}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;white-space:normal;font-family:var(--mat-menu-item-label-text-font);line-height:var(--mat-menu-item-label-text-line-height);font-size:var(--mat-menu-item-label-text-size);letter-spacing:var(--mat-menu-item-label-text-tracking);font-weight:var(--mat-menu-item-label-text-weight)}.mat-mdc-menu-panel{--mat-menu-container-shape:4px;min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape);background-color:var(--mat-menu-container-color);will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;align-items:center;min-height:48px}.mat-mdc-menu-item:focus{outline:none}[dir=rtl] .mat-mdc-menu-item,.mat-mdc-menu-item[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color)}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color)}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:16px}.mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-mdc-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n/** Injection token that determines the scroll handling while the menu is open. */\n\n\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\n\n\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY\n};\n/** Options for binding a passive event listener. */\n\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\n\nconst MENU_PANEL_TOP_PADDING = 8;\n\nclass _MatMenuTriggerBase {\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  get _deprecatedMatMenuTriggerFor() {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v) {\n    this.menu = v;\n  }\n  /** References the menu instance that the trigger is associated with. */\n\n\n  get menu() {\n    return this._menu;\n  }\n\n  set menu(menu) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuRecursiveError();\n      }\n\n      this._menuCloseSubscription = menu.close.subscribe(reason => {\n        this._destroyMenu(reason); // If a click closed the menu, we should close the entire chain of nested menus.\n\n\n        if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n          this._parentMaterialMenu.closed.emit(reason);\n        }\n      });\n    }\n\n    this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());\n  }\n\n  constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n  // tslint:disable-next-line: lightweight-tokens\n  _menuItemInstance, _dir, _focusMonitor, _ngZone) {\n    this._overlay = _overlay;\n    this._element = _element;\n    this._viewContainerRef = _viewContainerRef;\n    this._menuItemInstance = _menuItemInstance;\n    this._dir = _dir;\n    this._focusMonitor = _focusMonitor;\n    this._ngZone = _ngZone;\n    this._overlayRef = null;\n    this._menuOpen = false;\n    this._closingActionsSubscription = Subscription.EMPTY;\n    this._hoverSubscription = Subscription.EMPTY;\n    this._menuCloseSubscription = Subscription.EMPTY;\n    this._changeDetectorRef = inject(ChangeDetectorRef);\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n\n    this._handleTouchStart = event => {\n      if (!isFakeTouchstartFromScreenReader(event)) {\n        this._openedBy = 'touch';\n      }\n    }; // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the menu is opened via the keyboard\n\n\n    this._openedBy = undefined;\n    /**\n     * Whether focus should be restored when the menu is closed.\n     * Note that disabling this option can have accessibility implications\n     * and it's up to you to manage focus, if you decide to turn it off.\n     */\n\n    this.restoreFocus = true;\n    /** Event emitted when the associated menu is opened. */\n\n    this.menuOpened = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is opened.\n     * @deprecated Switch to `menuOpened` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n\n    this.onMenuOpen = this.menuOpened;\n    /** Event emitted when the associated menu is closed. */\n\n    this.menuClosed = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is closed.\n     * @deprecated Switch to `menuClosed` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n\n    this.onMenuClose = this.menuClosed;\n    this._scrollStrategy = scrollStrategy;\n    this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n  }\n\n  ngAfterContentInit() {\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n\n    this._closingActionsSubscription.unsubscribe();\n\n    this._hoverSubscription.unsubscribe();\n  }\n  /** Whether the menu is open. */\n\n\n  get menuOpen() {\n    return this._menuOpen;\n  }\n  /** The text direction of the containing app. */\n\n\n  get dir() {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n\n\n  triggersSubmenu() {\n    return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);\n  }\n  /** Toggles the menu between the open and closed states. */\n\n\n  toggleMenu() {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n  /** Opens the menu. */\n\n\n  openMenu() {\n    const menu = this.menu;\n\n    if (this._menuOpen || !menu) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay(menu);\n\n    const overlayConfig = overlayRef.getConfig();\n    const positionStrategy = overlayConfig.positionStrategy;\n\n    this._setPosition(menu, positionStrategy);\n\n    overlayConfig.hasBackdrop = menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n    overlayRef.attach(this._getPortal(menu));\n\n    if (menu.lazyContent) {\n      menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n\n    this._initMenu(menu);\n\n    if (menu instanceof _MatMenuBase) {\n      menu._startAnimation();\n\n      menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n        // Re-adjust the position without locking when the amount of items\n        // changes so that the overlay is allowed to pick a new optimal position.\n        positionStrategy.withLockedPosition(false).reapplyLastPosition();\n        positionStrategy.withLockedPosition(true);\n      });\n    }\n  }\n  /** Closes the menu. */\n\n\n  closeMenu() {\n    this.menu?.close.emit();\n  }\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n\n\n  focus(origin, options) {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n  /**\n   * Updates the position of the menu to ensure that it fits all options within the viewport.\n   */\n\n\n  updatePosition() {\n    this._overlayRef?.updatePosition();\n  }\n  /** Closes the menu and does the necessary cleanup. */\n\n\n  _destroyMenu(reason) {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n\n    this._overlayRef.detach(); // Always restore focus if the user is navigating using the keyboard or the menu was opened\n    // programmatically. We don't restore for non-root triggers, because it can prevent focus\n    // from making it back to the root trigger when closing a long chain of menus by clicking\n    // on the backdrop.\n\n\n    if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = undefined;\n\n    if (menu instanceof _MatMenuBase) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone.pipe(filter(event => event.toState === 'void'), take(1), // Interrupt if the content got re-attached.\n        takeUntil(menu.lazyContent._attached)).subscribe({\n          next: () => menu.lazyContent.detach(),\n          // No matter whether the content got re-attached, reset the menu.\n          complete: () => this._setIsMenuOpen(false)\n        });\n      } else {\n        this._setIsMenuOpen(false);\n      }\n    } else {\n      this._setIsMenuOpen(false);\n\n      menu?.lazyContent?.detach();\n    }\n  }\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n\n\n  _initMenu(menu) {\n    menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n    menu.direction = this.dir;\n\n    this._setMenuElevation(menu);\n\n    menu.focusFirstItem(this._openedBy || 'program');\n\n    this._setIsMenuOpen(true);\n  }\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n\n\n  _setMenuElevation(menu) {\n    if (menu.setElevation) {\n      let depth = 0;\n      let parentMenu = menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      menu.setElevation(depth);\n    }\n  } // set state rather than toggle to support triggers sharing a menu\n\n\n  _setIsMenuOpen(isOpen) {\n    if (isOpen !== this._menuOpen) {\n      this._menuOpen = isOpen;\n      this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n      if (this.triggersSubmenu()) {\n        this._menuItemInstance._setHighlighted(isOpen);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n\n\n  _createOverlay(menu) {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig(menu);\n\n      this._subscribeToPositions(menu, config.positionStrategy);\n\n      this._overlayRef = this._overlay.create(config); // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n\n\n  _getOverlayConfig(menu) {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withGrowAfterOpen().withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      panelClass: menu.overlayPanelClass,\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n\n\n  _subscribeToPositions(menu, position) {\n    if (menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above'; // @breaking-change 15.0.0 Remove null check for `ngZone`.\n        // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n        // updating something in the view so we need to bring it back in.\n\n        if (this._ngZone) {\n          this._ngZone.run(() => menu.setPositionClasses(posX, posY));\n        } else {\n          menu.setPositionClasses(posX, posY);\n        }\n      });\n    }\n  }\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n\n\n  _setPosition(menu, positionStrategy) {\n    let [originX, originFallbackX] = menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n    let [overlayY, overlayFallbackY] = menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n\n      if (this._parentMaterialMenu) {\n        if (this._parentInnerPadding == null) {\n          const firstItem = this._parentMaterialMenu.items.first;\n          this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n        }\n\n        offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n      }\n    } else if (!menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([{\n      originX,\n      originY,\n      overlayX,\n      overlayY,\n      offsetY\n    }, {\n      originX: originFallbackX,\n      originY,\n      overlayX: overlayFallbackX,\n      overlayY,\n      offsetY\n    }, {\n      originX,\n      originY: originFallbackY,\n      overlayX,\n      overlayY: overlayFallbackY,\n      offsetY: -offsetY\n    }, {\n      originX: originFallbackX,\n      originY: originFallbackY,\n      overlayX: overlayFallbackX,\n      overlayY: overlayFallbackY,\n      offsetY: -offsetY\n    }]);\n  }\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n\n\n  _menuClosingActions() {\n    const backdrop = this._overlayRef.backdropClick();\n\n    const detachments = this._overlayRef.detachments();\n\n    const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n    const hover = this._parentMaterialMenu ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen)) : of();\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n  /** Handles mouse presses on the trigger. */\n\n\n  _handleMousedown(event) {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : undefined; // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n  /** Handles key presses on the trigger. */\n\n\n  _handleKeydown(event) {\n    const keyCode = event.keyCode; // Pressing enter on the trigger will trigger the click handler later.\n\n    if (keyCode === ENTER || keyCode === SPACE) {\n      this._openedBy = 'keyboard';\n    }\n\n    if (this.triggersSubmenu() && (keyCode === RIGHT_ARROW && this.dir === 'ltr' || keyCode === LEFT_ARROW && this.dir === 'rtl')) {\n      this._openedBy = 'keyboard';\n      this.openMenu();\n    }\n  }\n  /** Handles click events on the trigger. */\n\n\n  _handleClick(event) {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n  /** Handles the cases where the user hovers over the trigger. */\n\n\n  _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMaterialMenu._hovered() // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n    // with different data and triggers), we have to delay it by a tick to ensure that\n    // it won't be closed immediately after it is opened.\n    .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler)).subscribe(() => {\n      this._openedBy = 'mouse'; // If the same menu is used between multiple triggers, it might still be animating\n      // while the new trigger tries to re-open it. Wait for the animation to finish\n      // before doing so. Also interrupt if the user moves to another item.\n\n      if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n        // We need the `delay(0)` here in order to avoid\n        // 'changed after checked' errors in some cases. See #12194.\n        this.menu._animationDone.pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered())).subscribe(() => this.openMenu());\n      } else {\n        this.openMenu();\n      }\n    });\n  }\n  /** Gets the portal that should be attached to the overlay. */\n\n\n  _getPortal(menu) {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n      this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n\n_MatMenuTriggerBase.ɵfac = function _MatMenuTriggerBase_Factory(t) {\n  return new (t || _MatMenuTriggerBase)(i0.ɵɵdirectiveInject(i1$1.Overlay), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), i0.ɵɵdirectiveInject(MatMenuItem, 10), i0.ɵɵdirectiveInject(i3$1.Directionality, 8), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\n_MatMenuTriggerBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatMenuTriggerBase,\n  hostVars: 3,\n  hostBindings: function _MatMenuTriggerBase_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function _MatMenuTriggerBase_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      })(\"mousedown\", function _MatMenuTriggerBase_mousedown_HostBindingHandler($event) {\n        return ctx._handleMousedown($event);\n      })(\"keydown\", function _MatMenuTriggerBase_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-haspopup\", ctx.menu ? \"menu\" : null)(\"aria-expanded\", ctx.menuOpen)(\"aria-controls\", ctx.menuOpen ? ctx.menu.panelId : null);\n    }\n  },\n  inputs: {\n    _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"],\n    menu: [\"matMenuTriggerFor\", \"menu\"],\n    menuData: [\"matMenuTriggerData\", \"menuData\"],\n    restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"]\n  },\n  outputs: {\n    menuOpened: \"menuOpened\",\n    onMenuOpen: \"onMenuOpen\",\n    menuClosed: \"menuClosed\",\n    onMenuClose: \"onMenuClose\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatMenuTriggerBase, [{\n    type: Directive,\n    args: [{\n      host: {\n        '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n        '[attr.aria-expanded]': 'menuOpen',\n        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n        '(click)': '_handleClick($event)',\n        '(mousedown)': '_handleMousedown($event)',\n        '(keydown)': '_handleKeydown($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_PANEL]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: MatMenuItem,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: i3$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    _deprecatedMatMenuTriggerFor: [{\n      type: Input,\n      args: ['mat-menu-trigger-for']\n    }],\n    menu: [{\n      type: Input,\n      args: ['matMenuTriggerFor']\n    }],\n    menuData: [{\n      type: Input,\n      args: ['matMenuTriggerData']\n    }],\n    restoreFocus: [{\n      type: Input,\n      args: ['matMenuTriggerRestoreFocus']\n    }],\n    menuOpened: [{\n      type: Output\n    }],\n    onMenuOpen: [{\n      type: Output\n    }],\n    menuClosed: [{\n      type: Output\n    }],\n    onMenuClose: [{\n      type: Output\n    }]\n  });\n})();\n/** Directive applied to an element that should trigger a `mat-menu`. */\n\n\nclass MatMenuTrigger extends _MatMenuTriggerBase {}\n\nMatMenuTrigger.ɵfac = /* @__PURE__ */function () {\n  let ɵMatMenuTrigger_BaseFactory;\n  return function MatMenuTrigger_Factory(t) {\n    return (ɵMatMenuTrigger_BaseFactory || (ɵMatMenuTrigger_BaseFactory = i0.ɵɵgetInheritedFactory(MatMenuTrigger)))(t || MatMenuTrigger);\n  };\n}();\n\nMatMenuTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatMenuTrigger,\n  selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]],\n  hostAttrs: [1, \"mat-mdc-menu-trigger\"],\n  exportAs: [\"matMenuTrigger\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuTrigger, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n      host: {\n        'class': 'mat-mdc-menu-trigger'\n      },\n      exportAs: 'matMenuTrigger'\n    }]\n  }], null, null);\n})();\n\nclass MatMenuModule {}\n\nMatMenuModule.ɵfac = function MatMenuModule_Factory(t) {\n  return new (t || MatMenuModule)();\n};\n\nMatMenuModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatMenuModule\n});\nMatMenuModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule, CdkScrollableModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule],\n      exports: [CdkScrollableModule, MatMenu, MatCommonModule, MatMenuItem, MatMenuContent, MatMenuTrigger],\n      declarations: [MatMenu, MatMenuItem, MatMenuContent, MatMenuTrigger],\n      providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MENU_PANEL_TOP_PADDING, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu };","map":{"version":3,"names":["i0","InjectionToken","Component","ChangeDetectionStrategy","ViewEncapsulation","Inject","Optional","Input","Directive","QueryList","EventEmitter","TemplateRef","ContentChildren","ViewChild","ContentChild","Output","inject","ChangeDetectorRef","Self","NgModule","i1","FocusKeyManager","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","coerceBooleanProperty","UP_ARROW","DOWN_ARROW","RIGHT_ARROW","LEFT_ARROW","ESCAPE","hasModifierKey","ENTER","SPACE","Subject","merge","Subscription","of","asapScheduler","startWith","switchMap","take","takeUntil","filter","delay","i3","mixinDisableRipple","mixinDisabled","MatRippleModule","MatCommonModule","i2","DOCUMENT","CommonModule","TemplatePortal","DomPortalOutlet","trigger","state","style","transition","animate","i3$1","i1$1","Overlay","OverlayConfig","OverlayModule","normalizePassiveListenerOptions","CdkScrollableModule","MAT_MENU_PANEL","_MatMenuItemBase","MatMenuItem","constructor","_elementRef","_document","_focusMonitor","_parentMenu","_changeDetectorRef","role","_hovered","_focused","_highlighted","_triggersSubmenu","addItem","focus","origin","options","focusVia","_getHostElement","next","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","removeItem","complete","_getTabIndex","disabled","nativeElement","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","clone","cloneNode","icons","querySelectorAll","i","length","remove","textContent","trim","_setHighlighted","isHighlighted","markForCheck","_setTriggersSubmenu","triggersSubmenu","_hasFocus","activeElement","ɵfac","ElementRef","FocusMonitor","ɵcmp","NgIf","MatRipple","type","args","selector","exportAs","inputs","host","changeDetection","OnPush","encapsulation","None","template","undefined","decorators","throwMatMenuInvalidPositionX","Error","throwMatMenuInvalidPositionY","throwMatMenuRecursiveError","MAT_MENU_CONTENT","_MatMenuContentBase","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_attached","attach","context","_portal","detach","_outlet","createElement","element","elementRef","parentNode","insertBefore","outletElement","isAttached","dispose","ComponentFactoryResolver","ApplicationRef","Injector","ViewContainerRef","ɵdir","MatMenuContent","provide","useExisting","providers","matMenuAnimations","transformMenu","opacity","transform","fadeInItems","menuPanelUid","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","_MatMenuBase","_xPosition","value","ngDevMode","setPositionClasses","_yPosition","_overlapTrigger","hasBackdrop","_hasBackdrop","panelClass","classes","previousPanelClass","_previousPanelClass","split","forEach","className","_classList","classList","_ngZone","defaultOptions","_directDescendantItems","_panelAnimationState","_animationDone","closed","close","panelId","overlayPanelClass","ngOnInit","ngAfterContentInit","_updateDirectDescendants","_keyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","emit","changes","pipe","items","map","item","focusedItem","updateActiveItem","itemsList","manager","activeItem","toArray","index","Math","max","min","activeItemIndex","setActiveItem","setNextItemActive","destroy","_firstItemFocusSubscription","unsubscribe","itemChanges","_item","_handleKeydown","keyCode","parentMenu","direction","setFocusOrigin","onKeydown","focusFirstItem","onStable","menuPanel","first","closest","contains","document","setFirstItemActive","resetActiveItem","setElevation","depth","elevation","_baseElevation","newElevation","_elevationPrefix","customElevation","Object","keys","find","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","_onAnimationStart","toState","scrollTop","_allItems","reset","notifyOnChanges","NgZone","descendants","ariaLabel","ariaLabelledby","ariaDescribedby","templateRef","lazyContent","MatMenu","_defaultOptions","changeDetectorRef","NgClass","animations","styles","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","passiveEventListenerOptions","passive","MENU_PANEL_TOP_PADDING","_MatMenuTriggerBase","_deprecatedMatMenuTriggerFor","menu","v","_menu","_menuCloseSubscription","_parentMaterialMenu","reason","_destroyMenu","_menuItemInstance","_overlay","_element","scrollStrategy","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","EMPTY","_hoverSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_scrollStrategy","addEventListener","_handleHover","removeEventListener","menuOpen","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","positionStrategy","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","withLockedPosition","reapplyLastPosition","updatePosition","_setIsMenuOpen","_setMenuElevation","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","position","flexibleConnectedTo","withGrowAfterOpen","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","run","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","_parentInnerPadding","firstItem","offsetTop","withPositions","backdrop","backdropClick","detachments","parentClose","hover","active","_handleMousedown","button","_handleClick","Directionality","MatMenuTrigger","MatMenuModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/Users/Henry/Desktop/New folder/Atomas2/node_modules/@angular/material/fesm2022/menu.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Optional, Input, Directive, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, inject, ChangeDetectorRef, Self, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, merge, Subscription, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil, filter, delay } from 'rxjs/operators';\nimport * as i3 from '@angular/material/core';\nimport { mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3$1 from '@angular/cdk/bidi';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nconst _MatMenuItemBase = mixinDisableRipple(mixinDisabled(class {\n}));\n/**\n * Single item inside a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemBase {\n    constructor(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {\n        super();\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        _parentMenu?.addItem?.(this);\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element, so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons, so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            icons[i].remove();\n        }\n        return clone.textContent?.trim() || '';\n    }\n    _setHighlighted(isHighlighted) {\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._highlighted = isHighlighted;\n        this._changeDetectorRef?.markForCheck();\n    }\n    _setTriggersSubmenu(triggersSubmenu) {\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._triggersSubmenu = triggersSubmenu;\n        this._changeDetectorRef?.markForCheck();\n    }\n    _hasFocus() {\n        return this._document && this._document.activeElement === this._getHostElement();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuItem, deps: [{ token: i0.ElementRef }, { token: DOCUMENT }, { token: i1.FocusMonitor }, { token: MAT_MENU_PANEL, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatMenuItem, selector: \"[mat-menu-item]\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", role: \"role\" }, host: { listeners: { \"click\": \"_checkDisabled($event)\", \"mouseenter\": \"_handleMouseEnter()\" }, properties: { \"attr.role\": \"role\", \"class.mat-mdc-menu-item-highlighted\": \"_highlighted\", \"class.mat-mdc-menu-item-submenu-trigger\": \"_triggersSubmenu\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled\", \"attr.disabled\": \"disabled || null\" }, classAttribute: \"mat-mdc-menu-item mat-mdc-focus-indicator\" }, exportAs: [\"matMenuItem\"], usesInheritance: true, ngImport: i0, template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-mdc-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"\\n  aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\", dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuItem, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-menu-item]', exportAs: 'matMenuItem', inputs: ['disabled', 'disableRipple'], host: {\n                        '[attr.role]': 'role',\n                        'class': 'mat-mdc-menu-item mat-mdc-focus-indicator',\n                        '[class.mat-mdc-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-mdc-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.disabled]': 'disabled || null',\n                        '(click)': '_checkDisabled($event)',\n                        '(mouseenter)': '_handleMouseEnter()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-mdc-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"\\n  aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { role: [{\n                type: Input\n            }] } });\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\nclass _MatMenuContentBase {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        this._changeDetectorRef?.markForCheck();\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuContentBase, deps: [{ token: i0.TemplateRef }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatMenuContentBase, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuContentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ChangeDetectorRef }]; } });\n/** Menu content that will be rendered lazily once the menu is opened. */\nclass MatMenuContent extends _MatMenuContentBase {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuContent, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatMenuContent, selector: \"ng-template[matMenuContent]\", providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matMenuContent]',\n                    providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n                }]\n        }] });\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)',\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)',\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\nlet menuPanelUid = 0;\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\n/** Base class with all of the `MatMenu` functionality. */\nclass _MatMenuBase {\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n        return this._xPosition;\n    }\n    set xPosition(value) {\n        if (value !== 'before' &&\n            value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n        return this._yPosition;\n    }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n    get overlapTrigger() {\n        return this._overlapTrigger;\n    }\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                this._classList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                this._classList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n        return this.panelClass;\n    }\n    set classList(classes) {\n        this.panelClass = classes;\n    }\n    constructor(_elementRef, _ngZone, defaultOptions, \n    // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n    _changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n        this.overlayPanelClass = defaultOptions.overlayPanelClass || '';\n        this._xPosition = defaultOptions.xPosition;\n        this._yPosition = defaultOptions.yPosition;\n        this.backdropClass = defaultOptions.backdropClass;\n        this._overlapTrigger = defaultOptions.overlapTrigger;\n        this._hasBackdrop = defaultOptions.hasBackdrop;\n    }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes\n            .pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused))))\n            .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n        this._directDescendantItems.changes.subscribe((itemsList) => {\n            // Move focus to another item, if the active item is removed from the list.\n            // We need to debounce the callback, because multiple items might be removed\n            // in quick succession.\n            const manager = this._keyManager;\n            if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n                const items = itemsList.toArray();\n                const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n                if (items[index] && !items[index].disabled) {\n                    manager.setActiveItem(index);\n                }\n                else {\n                    manager.setNextItemActive();\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._directDescendantItems.destroy();\n        this.closed.complete();\n        this._firstItemFocusSubscription?.unsubscribe();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n                return;\n        }\n        // Don't allow the event to propagate if we've already handled it, or it may\n        // end up reaching other overlays that were opened earlier (see #22694).\n        event.stopPropagation();\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // Wait for `onStable` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n        this._firstItemFocusSubscription?.unsubscribe();\n        this._firstItemFocusSubscription = this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            let menuPanel = null;\n            if (this._directDescendantItems.length) {\n                // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n                // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n                // because the panel is inside an `ng-template`. We work around it by starting from one of\n                // the items and walking up the DOM.\n                menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n            }\n            // If an item in the menuPanel is already focused, avoid overriding the focus.\n            if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n                const manager = this._keyManager;\n                manager.setFocusOrigin(origin).setFirstItemActive();\n                // If there's no active item at this point, it means that all the items are disabled.\n                // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n                // give _some_ feedback to screen readers.\n                if (!manager.activeItem && menuPanel) {\n                    menuPanel.focus();\n                }\n            }\n        });\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(this._baseElevation + depth, 24);\n        const newElevation = `${this._elevationPrefix}${elevation}`;\n        const customElevation = Object.keys(this._classList).find(className => {\n            return className.startsWith(this._elevationPrefix);\n        });\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n        // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n        this._changeDetectorRef?.markForCheck();\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuBase, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatMenuBase, inputs: { backdropClass: \"backdropClass\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: \"overlapTrigger\", hasBackdrop: \"hasBackdrop\", panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, queries: [{ propertyName: \"lazyContent\", first: true, predicate: MAT_MENU_CONTENT, descendants: true }, { propertyName: \"_allItems\", predicate: MatMenuItem, descendants: true }, { propertyName: \"items\", predicate: MatMenuItem }], viewQueries: [{ propertyName: \"templateRef\", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { _allItems: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: true }]\n            }], backdropClass: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], templateRef: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }], items: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: false }]\n            }], lazyContent: [{\n                type: ContentChild,\n                args: [MAT_MENU_CONTENT]\n            }], overlapTrigger: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], panelClass: [{\n                type: Input,\n                args: ['class']\n            }], classList: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }] } });\nclass MatMenu extends _MatMenuBase {\n    constructor(_elementRef, _ngZone, _defaultOptions, changeDetectorRef) {\n        super(_elementRef, _ngZone, _defaultOptions, changeDetectorRef);\n        this._elevationPrefix = 'mat-elevation-z';\n        this._baseElevation = 8;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenu, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatMenu, selector: \"mat-menu\", host: { attributes: { \"ngSkipHydration\": \"\" }, properties: { \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" } }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], exportAs: [\"matMenu\"], usesInheritance: true, ngImport: i0, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel mat-mdc-elevation-specific\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;list-style-type:none}.mat-mdc-menu-content:focus{outline:none}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;white-space:normal;font-family:var(--mat-menu-item-label-text-font);line-height:var(--mat-menu-item-label-text-line-height);font-size:var(--mat-menu-item-label-text-size);letter-spacing:var(--mat-menu-item-label-text-tracking);font-weight:var(--mat-menu-item-label-text-weight)}.mat-mdc-menu-panel{--mat-menu-container-shape:4px;min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape);background-color:var(--mat-menu-container-color);will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;align-items:center;min-height:48px}.mat-mdc-menu-item:focus{outline:none}[dir=rtl] .mat-mdc-menu-item,.mat-mdc-menu-item[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color)}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color)}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:16px}.mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-mdc-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"], dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenu, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', host: {\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                        'ngSkipHydration': '',\n                    }, animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel mat-mdc-elevation-specific\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;list-style-type:none}.mat-mdc-menu-content:focus{outline:none}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;white-space:normal;font-family:var(--mat-menu-item-label-text-font);line-height:var(--mat-menu-item-label-text-line-height);font-size:var(--mat-menu-item-label-text-size);letter-spacing:var(--mat-menu-item-label-text-tracking);font-weight:var(--mat-menu-item-label-text-weight)}.mat-mdc-menu-panel{--mat-menu-container-shape:4px;min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape);background-color:var(--mat-menu-container-color);will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;align-items:center;min-height:48px}.mat-mdc-menu-item:focus{outline:none}[dir=rtl] .mat-mdc-menu-item,.mat-mdc-menu-item[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color)}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color)}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:16px}.mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-mdc-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }]; } });\n\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\nconst MENU_PANEL_TOP_PADDING = 8;\nclass _MatMenuTriggerBase {\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n        return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n        return this._menu;\n    }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n        this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());\n    }\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, _focusMonitor, _ngZone) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        this._changeDetectorRef = inject(ChangeDetectorRef);\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        };\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = undefined;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        this._scrollStrategy = scrollStrategy;\n        this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    }\n    ngAfterContentInit() {\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        const menu = this.menu;\n        if (this._menuOpen || !menu) {\n            return;\n        }\n        const overlayRef = this._createOverlay(menu);\n        const overlayConfig = overlayRef.getConfig();\n        const positionStrategy = overlayConfig.positionStrategy;\n        this._setPosition(menu, positionStrategy);\n        overlayConfig.hasBackdrop =\n            menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n        overlayRef.attach(this._getPortal(menu));\n        if (menu.lazyContent) {\n            menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu(menu);\n        if (menu instanceof _MatMenuBase) {\n            menu._startAnimation();\n            menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n                // Re-adjust the position without locking when the amount of items\n                // changes so that the overlay is allowed to pick a new optimal position.\n                positionStrategy.withLockedPosition(false).reapplyLastPosition();\n                positionStrategy.withLockedPosition(true);\n            });\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu?.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        this._overlayRef?.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof _MatMenuBase) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false),\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            menu?.lazyContent?.detach();\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu(menu) {\n        menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        menu.direction = this.dir;\n        this._setMenuElevation(menu);\n        menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation(menu) {\n        if (menu.setElevation) {\n            let depth = 0;\n            let parentMenu = menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            menu.setElevation(depth);\n        }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        if (isOpen !== this._menuOpen) {\n            this._menuOpen = isOpen;\n            this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n            if (this.triggersSubmenu()) {\n                this._menuItemInstance._setHighlighted(isOpen);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay(menu) {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig(menu);\n            this._subscribeToPositions(menu, config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig(menu) {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir,\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(menu, position) {\n        if (menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                // @breaking-change 15.0.0 Remove null check for `ngZone`.\n                // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n                // updating something in the view so we need to bring it back in.\n                if (this._ngZone) {\n                    this._ngZone.run(() => menu.setPositionClasses(posX, posY));\n                }\n                else {\n                    menu.setPositionClasses(posX, posY);\n                }\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(menu, positionStrategy) {\n        let [originX, originFallbackX] = menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            if (this._parentMaterialMenu) {\n                if (this._parentInnerPadding == null) {\n                    const firstItem = this._parentMaterialMenu.items.first;\n                    this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n                }\n                offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n            }\n        }\n        else if (!menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu\n            ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen))\n            : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() &&\n            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu\n            ._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal(menu) {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n            this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuTriggerBase, deps: [{ token: i1$1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: MAT_MENU_SCROLL_STRATEGY }, { token: MAT_MENU_PANEL, optional: true }, { token: MatMenuItem, optional: true, self: true }, { token: i3$1.Directionality, optional: true }, { token: i1.FocusMonitor }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatMenuTriggerBase, inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"], restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, host: { listeners: { \"click\": \"_handleClick($event)\", \"mousedown\": \"_handleMousedown($event)\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.aria-haspopup\": \"menu ? \\\"menu\\\" : null\", \"attr.aria-expanded\": \"menuOpen\", \"attr.aria-controls\": \"menuOpen ? menu.panelId : null\" } }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuTriggerBase, decorators: [{\n            type: Directive,\n            args: [{\n                    host: {\n                        '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n                        '[attr.aria-expanded]': 'menuOpen',\n                        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                        '(click)': '_handleClick($event)',\n                        '(mousedown)': '_handleMousedown($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_SCROLL_STRATEGY]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: MatMenuItem, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i3$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i1.FocusMonitor }, { type: i0.NgZone }]; }, propDecorators: { _deprecatedMatMenuTriggerFor: [{\n                type: Input,\n                args: ['mat-menu-trigger-for']\n            }], menu: [{\n                type: Input,\n                args: ['matMenuTriggerFor']\n            }], menuData: [{\n                type: Input,\n                args: ['matMenuTriggerData']\n            }], restoreFocus: [{\n                type: Input,\n                args: ['matMenuTriggerRestoreFocus']\n            }], menuOpened: [{\n                type: Output\n            }], onMenuOpen: [{\n                type: Output\n            }], menuClosed: [{\n                type: Output\n            }], onMenuClose: [{\n                type: Output\n            }] } });\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger extends _MatMenuTriggerBase {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", host: { classAttribute: \"mat-mdc-menu-trigger\" }, exportAs: [\"matMenuTrigger\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                    host: {\n                        'class': 'mat-mdc-menu-trigger',\n                    },\n                    exportAs: 'matMenuTrigger',\n                }]\n        }] });\n\nclass MatMenuModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuModule, declarations: [MatMenu, MatMenuItem, MatMenuContent, MatMenuTrigger], imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule], exports: [CdkScrollableModule,\n            MatMenu,\n            MatCommonModule,\n            MatMenuItem,\n            MatMenuContent,\n            MatMenuTrigger] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuModule, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule, CdkScrollableModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatMenu,\n                        MatCommonModule,\n                        MatMenuItem,\n                        MatMenuContent,\n                        MatMenuTrigger,\n                    ],\n                    declarations: [MatMenu, MatMenuItem, MatMenuContent, MatMenuTrigger],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MENU_PANEL_TOP_PADDING, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}