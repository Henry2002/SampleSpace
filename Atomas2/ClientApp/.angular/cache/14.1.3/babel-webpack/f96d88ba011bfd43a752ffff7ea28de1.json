{"ast":null,"code":"import { takeUntil, take } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, ElementRef, Directive, Inject, Input, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport * as i5 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport * as i3 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/bidi';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from '@angular/material/core';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Time in ms to throttle repositioning after scroll events. */\n\nconst _c0 = [\"tooltip\"];\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\n\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\n\n\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition({\n    scrollThrottle: SCROLL_THROTTLE_MS\n  });\n}\n/** @docs-private */\n\n\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** @docs-private */\n\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n/** Injection token to be used to override the default options for `matTooltip`. */\n\n\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\n\nconst TOOLTIP_PANEL_CLASS = 'mat-mdc-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\n\nconst passiveListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\n\nconst LONGPRESS_DELAY = 500; // These constants were taken from MDC's `numbers` object. We can't import them from MDC,\n// because they have some top-level references to `window` which break during SSR.\n\nconst MIN_VIEWPORT_TOOLTIP_THRESHOLD = 8;\nconst UNBOUNDED_ANCHOR_GAP = 8;\nconst MIN_HEIGHT = 24;\nconst MAX_WIDTH = 200;\n\nclass _MatTooltipBase {\n  constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n    this._overlay = _overlay;\n    this._elementRef = _elementRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewContainerRef = _viewContainerRef;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    this._ariaDescriber = _ariaDescriber;\n    this._focusMonitor = _focusMonitor;\n    this._dir = _dir;\n    this._defaultOptions = _defaultOptions;\n    this._position = 'below';\n    this._positionAtOrigin = false;\n    this._disabled = false;\n    this._viewInitialized = false;\n    this._pointerExitEventsInitialized = false;\n    this._viewportMargin = 8;\n    this._cssClassPrefix = 'mat';\n    this._showDelay = this._defaultOptions.showDelay;\n    this._hideDelay = this._defaultOptions.hideDelay;\n    /**\n     * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n     * uses a long press gesture to show and hide, however it can conflict with the native browser\n     * gestures. To work around the conflict, Angular Material disables native gestures on the\n     * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n     * elements). The different values for this option configure the touch event handling as follows:\n     * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n     *   browser gestures on particular elements. In particular, it allows text selection on inputs\n     *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n     * - `on` - Enables touch gestures for all elements and disables native\n     *   browser gestures with no exceptions.\n     * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n     *   showing on touch devices.\n     */\n\n    this.touchGestures = 'auto';\n    this._message = '';\n    /** Manually-bound passive event listeners. */\n\n    this._passiveListeners = [];\n    /** Emits when the component is destroyed. */\n\n    this._destroyed = new Subject();\n    this._scrollStrategy = scrollStrategy;\n    this._document = _document;\n\n    if (_defaultOptions) {\n      if (_defaultOptions.position) {\n        this.position = _defaultOptions.position;\n      }\n\n      if (_defaultOptions.positionAtOrigin) {\n        this.positionAtOrigin = _defaultOptions.positionAtOrigin;\n      }\n\n      if (_defaultOptions.touchGestures) {\n        this.touchGestures = _defaultOptions.touchGestures;\n      }\n    }\n\n    _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      if (this._overlayRef) {\n        this._updatePosition(this._overlayRef);\n      }\n    });\n  }\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n\n\n  get position() {\n    return this._position;\n  }\n\n  set position(value) {\n    var _a;\n\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition(this._overlayRef);\n\n        (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  get positionAtOrigin() {\n    return this._positionAtOrigin;\n  }\n\n  set positionAtOrigin(value) {\n    this._positionAtOrigin = coerceBooleanProperty(value);\n\n    this._detach();\n\n    this._overlayRef = null;\n  }\n  /** Disables the display of the tooltip. */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value); // If tooltip is disabled, hide immediately.\n\n    if (this._disabled) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n    }\n  }\n  /** The default delay in ms before showing the tooltip after show is called */\n\n\n  get showDelay() {\n    return this._showDelay;\n  }\n\n  set showDelay(value) {\n    this._showDelay = coerceNumberProperty(value);\n  }\n  /** The default delay in ms before hiding the tooltip after hide is called */\n\n\n  get hideDelay() {\n    return this._hideDelay;\n  }\n\n  set hideDelay(value) {\n    this._hideDelay = coerceNumberProperty(value);\n\n    if (this._tooltipInstance) {\n      this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n    }\n  }\n  /** The message to be displayed in the tooltip */\n\n\n  get message() {\n    return this._message;\n  }\n\n  set message(value) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip'); // If the message is not a string (e.g. number), convert it to a string and trim it.\n    // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n    // away the string-conversion: https://github.com/angular/components/issues/20684\n\n\n    this._message = value != null ? String(value).trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n\n      this._updateTooltipMessage();\n\n      this._ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n        });\n      });\n    }\n  }\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n\n\n  get tooltipClass() {\n    return this._tooltipClass;\n  }\n\n  set tooltipClass(value) {\n    this._tooltipClass = value;\n\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  ngAfterViewInit() {\n    // This needs to happen after view init so the initial values for all inputs have been set.\n    this._viewInitialized = true;\n\n    this._setupPointerEnterEventsIfNeeded();\n\n    this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        this._ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        this._ngZone.run(() => this.show());\n      }\n    });\n  }\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n\n\n  ngOnDestroy() {\n    const nativeElement = this._elementRef.nativeElement;\n    clearTimeout(this._touchstartTimeout);\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n\n      this._tooltipInstance = null;\n    } // Clean up the event listeners set in the constructor\n\n\n    this._passiveListeners.forEach(([event, listener]) => {\n      nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n    });\n\n    this._passiveListeners.length = 0;\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n\n    this._focusMonitor.stopMonitoring(nativeElement);\n  }\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n\n\n  show(delay = this.showDelay, origin) {\n    var _a;\n\n    if (this.disabled || !this.message || this._isTooltipVisible()) {\n      (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a._cancelPendingAnimations();\n      return;\n    }\n\n    const overlayRef = this._createOverlay(origin);\n\n    this._detach();\n\n    this._portal = this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n    const instance = this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    instance._triggerElement = this._elementRef.nativeElement;\n    instance._mouseLeaveHideDelay = this._hideDelay;\n    instance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n\n    this._setTooltipClass(this._tooltipClass);\n\n    this._updateTooltipMessage();\n\n    instance.show(delay);\n  }\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n\n\n  hide(delay = this.hideDelay) {\n    const instance = this._tooltipInstance;\n\n    if (instance) {\n      if (instance.isVisible()) {\n        instance.hide(delay);\n      } else {\n        instance._cancelPendingAnimations();\n\n        this._detach();\n      }\n    }\n  }\n  /** Shows/hides the tooltip */\n\n\n  toggle(origin) {\n    this._isTooltipVisible() ? this.hide() : this.show(undefined, origin);\n  }\n  /** Returns true if the tooltip is currently visible to the user */\n\n\n  _isTooltipVisible() {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n  /** Create the overlay config and position strategy */\n\n\n  _createOverlay(origin) {\n    var _a;\n\n    if (this._overlayRef) {\n      const existingStrategy = this._overlayRef.getConfig().positionStrategy;\n\n      if ((!this.positionAtOrigin || !origin) && existingStrategy._origin instanceof ElementRef) {\n        return this._overlayRef;\n      }\n\n      this._detach();\n    }\n\n    const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef); // Create connected position strategy that listens for scroll events to reposition.\n\n\n    const strategy = this._overlay.position().flexibleConnectedTo(this.positionAtOrigin ? origin || this._elementRef : this._elementRef).withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`).withFlexibleDimensions(false).withViewportMargin(this._viewportMargin).withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      this._updateCurrentPositionClass(change.connectionPair);\n\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition(this._overlayRef);\n\n    this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n\n    this._overlayRef.outsidePointerEvents().pipe(takeUntil(this._destroyed)).subscribe(() => {\n      var _a;\n\n      return (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a._handleBodyInteraction();\n    });\n\n    this._overlayRef.keydownEvents().pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._ngZone.run(() => this.hide(0));\n      }\n    });\n\n    if ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.disableTooltipInteractivity) {\n      this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n    }\n\n    return this._overlayRef;\n  }\n  /** Detaches the currently-attached tooltip. */\n\n\n  _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n  /** Updates the position of the current tooltip. */\n\n\n  _updatePosition(overlayRef) {\n    const position = overlayRef.getConfig().positionStrategy;\n\n    const origin = this._getOrigin();\n\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)), this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback))]);\n  }\n  /** Adds the configured offset to a position. Used as a hook for child classes. */\n\n\n  _addOffset(position) {\n    return position;\n  }\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n\n\n  _getOrigin() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {\n        originX: 'center',\n        originY: position == 'above' ? 'top' : 'bottom'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      originPosition = {\n        originX: 'start',\n        originY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      originPosition = {\n        originX: 'end',\n        originY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {\n      x,\n      y\n    } = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {\n        originX: x,\n        originY: y\n      }\n    };\n  }\n  /** Returns the overlay position and a fallback position based on the user's preference */\n\n\n  _getOverlayPosition() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition;\n\n    if (position == 'above') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'bottom'\n      };\n    } else if (position == 'below') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'top'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'end',\n        overlayY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'start',\n        overlayY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {\n      x,\n      y\n    } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {\n        overlayX: x,\n        overlayY: y\n      }\n    };\n  }\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n\n\n  _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef.updatePosition();\n        }\n      });\n    }\n  }\n  /** Updates the tooltip class */\n\n\n  _setTooltipClass(tooltipClass) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n\n      this._tooltipInstance._markForCheck();\n    }\n  }\n  /** Inverts an overlay position. */\n\n\n  _invertPosition(x, y) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n  /** Updates the class on the overlay panel based on the current position of the tooltip. */\n\n\n  _updateCurrentPositionClass(connectionPair) {\n    const {\n      overlayY,\n      originX,\n      originY\n    } = connectionPair;\n    let newPosition; // If the overlay is in the middle along the Y axis,\n    // it means that it's either before or after.\n\n    if (overlayY === 'center') {\n      // Note that since this information is used for styling, we want to\n      // resolve `start` and `end` to their real values, otherwise consumers\n      // would have to remember to do it themselves on each consumption.\n      if (this._dir && this._dir.value === 'rtl') {\n        newPosition = originX === 'end' ? 'left' : 'right';\n      } else {\n        newPosition = originX === 'start' ? 'left' : 'right';\n      }\n    } else {\n      newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n    }\n\n    if (newPosition !== this._currentPosition) {\n      const overlayRef = this._overlayRef;\n\n      if (overlayRef) {\n        const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n        overlayRef.removePanelClass(classPrefix + this._currentPosition);\n        overlayRef.addPanelClass(classPrefix + newPosition);\n      }\n\n      this._currentPosition = newPosition;\n    }\n  }\n  /** Binds the pointer events to the tooltip trigger. */\n\n\n  _setupPointerEnterEventsIfNeeded() {\n    // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n    if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {\n      return;\n    } // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n\n\n    if (this._platformSupportsMouseEvents()) {\n      this._passiveListeners.push(['mouseenter', event => {\n        this._setupPointerExitEventsIfNeeded();\n\n        let point = undefined;\n\n        if (event.x !== undefined && event.y !== undefined) {\n          point = event;\n        }\n\n        this.show(undefined, point);\n      }]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n\n      this._passiveListeners.push(['touchstart', event => {\n        var _a;\n\n        const touch = (_a = event.targetTouches) === null || _a === void 0 ? void 0 : _a[0];\n        const origin = touch ? {\n          x: touch.clientX,\n          y: touch.clientY\n        } : undefined; // Note that it's important that we don't `preventDefault` here,\n        // because it can prevent click events from firing on the element.\n\n        this._setupPointerExitEventsIfNeeded();\n\n        clearTimeout(this._touchstartTimeout);\n        this._touchstartTimeout = setTimeout(() => this.show(undefined, origin), LONGPRESS_DELAY);\n      }]);\n    }\n\n    this._addListeners(this._passiveListeners);\n  }\n\n  _setupPointerExitEventsIfNeeded() {\n    if (this._pointerExitEventsInitialized) {\n      return;\n    }\n\n    this._pointerExitEventsInitialized = true;\n    const exitListeners = [];\n\n    if (this._platformSupportsMouseEvents()) {\n      exitListeners.push(['mouseleave', event => {\n        var _a;\n\n        const newTarget = event.relatedTarget;\n\n        if (!newTarget || !((_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.overlayElement.contains(newTarget))) {\n          this.hide();\n        }\n      }], ['wheel', event => this._wheelListener(event)]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n\n      const touchendListener = () => {\n        clearTimeout(this._touchstartTimeout);\n        this.hide(this._defaultOptions.touchendHideDelay);\n      };\n\n      exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n    }\n\n    this._addListeners(exitListeners);\n\n    this._passiveListeners.push(...exitListeners);\n  }\n\n  _addListeners(listeners) {\n    listeners.forEach(([event, listener]) => {\n      this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n    });\n  }\n\n  _platformSupportsMouseEvents() {\n    return !this._platform.IOS && !this._platform.ANDROID;\n  }\n  /** Listener for the `wheel` event on the element. */\n\n\n  _wheelListener(event) {\n    if (this._isTooltipVisible()) {\n      const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n\n      const element = this._elementRef.nativeElement; // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n      // won't fire if the user scrolls away using the wheel without moving their cursor. We\n      // work around it by finding the element under the user's cursor and closing the tooltip\n      // if it's not the trigger.\n\n      if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n        this.hide();\n      }\n    }\n  }\n  /** Disables the native browser gestures, based on how the tooltip has been configured. */\n\n\n  _disableNativeGesturesIfNecessary() {\n    const gestures = this.touchGestures;\n\n    if (gestures !== 'off') {\n      const element = this._elementRef.nativeElement;\n      const style = element.style; // If gestures are set to `auto`, we don't disable text selection on inputs and\n      // textareas, because it prevents the user from typing into them on iOS Safari.\n\n      if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n        style.userSelect = style.msUserSelect = style.webkitUserSelect = style.MozUserSelect = 'none';\n      } // If we have `auto` gestures and the element uses native HTML dragging,\n      // we don't set `-webkit-user-drag` because it prevents the native behavior.\n\n\n      if (gestures === 'on' || !element.draggable) {\n        style.webkitUserDrag = 'none';\n      }\n\n      style.touchAction = 'none';\n      style.webkitTapHighlightColor = 'transparent';\n    }\n  }\n\n}\n\n_MatTooltipBase.ɵfac = function _MatTooltipBase_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n\n_MatTooltipBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatTooltipBase,\n  inputs: {\n    position: [\"matTooltipPosition\", \"position\"],\n    positionAtOrigin: [\"matTooltipPositionAtOrigin\", \"positionAtOrigin\"],\n    disabled: [\"matTooltipDisabled\", \"disabled\"],\n    showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n    hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n    touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"],\n    message: [\"matTooltip\", \"message\"],\n    tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatTooltipBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i1.Overlay\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.ScrollDispatcher\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i2.Platform\n    }, {\n      type: i3.AriaDescriber\n    }, {\n      type: i3.FocusMonitor\n    }, {\n      type: undefined\n    }, {\n      type: i4.Directionality\n    }, {\n      type: undefined\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    positionAtOrigin: [{\n      type: Input,\n      args: ['matTooltipPositionAtOrigin']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    touchGestures: [{\n      type: Input,\n      args: ['matTooltipTouchGestures']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  });\n})();\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n\n\nclass MatTooltip extends _MatTooltipBase {\n  constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n    super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n    this._tooltipComponent = TooltipComponent;\n    this._cssClassPrefix = 'mat-mdc';\n    this._viewportMargin = MIN_VIEWPORT_TOOLTIP_THRESHOLD;\n  }\n\n  _addOffset(position) {\n    const offset = UNBOUNDED_ANCHOR_GAP;\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n\n    if (position.originY === 'top') {\n      position.offsetY = -offset;\n    } else if (position.originY === 'bottom') {\n      position.offsetY = offset;\n    } else if (position.originX === 'start') {\n      position.offsetX = isLtr ? -offset : offset;\n    } else if (position.originX === 'end') {\n      position.offsetX = isLtr ? offset : -offset;\n    }\n\n    return position;\n  }\n\n}\n\nMatTooltip.ɵfac = function MatTooltip_Factory(t) {\n  return new (t || MatTooltip)(i0.ɵɵdirectiveInject(i1.Overlay), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.Platform), i0.ɵɵdirectiveInject(i3.AriaDescriber), i0.ɵɵdirectiveInject(i3.FocusMonitor), i0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i4.Directionality, 8), i0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), i0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nMatTooltip.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTooltip,\n  selectors: [[\"\", \"matTooltip\", \"\"]],\n  hostAttrs: [1, \"mat-mdc-tooltip-trigger\"],\n  exportAs: [\"matTooltip\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[matTooltip]',\n      exportAs: 'matTooltip',\n      host: {\n        'class': 'mat-mdc-tooltip-trigger'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i1.Overlay\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.ScrollDispatcher\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i2.Platform\n    }, {\n      type: i3.AriaDescriber\n    }, {\n      type: i3.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i4.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\nclass _TooltipComponentBase {\n  constructor(_changeDetectorRef, animationMode) {\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Whether interactions on the page should close the tooltip */\n\n    this._closeOnInteraction = false;\n    /** Whether the tooltip is currently visible. */\n\n    this._isVisible = false;\n    /** Subject for notifying that the tooltip has been hidden from the view */\n\n    this._onHide = new Subject();\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n\n\n  show(delay) {\n    // Cancel the delayed hide if it is scheduled\n    clearTimeout(this._hideTimeoutId);\n    this._showTimeoutId = setTimeout(() => {\n      this._toggleVisibility(true);\n\n      this._showTimeoutId = undefined;\n    }, delay);\n  }\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n\n\n  hide(delay) {\n    // Cancel the delayed show if it is scheduled\n    clearTimeout(this._showTimeoutId);\n    this._hideTimeoutId = setTimeout(() => {\n      this._toggleVisibility(false);\n\n      this._hideTimeoutId = undefined;\n    }, delay);\n  }\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n\n\n  afterHidden() {\n    return this._onHide;\n  }\n  /** Whether the tooltip is being displayed. */\n\n\n  isVisible() {\n    return this._isVisible;\n  }\n\n  ngOnDestroy() {\n    this._cancelPendingAnimations();\n\n    this._onHide.complete();\n\n    this._triggerElement = null;\n  }\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n\n\n  _handleBodyInteraction() {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n\n\n  _markForCheck() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _handleMouseLeave({\n    relatedTarget\n  }) {\n    if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n      if (this.isVisible()) {\n        this.hide(this._mouseLeaveHideDelay);\n      } else {\n        this._finalizeAnimation(false);\n      }\n    }\n  }\n  /**\n   * Callback for when the timeout in this.show() gets completed.\n   * This method is only needed by the mdc-tooltip, and so it is only implemented\n   * in the mdc-tooltip, not here.\n   */\n\n\n  _onShow() {}\n  /** Event listener dispatched when an animation on the tooltip finishes. */\n\n\n  _handleAnimationEnd({\n    animationName\n  }) {\n    if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n      this._finalizeAnimation(animationName === this._showAnimation);\n    }\n  }\n  /** Cancels any pending animation sequences. */\n\n\n  _cancelPendingAnimations() {\n    clearTimeout(this._showTimeoutId);\n    clearTimeout(this._hideTimeoutId);\n    this._showTimeoutId = this._hideTimeoutId = undefined;\n  }\n  /** Handles the cleanup after an animation has finished. */\n\n\n  _finalizeAnimation(toVisible) {\n    if (toVisible) {\n      this._closeOnInteraction = true;\n    } else if (!this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n  /** Toggles the visibility of the tooltip element. */\n\n\n  _toggleVisibility(isVisible) {\n    // We set the classes directly here ourselves so that toggling the tooltip state\n    // isn't bound by change detection. This allows us to hide it even if the\n    // view ref has been detached from the CD tree.\n    const tooltip = this._tooltip.nativeElement;\n    const showClass = this._showAnimation;\n    const hideClass = this._hideAnimation;\n    tooltip.classList.remove(isVisible ? hideClass : showClass);\n    tooltip.classList.add(isVisible ? showClass : hideClass);\n    this._isVisible = isVisible; // It's common for internal apps to disable animations using `* { animation: none !important }`\n    // which can break the opening sequence. Try to detect such cases and work around them.\n\n    if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n      const styles = getComputedStyle(tooltip); // Use `getPropertyValue` to avoid issues with property renaming.\n\n      if (styles.getPropertyValue('animation-duration') === '0s' || styles.getPropertyValue('animation-name') === 'none') {\n        this._animationsDisabled = true;\n      }\n    }\n\n    if (isVisible) {\n      this._onShow();\n    }\n\n    if (this._animationsDisabled) {\n      tooltip.classList.add('_mat-animation-noopable');\n\n      this._finalizeAnimation(isVisible);\n    }\n  }\n\n}\n\n_TooltipComponentBase.ɵfac = function _TooltipComponentBase_Factory(t) {\n  return new (t || _TooltipComponentBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\n_TooltipComponentBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _TooltipComponentBase\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_TooltipComponentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n\n\nclass TooltipComponent extends _TooltipComponentBase {\n  constructor(changeDetectorRef, _elementRef, animationMode) {\n    super(changeDetectorRef, animationMode);\n    this._elementRef = _elementRef;\n    /* Whether the tooltip text overflows to multiple lines */\n\n    this._isMultiline = false;\n    this._showAnimation = 'mat-mdc-tooltip-show';\n    this._hideAnimation = 'mat-mdc-tooltip-hide';\n  }\n\n  _onShow() {\n    this._isMultiline = this._isTooltipMultiline();\n\n    this._markForCheck();\n  }\n  /** Whether the tooltip text has overflown to the next line */\n\n\n  _isTooltipMultiline() {\n    const rect = this._elementRef.nativeElement.getBoundingClientRect();\n\n    return rect.height > MIN_HEIGHT && rect.width >= MAX_WIDTH;\n  }\n\n}\n\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n  return new (t || TooltipComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nTooltipComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TooltipComponent,\n  selectors: [[\"mat-tooltip-component\"]],\n  viewQuery: function TooltipComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._tooltip = _t.first);\n    }\n  },\n  hostAttrs: [\"aria-hidden\", \"true\"],\n  hostVars: 2,\n  hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function TooltipComponent_mouseleave_HostBindingHandler($event) {\n        return ctx._handleMouseLeave($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"zoom\", ctx.isVisible() ? 1 : null);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 4,\n  consts: [[1, \"mdc-tooltip\", \"mdc-tooltip--shown\", \"mat-mdc-tooltip\", 3, \"ngClass\", \"animationend\"], [\"tooltip\", \"\"], [1, \"mdc-tooltip__surface\", \"mdc-tooltip__surface-animation\"]],\n  template: function TooltipComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵlistener(\"animationend\", function TooltipComponent_Template_div_animationend_0_listener($event) {\n        return ctx._handleAnimationEnd($event);\n      });\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mdc-tooltip--multiline\", ctx._isMultiline);\n      i0.ɵɵproperty(\"ngClass\", ctx.tooltipClass);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.message);\n    }\n  },\n  dependencies: [i5.NgClass],\n  styles: [\".mdc-tooltip__surface{word-break:var(--mdc-tooltip-word-break, normal);overflow-wrap:anywhere}.mdc-tooltip{position:fixed;display:none;z-index:9}.mdc-tooltip-wrapper--rich{position:relative}.mdc-tooltip--shown,.mdc-tooltip--showing,.mdc-tooltip--hide{display:inline-flex}.mdc-tooltip--shown.mdc-tooltip--rich,.mdc-tooltip--showing.mdc-tooltip--rich,.mdc-tooltip--hide.mdc-tooltip--rich{display:inline-block;left:-320px;position:absolute}.mdc-tooltip__surface{line-height:16px;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center}.mdc-tooltip__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-tooltip__surface::before{border-color:CanvasText}}.mdc-tooltip--rich .mdc-tooltip__surface{align-items:flex-start;display:flex;flex-direction:column;min-height:24px;min-width:40px;max-width:320px;position:relative}.mdc-tooltip--multiline .mdc-tooltip__surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mdc-tooltip__surface,.mdc-tooltip--multiline .mdc-tooltip__surface[dir=rtl]{text-align:right}.mdc-tooltip__surface .mdc-tooltip__title{margin:0 8px}.mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(200px - (2 * 8px));margin:8px;text-align:left}[dir=rtl] .mdc-tooltip__surface .mdc-tooltip__content,.mdc-tooltip__surface .mdc-tooltip__content[dir=rtl]{text-align:right}.mdc-tooltip--rich .mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(320px - (2 * 8px));align-self:stretch}.mdc-tooltip__surface .mdc-tooltip__content-link{text-decoration:none}.mdc-tooltip--rich-actions,.mdc-tooltip__content,.mdc-tooltip__title{z-index:1}.mdc-tooltip__surface-animation{opacity:0;transform:scale(0.8);will-change:transform,opacity}.mdc-tooltip--shown .mdc-tooltip__surface-animation{transform:scale(1);opacity:1}.mdc-tooltip--hide .mdc-tooltip__surface-animation{transform:scale(1)}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{position:absolute;height:24px;width:24px;transform:rotate(35deg) skewY(20deg) scaleX(0.9396926208)}.mdc-tooltip__caret-surface-top .mdc-elevation-overlay,.mdc-tooltip__caret-surface-bottom .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-tooltip__caret-surface-bottom{outline:1px solid rgba(0,0,0,0);z-index:-1}@media screen and (forced-colors: active){.mdc-tooltip__caret-surface-bottom{outline-color:CanvasText}}.mdc-tooltip__surface{background-color:var(--mdc-plain-tooltip-container-color, #fff)}.mdc-tooltip__surface{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__surface{color:var(--mdc-plain-tooltip-supporting-text-color, #000)}.mdc-tooltip__surface{font-family:var(--mdc-plain-tooltip-supporting-text-font, inherit);font-size:var(--mdc-plain-tooltip-supporting-text-size, inherit);font-weight:var(--mdc-plain-tooltip-supporting-text-weight, inherit);letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, inherit)}.mat-mdc-tooltip{position:relative;transform:scale(0)}.mat-mdc-tooltip::before{content:\\\"\\\";top:-8px;right:-8px;bottom:-8px;left:-8px;z-index:-1;position:absolute}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tooltip-component',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n        '[style.zoom]': 'isVisible() ? 1 : null',\n        '(mouseleave)': '_handleMouseLeave($event)',\n        'aria-hidden': 'true'\n      },\n      template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mdc-tooltip--shown mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mdc-tooltip__surface mdc-tooltip__surface-animation\\\">{{message}}</div>\\n</div>\\n\",\n      styles: [\".mdc-tooltip__surface{word-break:var(--mdc-tooltip-word-break, normal);overflow-wrap:anywhere}.mdc-tooltip{position:fixed;display:none;z-index:9}.mdc-tooltip-wrapper--rich{position:relative}.mdc-tooltip--shown,.mdc-tooltip--showing,.mdc-tooltip--hide{display:inline-flex}.mdc-tooltip--shown.mdc-tooltip--rich,.mdc-tooltip--showing.mdc-tooltip--rich,.mdc-tooltip--hide.mdc-tooltip--rich{display:inline-block;left:-320px;position:absolute}.mdc-tooltip__surface{line-height:16px;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center}.mdc-tooltip__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-tooltip__surface::before{border-color:CanvasText}}.mdc-tooltip--rich .mdc-tooltip__surface{align-items:flex-start;display:flex;flex-direction:column;min-height:24px;min-width:40px;max-width:320px;position:relative}.mdc-tooltip--multiline .mdc-tooltip__surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mdc-tooltip__surface,.mdc-tooltip--multiline .mdc-tooltip__surface[dir=rtl]{text-align:right}.mdc-tooltip__surface .mdc-tooltip__title{margin:0 8px}.mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(200px - (2 * 8px));margin:8px;text-align:left}[dir=rtl] .mdc-tooltip__surface .mdc-tooltip__content,.mdc-tooltip__surface .mdc-tooltip__content[dir=rtl]{text-align:right}.mdc-tooltip--rich .mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(320px - (2 * 8px));align-self:stretch}.mdc-tooltip__surface .mdc-tooltip__content-link{text-decoration:none}.mdc-tooltip--rich-actions,.mdc-tooltip__content,.mdc-tooltip__title{z-index:1}.mdc-tooltip__surface-animation{opacity:0;transform:scale(0.8);will-change:transform,opacity}.mdc-tooltip--shown .mdc-tooltip__surface-animation{transform:scale(1);opacity:1}.mdc-tooltip--hide .mdc-tooltip__surface-animation{transform:scale(1)}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{position:absolute;height:24px;width:24px;transform:rotate(35deg) skewY(20deg) scaleX(0.9396926208)}.mdc-tooltip__caret-surface-top .mdc-elevation-overlay,.mdc-tooltip__caret-surface-bottom .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-tooltip__caret-surface-bottom{outline:1px solid rgba(0,0,0,0);z-index:-1}@media screen and (forced-colors: active){.mdc-tooltip__caret-surface-bottom{outline-color:CanvasText}}.mdc-tooltip__surface{background-color:var(--mdc-plain-tooltip-container-color, #fff)}.mdc-tooltip__surface{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__surface{color:var(--mdc-plain-tooltip-supporting-text-color, #000)}.mdc-tooltip__surface{font-family:var(--mdc-plain-tooltip-supporting-text-font, inherit);font-size:var(--mdc-plain-tooltip-supporting-text-size, inherit);font-weight:var(--mdc-plain-tooltip-supporting-text-weight, inherit);letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, inherit)}.mat-mdc-tooltip{position:relative;transform:scale(0)}.mat-mdc-tooltip::before{content:\\\"\\\";top:-8px;right:-8px;bottom:-8px;left:-8px;z-index:-1;position:absolute}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    _tooltip: [{\n      type: ViewChild,\n      args: ['tooltip', {\n        // Use a static query here since we interact directly with\n        // the DOM which can happen before `ngAfterViewInit`.\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\n\n\nconst matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [// TODO(crisbeto): these values are based on MDC's CSS.\n  // We should be able to use their styles directly once we land #19432.\n  state('initial, void, hidden', style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => hidden', animate('75ms cubic-bezier(0.4, 0, 1, 1)'))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass MatTooltipModule {}\n\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) {\n  return new (t || MatTooltipModule)();\n};\n\nMatTooltipModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatTooltipModule\n});\nMatTooltipModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n      exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n      declarations: [MatTooltip, TooltipComponent],\n      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };","map":{"version":3,"names":["takeUntil","take","coerceBooleanProperty","coerceNumberProperty","ESCAPE","hasModifierKey","i0","InjectionToken","ElementRef","Directive","Inject","Input","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","i5","DOCUMENT","CommonModule","i2","normalizePassiveListenerOptions","ANIMATION_MODULE_TYPE","i1","Overlay","OverlayModule","ComponentPortal","Subject","i3","A11yModule","i4","trigger","state","style","transition","animate","CdkScrollableModule","MatCommonModule","SCROLL_THROTTLE_MS","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","TOOLTIP_PANEL_CLASS","PANEL_CLASS","passiveListenerOptions","passive","LONGPRESS_DELAY","MIN_VIEWPORT_TOOLTIP_THRESHOLD","UNBOUNDED_ANCHOR_GAP","MIN_HEIGHT","MAX_WIDTH","_MatTooltipBase","constructor","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_document","_position","_positionAtOrigin","_disabled","_viewInitialized","_pointerExitEventsInitialized","_viewportMargin","_cssClassPrefix","_showDelay","_hideDelay","touchGestures","_message","_passiveListeners","_destroyed","_scrollStrategy","positionAtOrigin","change","pipe","subscribe","_overlayRef","_updatePosition","value","_a","_tooltipInstance","show","updatePosition","_detach","disabled","hide","_setupPointerEnterEventsIfNeeded","_mouseLeaveHideDelay","message","removeDescription","nativeElement","String","trim","_isTooltipVisible","_updateTooltipMessage","runOutsideAngular","Promise","resolve","then","describe","tooltipClass","_tooltipClass","_setTooltipClass","ngAfterViewInit","monitor","origin","run","ngOnDestroy","clearTimeout","_touchstartTimeout","dispose","forEach","event","listener","removeEventListener","length","next","complete","stopMonitoring","delay","_cancelPendingAnimations","overlayRef","_createOverlay","_portal","_tooltipComponent","instance","attach","_triggerElement","afterHidden","isVisible","toggle","undefined","existingStrategy","getConfig","positionStrategy","_origin","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","_updateCurrentPositionClass","connectionPair","scrollableViewProperties","isOverlayClipped","create","direction","panelClass","detachments","outsidePointerEvents","_handleBodyInteraction","keydownEvents","keyCode","preventDefault","stopPropagation","disableTooltipInteractivity","addPanelClass","hasAttached","detach","_getOrigin","_getOverlayPosition","withPositions","_addOffset","Object","assign","main","fallback","isLtr","originPosition","originX","originY","ngDevMode","x","y","_invertPosition","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","newPosition","_currentPosition","classPrefix","removePanelClass","_platformSupportsMouseEvents","push","_setupPointerExitEventsIfNeeded","point","_disableNativeGesturesIfNecessary","touch","targetTouches","clientX","clientY","setTimeout","_addListeners","exitListeners","newTarget","relatedTarget","overlayElement","contains","_wheelListener","touchendListener","listeners","addEventListener","IOS","ANDROID","elementUnderPointer","elementFromPoint","element","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","ɵfac","ɵdir","type","ScrollDispatcher","ViewContainerRef","NgZone","Platform","AriaDescriber","FocusMonitor","Directionality","decorators","args","MatTooltip","elementRef","scrollDispatcher","viewContainerRef","ngZone","platform","ariaDescriber","focusMonitor","dir","defaultOptions","TooltipComponent","offset","offsetY","offsetX","selector","exportAs","host","_TooltipComponentBase","_changeDetectorRef","animationMode","_closeOnInteraction","_isVisible","_onHide","_animationsDisabled","_hideTimeoutId","_showTimeoutId","_toggleVisibility","markForCheck","_handleMouseLeave","_finalizeAnimation","_onShow","_handleAnimationEnd","animationName","_showAnimation","_hideAnimation","toVisible","tooltip","_tooltip","showClass","hideClass","classList","remove","add","getComputedStyle","styles","getPropertyValue","ChangeDetectorRef","changeDetectorRef","_isMultiline","_isTooltipMultiline","rect","getBoundingClientRect","height","width","ɵcmp","NgClass","encapsulation","None","changeDetection","OnPush","template","static","matTooltipAnimations","tooltipState","opacity","transform","MatTooltipModule","ɵmod","ɵinj","imports","exports","declarations","providers"],"sources":["C:/Users/Henry/Desktop/New folder/Atomas2/node_modules/@angular/material/fesm2015/tooltip.mjs"],"sourcesContent":["import { takeUntil, take } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, ElementRef, Directive, Inject, Input, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport * as i5 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport * as i3 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i4 from '@angular/cdk/bidi';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-mdc-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n// These constants were taken from MDC's `numbers` object. We can't import them from MDC,\n// because they have some top-level references to `window` which break during SSR.\nconst MIN_VIEWPORT_TOOLTIP_THRESHOLD = 8;\nconst UNBOUNDED_ANCHOR_GAP = 8;\nconst MIN_HEIGHT = 24;\nconst MAX_WIDTH = 200;\nclass _MatTooltipBase {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._positionAtOrigin = false;\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat';\n        this._showDelay = this._defaultOptions.showDelay;\n        this._hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.positionAtOrigin) {\n                this.positionAtOrigin = _defaultOptions.positionAtOrigin;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        var _a;\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    get positionAtOrigin() {\n        return this._positionAtOrigin;\n    }\n    set positionAtOrigin(value) {\n        this._positionAtOrigin = coerceBooleanProperty(value);\n        this._detach();\n        this._overlayRef = null;\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The default delay in ms before showing the tooltip after show is called */\n    get showDelay() {\n        return this._showDelay;\n    }\n    set showDelay(value) {\n        this._showDelay = coerceNumberProperty(value);\n    }\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    get hideDelay() {\n        return this._hideDelay;\n    }\n    set hideDelay(value) {\n        this._hideDelay = coerceNumberProperty(value);\n        if (this._tooltipInstance) {\n            this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() {\n        return this._message;\n    }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() {\n        return this._tooltipClass;\n    }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor\n            .monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay, origin) {\n        var _a;\n        if (this.disabled || !this.message || this._isTooltipVisible()) {\n            (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a._cancelPendingAnimations();\n            return;\n        }\n        const overlayRef = this._createOverlay(origin);\n        this._detach();\n        this._portal =\n            this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        const instance = (this._tooltipInstance = overlayRef.attach(this._portal).instance);\n        instance._triggerElement = this._elementRef.nativeElement;\n        instance._mouseLeaveHideDelay = this._hideDelay;\n        instance\n            .afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        instance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        const instance = this._tooltipInstance;\n        if (instance) {\n            if (instance.isVisible()) {\n                instance.hide(delay);\n            }\n            else {\n                instance._cancelPendingAnimations();\n                this._detach();\n            }\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle(origin) {\n        this._isTooltipVisible() ? this.hide() : this.show(undefined, origin);\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay(origin) {\n        var _a;\n        if (this._overlayRef) {\n            const existingStrategy = this._overlayRef.getConfig()\n                .positionStrategy;\n            if ((!this.positionAtOrigin || !origin) && existingStrategy._origin instanceof ElementRef) {\n                return this._overlayRef;\n            }\n            this._detach();\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this.positionAtOrigin ? origin || this._elementRef : this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy(),\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef\n            .detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef\n            .outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => { var _a; return (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a._handleBodyInteraction(); });\n        this._overlayRef\n            .keydownEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(event => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        });\n        if ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.disableTooltipInteractivity) {\n            this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n        }\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)),\n            this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback)),\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y },\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y },\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled ||\n            !this.message ||\n            !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners.push([\n                'mouseenter',\n                event => {\n                    this._setupPointerExitEventsIfNeeded();\n                    let point = undefined;\n                    if (event.x !== undefined && event.y !== undefined) {\n                        point = event;\n                    }\n                    this.show(undefined, point);\n                },\n            ]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners.push([\n                'touchstart',\n                event => {\n                    var _a;\n                    const touch = (_a = event.targetTouches) === null || _a === void 0 ? void 0 : _a[0];\n                    const origin = touch ? { x: touch.clientX, y: touch.clientY } : undefined;\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(undefined, origin), LONGPRESS_DELAY);\n                },\n            ]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push([\n                'mouseleave',\n                event => {\n                    var _a;\n                    const newTarget = event.relatedTarget;\n                    if (!newTarget || !((_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.overlayElement.contains(newTarget))) {\n                        this.hide();\n                    }\n                },\n            ], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect =\n                    style.msUserSelect =\n                        style.webkitUserSelect =\n                            style.MozUserSelect =\n                                'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\n_MatTooltipBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _MatTooltipBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatTooltipBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: _MatTooltipBase, inputs: { position: [\"matTooltipPosition\", \"position\"], positionAtOrigin: [\"matTooltipPositionAtOrigin\", \"positionAtOrigin\"], disabled: [\"matTooltipDisabled\", \"disabled\"], showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _MatTooltipBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i2.Platform }, { type: i3.AriaDescriber }, { type: i3.FocusMonitor }, { type: undefined }, { type: i4.Directionality }, { type: undefined }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { position: [{\n                type: Input,\n                args: ['matTooltipPosition']\n            }], positionAtOrigin: [{\n                type: Input,\n                args: ['matTooltipPositionAtOrigin']\n            }], disabled: [{\n                type: Input,\n                args: ['matTooltipDisabled']\n            }], showDelay: [{\n                type: Input,\n                args: ['matTooltipShowDelay']\n            }], hideDelay: [{\n                type: Input,\n                args: ['matTooltipHideDelay']\n            }], touchGestures: [{\n                type: Input,\n                args: ['matTooltipTouchGestures']\n            }], message: [{\n                type: Input,\n                args: ['matTooltip']\n            }], tooltipClass: [{\n                type: Input,\n                args: ['matTooltipClass']\n            }] } });\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n        super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n        this._tooltipComponent = TooltipComponent;\n        this._cssClassPrefix = 'mat-mdc';\n        this._viewportMargin = MIN_VIEWPORT_TOOLTIP_THRESHOLD;\n    }\n    _addOffset(position) {\n        const offset = UNBOUNDED_ANCHOR_GAP;\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        if (position.originY === 'top') {\n            position.offsetY = -offset;\n        }\n        else if (position.originY === 'bottom') {\n            position.offsetY = offset;\n        }\n        else if (position.originX === 'start') {\n            position.offsetX = isLtr ? -offset : offset;\n        }\n        else if (position.originX === 'end') {\n            position.offsetX = isLtr ? offset : -offset;\n        }\n        return position;\n    }\n}\nMatTooltip.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatTooltip, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i1.ScrollDispatcher }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i2.Platform }, { token: i3.AriaDescriber }, { token: i3.FocusMonitor }, { token: MAT_TOOLTIP_SCROLL_STRATEGY }, { token: i4.Directionality, optional: true }, { token: MAT_TOOLTIP_DEFAULT_OPTIONS, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nMatTooltip.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: MatTooltip, selector: \"[matTooltip]\", host: { classAttribute: \"mat-mdc-tooltip-trigger\" }, exportAs: [\"matTooltip\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatTooltip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTooltip]',\n                    exportAs: 'matTooltip',\n                    host: {\n                        'class': 'mat-mdc-tooltip-trigger',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i1.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i2.Platform }, { type: i3.AriaDescriber }, { type: i3.FocusMonitor }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n                    }] }, { type: i4.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\nclass _TooltipComponentBase {\n    constructor(_changeDetectorRef, animationMode) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Whether the tooltip is currently visible. */\n        this._isVisible = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        clearTimeout(this._hideTimeoutId);\n        this._showTimeoutId = setTimeout(() => {\n            this._toggleVisibility(true);\n            this._showTimeoutId = undefined;\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        clearTimeout(this._showTimeoutId);\n        this._hideTimeoutId = setTimeout(() => {\n            this._toggleVisibility(false);\n            this._hideTimeoutId = undefined;\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._isVisible;\n    }\n    ngOnDestroy() {\n        this._cancelPendingAnimations();\n        this._onHide.complete();\n        this._triggerElement = null;\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    _handleMouseLeave({ relatedTarget }) {\n        if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n            if (this.isVisible()) {\n                this.hide(this._mouseLeaveHideDelay);\n            }\n            else {\n                this._finalizeAnimation(false);\n            }\n        }\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() { }\n    /** Event listener dispatched when an animation on the tooltip finishes. */\n    _handleAnimationEnd({ animationName }) {\n        if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n            this._finalizeAnimation(animationName === this._showAnimation);\n        }\n    }\n    /** Cancels any pending animation sequences. */\n    _cancelPendingAnimations() {\n        clearTimeout(this._showTimeoutId);\n        clearTimeout(this._hideTimeoutId);\n        this._showTimeoutId = this._hideTimeoutId = undefined;\n    }\n    /** Handles the cleanup after an animation has finished. */\n    _finalizeAnimation(toVisible) {\n        if (toVisible) {\n            this._closeOnInteraction = true;\n        }\n        else if (!this.isVisible()) {\n            this._onHide.next();\n        }\n    }\n    /** Toggles the visibility of the tooltip element. */\n    _toggleVisibility(isVisible) {\n        // We set the classes directly here ourselves so that toggling the tooltip state\n        // isn't bound by change detection. This allows us to hide it even if the\n        // view ref has been detached from the CD tree.\n        const tooltip = this._tooltip.nativeElement;\n        const showClass = this._showAnimation;\n        const hideClass = this._hideAnimation;\n        tooltip.classList.remove(isVisible ? hideClass : showClass);\n        tooltip.classList.add(isVisible ? showClass : hideClass);\n        this._isVisible = isVisible;\n        // It's common for internal apps to disable animations using `* { animation: none !important }`\n        // which can break the opening sequence. Try to detect such cases and work around them.\n        if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n            const styles = getComputedStyle(tooltip);\n            // Use `getPropertyValue` to avoid issues with property renaming.\n            if (styles.getPropertyValue('animation-duration') === '0s' ||\n                styles.getPropertyValue('animation-name') === 'none') {\n                this._animationsDisabled = true;\n            }\n        }\n        if (isVisible) {\n            this._onShow();\n        }\n        if (this._animationsDisabled) {\n            tooltip.classList.add('_mat-animation-noopable');\n            this._finalizeAnimation(isVisible);\n        }\n    }\n}\n_TooltipComponentBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _TooltipComponentBase, deps: [{ token: i0.ChangeDetectorRef }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_TooltipComponentBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: _TooltipComponentBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: _TooltipComponentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    } });\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n    constructor(changeDetectorRef, _elementRef, animationMode) {\n        super(changeDetectorRef, animationMode);\n        this._elementRef = _elementRef;\n        /* Whether the tooltip text overflows to multiple lines */\n        this._isMultiline = false;\n        this._showAnimation = 'mat-mdc-tooltip-show';\n        this._hideAnimation = 'mat-mdc-tooltip-hide';\n    }\n    _onShow() {\n        this._isMultiline = this._isTooltipMultiline();\n        this._markForCheck();\n    }\n    /** Whether the tooltip text has overflown to the next line */\n    _isTooltipMultiline() {\n        const rect = this._elementRef.nativeElement.getBoundingClientRect();\n        return rect.height > MIN_HEIGHT && rect.width >= MAX_WIDTH;\n    }\n}\nTooltipComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: TooltipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nTooltipComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", type: TooltipComponent, selector: \"mat-tooltip-component\", host: { attributes: { \"aria-hidden\": \"true\" }, listeners: { \"mouseleave\": \"_handleMouseLeave($event)\" }, properties: { \"style.zoom\": \"isVisible() ? 1 : null\" } }, viewQueries: [{ propertyName: \"_tooltip\", first: true, predicate: [\"tooltip\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mdc-tooltip--shown mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mdc-tooltip__surface mdc-tooltip__surface-animation\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mdc-tooltip__surface{word-break:var(--mdc-tooltip-word-break, normal);overflow-wrap:anywhere}.mdc-tooltip{position:fixed;display:none;z-index:9}.mdc-tooltip-wrapper--rich{position:relative}.mdc-tooltip--shown,.mdc-tooltip--showing,.mdc-tooltip--hide{display:inline-flex}.mdc-tooltip--shown.mdc-tooltip--rich,.mdc-tooltip--showing.mdc-tooltip--rich,.mdc-tooltip--hide.mdc-tooltip--rich{display:inline-block;left:-320px;position:absolute}.mdc-tooltip__surface{line-height:16px;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center}.mdc-tooltip__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-tooltip__surface::before{border-color:CanvasText}}.mdc-tooltip--rich .mdc-tooltip__surface{align-items:flex-start;display:flex;flex-direction:column;min-height:24px;min-width:40px;max-width:320px;position:relative}.mdc-tooltip--multiline .mdc-tooltip__surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mdc-tooltip__surface,.mdc-tooltip--multiline .mdc-tooltip__surface[dir=rtl]{text-align:right}.mdc-tooltip__surface .mdc-tooltip__title{margin:0 8px}.mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(200px - (2 * 8px));margin:8px;text-align:left}[dir=rtl] .mdc-tooltip__surface .mdc-tooltip__content,.mdc-tooltip__surface .mdc-tooltip__content[dir=rtl]{text-align:right}.mdc-tooltip--rich .mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(320px - (2 * 8px));align-self:stretch}.mdc-tooltip__surface .mdc-tooltip__content-link{text-decoration:none}.mdc-tooltip--rich-actions,.mdc-tooltip__content,.mdc-tooltip__title{z-index:1}.mdc-tooltip__surface-animation{opacity:0;transform:scale(0.8);will-change:transform,opacity}.mdc-tooltip--shown .mdc-tooltip__surface-animation{transform:scale(1);opacity:1}.mdc-tooltip--hide .mdc-tooltip__surface-animation{transform:scale(1)}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{position:absolute;height:24px;width:24px;transform:rotate(35deg) skewY(20deg) scaleX(0.9396926208)}.mdc-tooltip__caret-surface-top .mdc-elevation-overlay,.mdc-tooltip__caret-surface-bottom .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-tooltip__caret-surface-bottom{outline:1px solid rgba(0,0,0,0);z-index:-1}@media screen and (forced-colors: active){.mdc-tooltip__caret-surface-bottom{outline-color:CanvasText}}.mdc-tooltip__surface{background-color:var(--mdc-plain-tooltip-container-color, #fff)}.mdc-tooltip__surface{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__surface{color:var(--mdc-plain-tooltip-supporting-text-color, #000)}.mdc-tooltip__surface{font-family:var(--mdc-plain-tooltip-supporting-text-font, inherit);font-size:var(--mdc-plain-tooltip-supporting-text-size, inherit);font-weight:var(--mdc-plain-tooltip-supporting-text-weight, inherit);letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, inherit)}.mat-mdc-tooltip{position:relative;transform:scale(0)}.mat-mdc-tooltip::before{content:\\\"\\\";top:-8px;right:-8px;bottom:-8px;left:-8px;z-index:-1;position:absolute}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"], dependencies: [{ kind: \"directive\", type: i5.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: TooltipComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tooltip-component', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                        '[style.zoom]': 'isVisible() ? 1 : null',\n                        '(mouseleave)': '_handleMouseLeave($event)',\n                        'aria-hidden': 'true',\n                    }, template: \"<div\\n  #tooltip\\n  class=\\\"mdc-tooltip mdc-tooltip--shown mat-mdc-tooltip\\\"\\n  [ngClass]=\\\"tooltipClass\\\"\\n  (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n  [class.mdc-tooltip--multiline]=\\\"_isMultiline\\\">\\n  <div class=\\\"mdc-tooltip__surface mdc-tooltip__surface-animation\\\">{{message}}</div>\\n</div>\\n\", styles: [\".mdc-tooltip__surface{word-break:var(--mdc-tooltip-word-break, normal);overflow-wrap:anywhere}.mdc-tooltip{position:fixed;display:none;z-index:9}.mdc-tooltip-wrapper--rich{position:relative}.mdc-tooltip--shown,.mdc-tooltip--showing,.mdc-tooltip--hide{display:inline-flex}.mdc-tooltip--shown.mdc-tooltip--rich,.mdc-tooltip--showing.mdc-tooltip--rich,.mdc-tooltip--hide.mdc-tooltip--rich{display:inline-block;left:-320px;position:absolute}.mdc-tooltip__surface{line-height:16px;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center}.mdc-tooltip__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-tooltip__surface::before{border-color:CanvasText}}.mdc-tooltip--rich .mdc-tooltip__surface{align-items:flex-start;display:flex;flex-direction:column;min-height:24px;min-width:40px;max-width:320px;position:relative}.mdc-tooltip--multiline .mdc-tooltip__surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mdc-tooltip__surface,.mdc-tooltip--multiline .mdc-tooltip__surface[dir=rtl]{text-align:right}.mdc-tooltip__surface .mdc-tooltip__title{margin:0 8px}.mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(200px - (2 * 8px));margin:8px;text-align:left}[dir=rtl] .mdc-tooltip__surface .mdc-tooltip__content,.mdc-tooltip__surface .mdc-tooltip__content[dir=rtl]{text-align:right}.mdc-tooltip--rich .mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(320px - (2 * 8px));align-self:stretch}.mdc-tooltip__surface .mdc-tooltip__content-link{text-decoration:none}.mdc-tooltip--rich-actions,.mdc-tooltip__content,.mdc-tooltip__title{z-index:1}.mdc-tooltip__surface-animation{opacity:0;transform:scale(0.8);will-change:transform,opacity}.mdc-tooltip--shown .mdc-tooltip__surface-animation{transform:scale(1);opacity:1}.mdc-tooltip--hide .mdc-tooltip__surface-animation{transform:scale(1)}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{position:absolute;height:24px;width:24px;transform:rotate(35deg) skewY(20deg) scaleX(0.9396926208)}.mdc-tooltip__caret-surface-top .mdc-elevation-overlay,.mdc-tooltip__caret-surface-bottom .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-tooltip__caret-surface-bottom{outline:1px solid rgba(0,0,0,0);z-index:-1}@media screen and (forced-colors: active){.mdc-tooltip__caret-surface-bottom{outline-color:CanvasText}}.mdc-tooltip__surface{background-color:var(--mdc-plain-tooltip-container-color, #fff)}.mdc-tooltip__surface{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{border-radius:var(--mdc-plain-tooltip-container-shape, var(--mdc-shape-small, 4px))}.mdc-tooltip__surface{color:var(--mdc-plain-tooltip-supporting-text-color, #000)}.mdc-tooltip__surface{font-family:var(--mdc-plain-tooltip-supporting-text-font, inherit);font-size:var(--mdc-plain-tooltip-supporting-text-size, inherit);font-weight:var(--mdc-plain-tooltip-supporting-text-weight, inherit);letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking, inherit)}.mat-mdc-tooltip{position:relative;transform:scale(0)}.mat-mdc-tooltip::before{content:\\\"\\\";top:-8px;right:-8px;bottom:-8px;left:-8px;z-index:-1;position:absolute}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { _tooltip: [{\n                type: ViewChild,\n                args: ['tooltip', {\n                        // Use a static query here since we interact directly with\n                        // the DOM which can happen before `ngAfterViewInit`.\n                        static: true,\n                    }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        // TODO(crisbeto): these values are based on MDC's CSS.\n        // We should be able to use their styles directly once we land #19432.\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0.8)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => hidden', animate('75ms cubic-bezier(0.4, 0, 1, 1)')),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatTooltipModule, declarations: [MatTooltip, TooltipComponent], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule], exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule] });\nMatTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatTooltipModule, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0-rc.1\", ngImport: i0, type: MatTooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n                    exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                    declarations: [MatTooltip, TooltipComponent],\n                    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}