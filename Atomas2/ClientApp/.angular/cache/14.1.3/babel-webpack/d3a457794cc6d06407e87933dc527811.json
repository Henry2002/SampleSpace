{"ast":null,"code":"import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\n\nconst _c3 = function () {\n  return {\n    enterDuration: 150\n  };\n};\n\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n  providedIn: 'root',\n  factory: () => ({\n    disableToggleValue: false\n  })\n});\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n\nlet nextUniqueId = 0;\n/** @docs-private */\n\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\n\nclass MatSlideToggleChange {\n  constructor(\n  /** The source MatSlideToggle of the event. */\n  source,\n  /** The new `checked` value of the MatSlideToggle. */\n  checked) {\n    this.source = source;\n    this.checked = checked;\n  }\n\n} // Boilerplate for applying mixins to MatSlideToggle.\n\n/** @docs-private */\n\n\nclass MatSlideToggleBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase))));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n\n\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n  constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n    super(elementRef);\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this.defaults = defaults;\n    this._animationMode = _animationMode;\n\n    this._onChange = _ => {};\n\n    this._onTouched = () => {};\n\n    this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n    this._required = false;\n    this._checked = false;\n    /** Name value will be applied to the input element if present. */\n\n    this.name = null;\n    /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n\n    this.id = this._uniqueId;\n    /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n\n    this.labelPosition = 'after';\n    /** Used to set the aria-label attribute on the underlying input element. */\n\n    this.ariaLabel = null;\n    /** Used to set the aria-labelledby attribute on the underlying input element. */\n\n    this.ariaLabelledby = null;\n    /** An event will be dispatched each time the slide-toggle changes its value. */\n\n    this.change = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed.\n     */\n\n    this.toggleChange = new EventEmitter();\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this.color = this.defaultColor = defaults.color || 'accent';\n  }\n  /** Whether the slide-toggle is required. */\n\n\n  get required() {\n    return this._required;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /** Whether the slide-toggle element is checked or not. */\n\n\n  get checked() {\n    return this._checked;\n  }\n\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Returns the unique id for the visual hidden input. */\n\n\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      // Only forward focus manually when it was received programmatically or through the\n      // keyboard. We should not do this for mouse/touch focus for two reasons:\n      // 1. It can prevent clicks from landing in Chrome (see #18269).\n      // 2. They're already handled by the wrapping `label` element.\n      if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n        this._inputElement.nativeElement.focus();\n      } else if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state\n        // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n        // error. See https://github.com/angular/angular/issues/17793. To work around this,\n        // we defer telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /** Method being called whenever the underlying input emits a change event. */\n\n\n  _onChangeEvent(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n    this.toggleChange.emit(); // When the slide toggle's config disables toggle change event by setting\n    // `disableToggleValue: true`, the slide toggle's value does not change, and the\n    // checked state of the underlying input needs to be changed back.\n\n    if (this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    } // Sync the value from the underlying input element with the component instance.\n\n\n    this.checked = this._inputElement.nativeElement.checked; // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n\n    this._emitChangeEvent();\n  }\n  /** Method being called whenever the slide-toggle has been clicked. */\n\n\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n  /** Implemented as part of ControlValueAccessor. */\n\n\n  writeValue(value) {\n    this.checked = !!value;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /** Implemented as a part of ControlValueAccessor. */\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Focuses the slide-toggle. */\n\n\n  focus(options, origin) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n  /** Toggles the checked state of the slide-toggle. */\n\n\n  toggle() {\n    this.checked = !this.checked;\n\n    this._onChange(this.checked);\n  }\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n\n\n  _emitChangeEvent() {\n    this._onChange(this.checked);\n\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n  /** Method being called whenever the label text changes. */\n\n\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n}\n\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) {\n  return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nMatSlideToggle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSlideToggle,\n  selectors: [[\"mat-slide-toggle\"]],\n  viewQuery: function MatSlideToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n      ɵngcc0.ɵɵviewQuery(_c1, 5);\n      ɵngcc0.ɵɵviewQuery(_c2, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-slide-toggle\"],\n  hostVars: 12,\n  hostBindings: function MatSlideToggle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-labelledby\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    name: \"name\",\n    id: \"id\",\n    labelPosition: \"labelPosition\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    required: \"required\",\n    checked: \"checked\"\n  },\n  outputs: {\n    change: \"change\",\n    toggleChange: \"toggleChange\"\n  },\n  exportAs: [\"matSlideToggle\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c4,\n  decls: 16,\n  vars: 18,\n  consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]],\n  template: function MatSlideToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"div\", 2, 3)(4, \"input\", 4, 5);\n      ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) {\n        return ctx._onChangeEvent($event);\n      })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n      ɵngcc0.ɵɵelement(8, \"div\", 8);\n      ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n      ɵngcc0.ɵɵelement(10, \"div\", 10);\n      ɵngcc0.ɵɵelementEnd()()();\n      ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n      ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() {\n        return ctx._onLabelTextChange();\n      });\n      ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n      ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(15);\n      ɵngcc0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      const _r0 = ɵngcc0.ɵɵreference(1);\n\n      const _r4 = ɵngcc0.ɵɵreference(12);\n\n      ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n      ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    }\n  },\n  dependencies: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent],\n  styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatSlideToggle.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\n\nMatSlideToggle.propDecorators = {\n  _thumbEl: [{\n    type: ViewChild,\n    args: ['thumbContainer']\n  }],\n  _thumbBarEl: [{\n    type: ViewChild,\n    args: ['toggleBar']\n  }],\n  name: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  required: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  toggleChange: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-slide-toggle',\n      exportAs: 'matSlideToggle',\n      host: {\n        'class': 'mat-slide-toggle',\n        '[id]': 'id',\n        // Needs to be `-1` so it can still receive programmatic focus.\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[class.mat-checked]': 'checked',\n        '[class.mat-disabled]': 'disabled',\n        '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n      },\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n      providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n      inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    change: [{\n      type: Output\n    }],\n    toggleChange: [{\n      type: Output\n    }],\n    required: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    _thumbEl: [{\n      type: ViewChild,\n      args: ['thumbContainer']\n    }],\n    _thumbBarEl: [{\n      type: ViewChild,\n      args: ['toggleBar']\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n\nMatSlideToggleRequiredValidator.ɵfac = /*@__PURE__*/function () {\n  let ɵMatSlideToggleRequiredValidator_BaseFactory;\n  return function MatSlideToggleRequiredValidator_Factory(t) {\n    return (ɵMatSlideToggleRequiredValidator_BaseFactory || (ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator)))(t || MatSlideToggleRequiredValidator);\n  };\n}();\n\nMatSlideToggleRequiredValidator.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatSlideToggleRequiredValidator,\n  selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n    type: Directive,\n    args: [{\n      selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n      providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n\n\nclass _MatSlideToggleRequiredValidatorModule {}\n\n_MatSlideToggleRequiredValidatorModule.ɵfac = function _MatSlideToggleRequiredValidatorModule_Factory(t) {\n  return new (t || _MatSlideToggleRequiredValidatorModule)();\n};\n\n_MatSlideToggleRequiredValidatorModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: _MatSlideToggleRequiredValidatorModule\n});\n_MatSlideToggleRequiredValidatorModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MatSlideToggleRequiredValidator],\n      declarations: [MatSlideToggleRequiredValidator]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, {\n    declarations: [MatSlideToggleRequiredValidator],\n    exports: [MatSlideToggleRequiredValidator]\n  });\n})();\n\nclass MatSlideToggleModule {}\n\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) {\n  return new (t || MatSlideToggleModule)();\n};\n\nMatSlideToggleModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSlideToggleModule\n});\nMatSlideToggleModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule, _MatSlideToggleRequiredValidatorModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule],\n      exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule],\n      declarations: [MatSlideToggle]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, {\n    declarations: function () {\n      return [MatSlideToggle];\n    },\n    imports: function () {\n      return [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule];\n    },\n    exports: function () {\n      return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };","map":{"version":3,"names":["ObserversModule","InjectionToken","forwardRef","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","ChangeDetectorRef","Attribute","Inject","Optional","ViewChild","Input","Output","Directive","NgModule","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatRippleModule","MatCommonModule","FocusMonitor","coerceBooleanProperty","NG_VALUE_ACCESSOR","NG_VALIDATORS","CheckboxRequiredValidator","ANIMATION_MODULE_TYPE","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","_c0","_c1","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","constructor","source","checked","MatSlideToggleBase","_elementRef","_MatSlideToggleMixinBase","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","defaults","_animationMode","_onChange","_","_onTouched","_uniqueId","_required","_checked","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","parseInt","color","defaultColor","required","value","markForCheck","inputId","ngAfterContentInit","monitor","subscribe","focusOrigin","_inputElement","nativeElement","focus","Promise","resolve","then","ngOnDestroy","stopMonitoring","_onChangeEvent","event","stopPropagation","emit","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","options","origin","focusVia","toggle","_onLabelTextChange","detectChanges","ɵfac","MatSlideToggle_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","MatSlideToggle_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","_thumbEl","first","_thumbBarEl","hostAttrs","hostVars","hostBindings","MatSlideToggle_HostBindings","ɵɵhostProperty","ɵɵattribute","ɵɵclassProp","inputs","disableRipple","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatSlideToggle_Template","ɵɵprojectionDef","ɵɵelementStart","ɵɵlistener","MatSlideToggle_Template_input_change_4_listener","$event","MatSlideToggle_Template_input_click_4_listener","ɵɵelementEnd","ɵɵelement","MatSlideToggle_Template_span_cdkObserveContent_11_listener","ɵɵtext","ɵɵprojection","_r0","ɵɵreference","_r4","ɵɵadvance","textContent","trim","ɵɵproperty","toString","ɵɵpureFunction0","dependencies","MatRipple","CdkObserveContent","styles","encapsulation","changeDetection","ctorParameters","String","decorators","args","undefined","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","providers","None","OnPush","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","ɵMatSlideToggleRequiredValidator_BaseFactory","MatSlideToggleRequiredValidator_Factory","ɵɵgetInheritedFactory","ɵdir","ɵɵdefineDirective","_MatSlideToggleRequiredValidatorModule","_MatSlideToggleRequiredValidatorModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","MatSlideToggleModule","MatSlideToggleModule_Factory","imports"],"sources":["C:/Users/Henry/Desktop/New folder/Atomas2/node_modules/@angular/material/__ivy_ngcc__/fesm2015/slide-toggle.js"],"sourcesContent":["import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase))));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.color = this.defaultColor = defaults.color || 'accent';\n    }\n    /** Whether the slide-toggle is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this._onTouched());\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlideToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"div\", 2, 3)(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd()()();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd()();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, dependencies: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{ selector: 'mat-slide-toggle', exportAs: 'matSlideToggle', host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                }, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR], inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"] }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = /*@__PURE__*/ function () { let ɵMatSlideToggleRequiredValidator_BaseFactory; return function MatSlideToggleRequiredValidator_Factory(t) { return (ɵMatSlideToggleRequiredValidator_BaseFactory || (ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator)))(t || MatSlideToggleRequiredValidator); }; }();\nMatSlideToggleRequiredValidator.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵfac = function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); };\n_MatSlideToggleRequiredValidatorModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); };\nMatSlideToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [_MatSlideToggleRequiredValidatorModule,\n        MatRippleModule,\n        MatCommonModule,\n        ObserversModule, _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}